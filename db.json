{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.pngg","path":"img/favicon.pngg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/instagram.png","path":"img/instagram.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1481753654919},{"_id":"themes/spfk/README.md","hash":"a573ef126efe0747c3a648f07a94b109b3d62984","modified":1481753654919},{"_id":"themes/spfk/_config.yml","hash":"d3cec195aa0ef713cf9cdc36fba50f747540a077","modified":1481757567675},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1481753654938},{"_id":"source/_drafts/HCTF2016-Writeup.md","hash":"ffd60061b274b690d6d6578924c942b7ef2fcfeb","modified":1480420784707},{"_id":"source/_drafts/test.md","hash":"7b6ee93429fb455769b164a99bc83ee99aff0949","modified":1481748545867},{"_id":"source/_drafts/初识OD.md","hash":"403ec03c2799e2d6b6c38ca058cb2bf1846ee696","modified":1480523539894},{"_id":"source/_posts/C-Helloworld.md","hash":"fb0c8b027b3d6c0587a9a91284279cf00b424f45","modified":1481756615112},{"_id":"source/_posts/GDB-peda.md","hash":"9c4cf7a2451ca4ea14576774025be581c85cef77","modified":1481756950000},{"_id":"source/_posts/Github-Add-SSHKEY.md","hash":"70f1633cbe380319448704ba9a44c060d6f27599","modified":1481756503392},{"_id":"source/_posts/Github-Webhook.md","hash":"59d66f6def615a293836ffac97962c8a046bdd04","modified":1481756476329},{"_id":"source/_posts/Learn-Markdown.md","hash":"4a6390a7fc1340baccd2765706d60473fe72106f","modified":1481756839744},{"_id":"source/_posts/Learn_VIM.md","hash":"7e76f6a9228a407e4d9ca1d512f1e0d38a376ed0","modified":1481756698283},{"_id":"source/_posts/OpenWRT-BuildEnvironMent.md","hash":"57f1e8ab4f45a66eb23e380f68ed71681749f867","modified":1481756643830},{"_id":"source/_posts/PIL-Grab.md","hash":"79c876018c4cb09c689d656f017a58242fa9add2","modified":1480819004529},{"_id":"source/_posts/Pwnable-collision.md","hash":"7a75e2d0a1a6df82a2eba92b6a5425dc03d6797a","modified":1481756663535},{"_id":"source/_posts/Pwnable-fd.md","hash":"a4f09db8a4fba0b515cbfdbd94620ea7ac174ae6","modified":1481756675774},{"_id":"source/_posts/hello-world.md","hash":"b516bc1d7af406a57d34bb44658d285a81cab506","modified":1481756867650},{"_id":"source/_posts/nginx-diable-domain.md","hash":"78aad771e1f865810e694be66671d46778a68209","modified":1481756458109},{"_id":"source/about/index.md","hash":"ac2e62f0037a8d57985e35bbf3fbadb8f31cf031","modified":1480523539895},{"_id":"themes/spfk/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1481753654900},{"_id":"themes/spfk/.git/config","hash":"e982ab9811e4397474601f6a3e284ef45b913363","modified":1481753654900},{"_id":"themes/spfk/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1481753607186},{"_id":"themes/spfk/.git/index","hash":"d4ebcb8566574a3857e8837299925f06b096c2cf","modified":1481753655169},{"_id":"themes/spfk/.git/packed-refs","hash":"5339e40863811f60c85f7af7b00e16b6e9b29019","modified":1481753654885},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1481753654921},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1481753654921},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1481753654921},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1481753654921},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1481753654922},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1481753654922},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1481753654922},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1481753654922},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1481753654922},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1481753654922},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1481753654938},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1481753654938},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1481753654938},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1481753654938},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481753654938},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1481753654938},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1481753654938},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1481753654938},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1481753654938},{"_id":"themes/spfk/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1481753607202},{"_id":"themes/spfk/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1481753607202},{"_id":"themes/spfk/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1481753607202},{"_id":"themes/spfk/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1481753607217},{"_id":"themes/spfk/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1481753607222},{"_id":"themes/spfk/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1481753607223},{"_id":"themes/spfk/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1481753607239},{"_id":"themes/spfk/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1481753607255},{"_id":"themes/spfk/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1481753607271},{"_id":"themes/spfk/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1481753607271},{"_id":"themes/spfk/.git/logs/HEAD","hash":"5469be4aa667073f80c48ecb8415065fd98f94dc","modified":1481753654900},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"9f960e278a1f8db11d632f35ccab63812e1a0b66","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"33a9e21698fe3038a7dfcf0f34d73901482c49db","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"4031d2ae2bd23cea8c1059122e7358d6b4943664","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"1f2809590152382520abbba13fab2571322db123","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"99b8143b6bfd6a6f3de4bbb34c3b9a50162fa4d4","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"fe5f6a248269db2003d4bde653f56c3adc7a613a","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"dcd7e89788f050d466d0502e7535397619009360","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1481753654938},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1481753654938},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1481753654938},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1481753654938},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1481753655069},{"_id":"themes/spfk/source/css/_variables.styl","hash":"06d579447488fb23e40603970dc08ffe6ad31897","modified":1481753655069},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1481753655069},{"_id":"themes/spfk/source/css/showshare.css","hash":"176f81997ae8108d07a82fc6ea7cc34f7305bfde","modified":1481753655069},{"_id":"themes/spfk/source/css/style.styl","hash":"6f93632f70b25aafc1e0d31c30c1d3e3120688cc","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1481753655085},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1478532504607},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1478532504607},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1478532504607},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1478532504607},{"_id":"themes/spfk/source/img/favicon.ico","hash":"48d9661f11688d84618da35409f6cbf3a0ac0507","modified":1478532504607},{"_id":"themes/spfk/source/img/favicon.png","hash":"33da7602134e0ec3c9eb08eb1478e2893f48a6ed","modified":1478532504607},{"_id":"themes/spfk/source/img/favicon.pngg","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1478532504607},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1478532504607},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1478532504607},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1478532504624},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1478532504624},{"_id":"themes/spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1481753655101},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1478532504625},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1478532504625},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1478532504626},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1478532504626},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1478532504627},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1478532504627},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1478532504627},{"_id":"themes/spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1481753655101},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1478532504628},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1478532504628},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1478532504628},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1478532504628},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1478532504628},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1481753655122},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1481753655122},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1481753655122},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1481753655122},{"_id":"themes/spfk/source/js/main.js","hash":"28d30d6dd4ffef17d236f31b5cba7714d770f5c1","modified":1481753655122},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1481753655122},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1481753655122},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1481753655122},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1481753655122},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1481753655122},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1481753655122},{"_id":"themes/spfk/.git/objects/pack/pack-8316eb81c5dc173d1c3fe484d5bb6533aaf9a4bd.idx","hash":"40b242d004d17323c1e827eead9896073ff468c3","modified":1481753654753},{"_id":"themes/spfk/.git/refs/heads/master","hash":"5d21f3ff78518cce92f23dfaed724033638b6179","modified":1481753654900},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"da37a6c1631e82533b4cec7d1f5bb246b5b1acfe","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"9590b381b3b787ca9b1d93d97a8d58e9fd9a4f2a","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1481753654922},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"499c1f92b613caff6d3828e5bfc4f40ed7af7b85","modified":1481753654938},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1481753654938},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1481753654938},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1481753654938},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1481753654938},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1481753654954},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1481753654969},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1481753655023},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1481753655038},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1481753655054},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"ac1648577fb7cec4674dda53a0c02490b43d4d7b","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"525dd26d258c566353417fa1b74b9eb57807f898","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"606c4b47dce561443f2d5151382aea4cfef4989a","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1481753655069},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1481753655069},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1481753655069},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1481753655069},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1481753655085},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1481753655085},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1481753655085},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1481753655085},{"_id":"themes/spfk/source/img/head.jpg","hash":"07047af83673946967a0f46e5586c5470c2df952","modified":1478532504623},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1481753655121},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1481753654969},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1481753655038},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1481753655054},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1481753655085},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1481753655085},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1481753655101},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1481753655101},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1481753655121},{"_id":"themes/spfk/.git/logs/refs/heads/master","hash":"5469be4aa667073f80c48ecb8415065fd98f94dc","modified":1481753654900},{"_id":"themes/spfk/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1481753654885},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1481753654954},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1481753655054},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"3571eedc41a7a099fab8cdac5c2143bf10397011","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"e3d6368de04e83d2baaebf80f7d746272bb22264","modified":1481753655069},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1481753655069},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1481753655101},{"_id":"themes/spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1481753655154},{"_id":"themes/spfk/source/static/api/css/imgshare.css","hash":"7465b359751d368f4a45f7823dc4a1918bba7f5f","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1481753655122},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1481753655122},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1481753655023},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1481753655038},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1481753655038},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1481753655038},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"da47f889e02241c8b095f852fb7efd89c114599d","modified":1481753655038},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1481753655054},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1481753655054},{"_id":"themes/spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481753655154},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481753655138},{"_id":"themes/spfk/.git/logs/refs/remotes/origin/HEAD","hash":"5469be4aa667073f80c48ecb8415065fd98f94dc","modified":1481753654900},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1481753654938},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1481753654954},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1481753655023},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1478532504607},{"_id":"themes/spfk/source/static/api/js/conf/const.js","hash":"44fb8861c5723e508ebaebfeaeafbaebbc2733ea","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/base/class.js","hash":"9b2e8af7870bd36a7e271c54b726cb79a375d93a","modified":1481753655138},{"_id":"themes/spfk/source/static/api/js/conf/define.js","hash":"734084a8d672deb373b9ad2ebf82621b9f76cfea","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/animate.js","hash":"0adfc191385eb76dc38452af8307d4e2f28436f9","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","hash":"3bf6c59fbcf5d77c595e461dac13478d078b2d48","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","hash":"e2a413a6ae6fa73cd080f5852a06f6c7e3280fd0","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","hash":"91dc0f3a19bc4f18c44e953e4a22313d9eb4d673","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","hash":"e1a4b51bf73037876517afae9c873c311a70a3ae","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","hash":"f6815b354bc7120e372bf0af0869996132d9c3db","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","hash":"bbcbd24ac4a6613a2c633766de78b2f9dd988808","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/start/router.js","hash":"8566cdaed64760ea765d0542a337ba7acc5a447b","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","hash":"db1ca49efafb70eca0e830a513367c0275368ff1","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","hash":"7403d0215bb28190bd0cfd5480469f13dd27f88b","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","hash":"b2a9e51f2c35ea58d5d2cc036c88895e34fb653e","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1481753655154},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1481753655169},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1481753655138},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1481753655138},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1481753654954},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1481753654954},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1481753654969},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1481753655085},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","hash":"f3ecbed4c05dba6a28df137e9a4e66c9ccfbd220","modified":1481753655154},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1481753655023},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1481753655054},{"_id":"themes/spfk/.git/objects/pack/pack-8316eb81c5dc173d1c3fe484d5bb6533aaf9a4bd.pack","hash":"c4c3019b82cbc42ca63bdf0a1e0646e5e5e38b48","modified":1481753654784},{"_id":"public/archives/page/2/index.html","hash":"f1c04ec57e9dd613272495eb90ec1b82fa2dcc89","modified":1481757579359},{"_id":"public/archives/2016/page/2/index.html","hash":"a470a4f746d32cd276aac667498545318e83d869","modified":1481757579359},{"_id":"public/archives/2016/07/index.html","hash":"d3d00ada9ea4203dd8434c164118dcb2248a0866","modified":1481757579375},{"_id":"public/tags/C/index.html","hash":"a4f1f9d621cc9050b5fff86e685d7ee057e950c6","modified":1481757579375},{"_id":"public/tags/Helloworld/index.html","hash":"f1bde5f1995bd66031fbf27714db8b5c05ef36ae","modified":1481757579375},{"_id":"public/tags/GDB/index.html","hash":"aafa9a21b300dabc3eb7ab49568d1f922a6fc721","modified":1481757579375},{"_id":"public/tags/Debugger/index.html","hash":"19ae7e521f503fcfd4b4219738dee19c324c7f21","modified":1481757579375},{"_id":"public/tags/peda/index.html","hash":"527f7b9e2ce2768b97a33e68f6e642e993990ac2","modified":1481757579375},{"_id":"public/tags/github/index.html","hash":"06e698e0ec7d7c390c4441fa319c5450e4f63942","modified":1481757579375},{"_id":"public/tags/ssh-key/index.html","hash":"1697fc799332f912ac678a0fe1348a9212b89bee","modified":1481757579375},{"_id":"public/tags/Github/index.html","hash":"f093f319c161b96503fbb9be0efdbfc44a695256","modified":1481757579375},{"_id":"public/tags/Webhook/index.html","hash":"08fff650bac60b92a073b798e711d46b057af2ca","modified":1481757579375},{"_id":"public/tags/自动部署/index.html","hash":"290e7be75396e17ce6e25e6b3b3182f61cac02fc","modified":1481757579375},{"_id":"public/tags/code-deploy/index.html","hash":"09418e1f9dad727cc19bb9cda65e81c0516af525","modified":1481757579375},{"_id":"public/tags/markdown/index.html","hash":"3950909d350432c64a24b2367ab6b38f8af7784b","modified":1481757579375},{"_id":"public/tags/入坑/index.html","hash":"fb2746a65f5dc6ad6e765ed9d9bc451d6806235c","modified":1481757579375},{"_id":"public/tags/VIM/index.html","hash":"852b560f44c03c9a8680d4c780745a54a4b1c532","modified":1481757579375},{"_id":"public/tags/Edtor/index.html","hash":"20e1d9b466fa2db3686381a8b3a9e992086d7276","modified":1481757579375},{"_id":"public/tags/openwrt/index.html","hash":"33da83eb0801ee11c5e1f2cf863445e44c5f20e3","modified":1481757579375},{"_id":"public/tags/enviroment/index.html","hash":"119cbd90ba4ed1c0bc9be265d864a4c5d1fb40a0","modified":1481757579375},{"_id":"public/tags/python/index.html","hash":"d9d9c23e6c515ade9350179d6056c874bcf38390","modified":1481757579375},{"_id":"public/tags/PIL/index.html","hash":"6a76c28896e9d5708cd6bbf85406a9e2873b0493","modified":1481757579375},{"_id":"public/tags/nginx/index.html","hash":"b36812932f241b8189844641afce189be14129fe","modified":1481757579375},{"_id":"public/tags/domain/index.html","hash":"e388ffb0cfb1d26868df0eb1dbc85f8b11dc27e1","modified":1481757579375},{"_id":"public/about/index.html","hash":"f4bba69825bfea3bbf3d37e53e0f6afb1d6c436e","modified":1481757579375},{"_id":"public/2016/12/15/nginx-diable-domain/index.html","hash":"0b8b630fb9274b9b81b4b39991cb256a4b3720ec","modified":1481757579375},{"_id":"public/2016/12/04/Github-Webhook/index.html","hash":"5c23dc6a64964b499e63bbcba61e288a3349f577","modified":1481757579375},{"_id":"public/2016/12/04/PIL-Grab/index.html","hash":"007f1b2b9faab44ddf795ec63efc3dbd50540221","modified":1481757579375},{"_id":"public/2016/11/30/Github-Add-SSHKEY/index.html","hash":"500f7333a7012aee52e270fd0cf97de25a9ca0f4","modified":1481757579375},{"_id":"public/2016/11/29/Learn_VIM/index.html","hash":"8081a9b6be376571abacbe9f8acc0b10446f308a","modified":1481757579375},{"_id":"public/2016/11/29/C-Helloworld/index.html","hash":"4d2164ab0030c1da77db499b87a50fb6d55f45e1","modified":1481757579375},{"_id":"public/2016/11/28/Pwnable-collision/index.html","hash":"0505aa4c8d9ac23147ebbc9b221ddb49969766e2","modified":1481757579375},{"_id":"public/2016/11/28/OpenWRT-BuildEnvironMent/index.html","hash":"6d50ffbefd89723e59c3c0f98de1321e4dd6dccd","modified":1481757579375},{"_id":"public/2016/11/27/Pwnable-fd/index.html","hash":"ba4872bd033e65377e5add1d781099d2dedc6420","modified":1481757579375},{"_id":"public/2016/11/20/GDB-peda/index.html","hash":"b9290f272a5cb8a6cb848d723eec7647b1f99510","modified":1481757579375},{"_id":"public/2016/11/07/hello-world/index.html","hash":"1e79e396fb462f0622bcbb26e5770f1f5d75146a","modified":1481757579375},{"_id":"public/2016/07/22/Learn-Markdown/index.html","hash":"80b268581db87084b4afd436bedf7248843e5dea","modified":1481757579375},{"_id":"public/archives/index.html","hash":"0026c9142edc2fb95f1497abd094ab0251b2d9c1","modified":1481757579375},{"_id":"public/archives/2016/index.html","hash":"8eba83b7d48b49a168abda0b65ab2cc12cdcf4c6","modified":1481757579375},{"_id":"public/archives/2016/11/index.html","hash":"80efcf5cc5579964dbd230782182a98542a60e1a","modified":1481757579375},{"_id":"public/archives/2016/12/index.html","hash":"57348476bf0d11e0883ac4682de836271e875900","modified":1481757579375},{"_id":"public/categories/CTF/index.html","hash":"8475fa938b61c5bc236695a4664787fc52b915e7","modified":1481757579375},{"_id":"public/categories/Program/index.html","hash":"1786ff64570b4bfeef3d32709173d95f5e2b7673","modified":1481757579375},{"_id":"public/categories/Linux/index.html","hash":"d3f93d98e83aa9b66d772cc27e96f00c506560cb","modified":1481757579375},{"_id":"public/tags/Linux/index.html","hash":"3a547416f71f61b1fe743dfea4cf1a5a677bd51b","modified":1481757579375},{"_id":"public/tags/CTF/index.html","hash":"5ed279e3764ca8473ea0e89930b34359a3527989","modified":1481757579375},{"_id":"public/tags/PWN/index.html","hash":"cb4ade186109ea7d53017da63f4d612fdb1f9688","modified":1481757579375},{"_id":"public/tags/pwnable/index.html","hash":"bf9860b754fd53790810f2941c252945948e2b45","modified":1481757579375},{"_id":"public/index.html","hash":"2c8ddc64bd6f9edb83070d7657624c61ce7ae843","modified":1481757579375},{"_id":"public/page/2/index.html","hash":"e7069e89e47f392fd3733764e9519b531c066000","modified":1481757579375},{"_id":"themes/spfk/_config.yml.bak","hash":"3d1b3e6de2b1a65e3793ada15863e1672e354e9e","modified":1481753654920}],"Category":[{"name":"CTF","_id":"ciwpjky7m0004c4uzyj1b19aj"},{"name":"Program","_id":"ciwpjky820009c4uzjrms8avw"},{"name":"Linux","_id":"ciwpjky8h000ec4uzbaz326pj"}],"Data":[],"Page":[{"title":"About","date":"2016-07-30T11:10:59.000Z","tags":["我是谁","从哪来","到哪去"],"_content":"About me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-07-30 19:10:59\ntags:\n- 我是谁\n- 从哪来\n- 到哪去\n---\nAbout me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","updated":"2016-11-30T16:32:19.895Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciwpjky7m0001c4uz2a33noo3","content":"<p>About me:<br><figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n","excerpt":"","more":"<p>About me:<br><figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n"}],"Post":[{"title":"HCTF2016 writeup","date":"2016-11-29T12:12:27.000Z","_content":"","source":"_drafts/HCTF2016-Writeup.md","raw":"---\ntitle: HCTF2016 writeup\ndate: 2016-11-29 20:12:27\ncategories: CTF\ntags:\n- HCTF\n- 萌新第一次\n---\n","slug":"HCTF2016-Writeup","published":0,"updated":"2016-11-29T11:59:44.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwpjky760000c4uzkrtw3tr9","content":"","excerpt":"","more":""},{"title":"Program HelloWorld","date":"2016-11-29T11:12:27.000Z","_content":"\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","source":"_posts/C-Helloworld.md","raw":"---\ntitle: Program HelloWorld\ndate: 2016-11-29 19:12:27\ncategories: Program\ntags:\n- C\n- Helloworld\n---\n\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","slug":"C-Helloworld","published":1,"updated":"2016-12-14T23:03:35.112Z","_id":"ciwpjky7m0002c4uzfu92p266","comments":1,"layout":"post","photos":[],"link":"","content":"<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>\n","excerpt":"<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>"},{"layout":"ctf","title":"初识OD","date":"2016-07-30T11:24:01.000Z","_content":"\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","source":"_drafts/初识OD.md","raw":"layout: ctf\ntitle: 初识OD\ndate: 2016-07-30 19:24:01\ntags: tools reverse\n---\n\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","slug":"初识OD","published":0,"updated":"2016-11-30T16:32:19.894Z","comments":1,"photos":[],"link":"","_id":"ciwpjky7m0005c4uz0sh09h53","content":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\" target=\"_blank\" rel=\"external\">官方网站</a></p>\n","excerpt":"","more":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\">官方网站</a></p>\n"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2016-12-14T20:49:05.866Z","updated":"2016-12-14T20:49:05.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwpjky820006c4uzaaoo645v","content":"","excerpt":"","more":""},{"title":"在Ubuntu16.04上配置peda","date":"2016-11-20T11:25:18.000Z","_content":"# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","source":"_posts/GDB-peda.md","raw":"---\ntitle: 在Ubuntu16.04上配置peda\ndate: 2016-11-20 19:25:18\ncategories: Linux\ntags:\n- GDB\n- Linux\n- Debugger\n- peda\n---\n# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","slug":"GDB-peda","published":1,"updated":"2016-12-14T23:09:10.000Z","_id":"ciwpjky820008c4uzdbcgv0qm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>\n","excerpt":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>","more":"<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>"},{"title":"github配置ssh key","date":"2016-11-30T02:43:18.000Z","_content":"### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","source":"_posts/Github-Add-SSHKEY.md","raw":"---\ntitle: github配置ssh key\ndate: 2016-11-30 10:43:18\ncategories: Program\ntags:\n- github\n- ssh key\n---\n### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","slug":"Github-Add-SSHKEY","published":1,"updated":"2016-12-14T23:01:43.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwpjky82000ac4uzem16j0wb","content":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</span></div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</span></div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>\n","excerpt":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</span></div></pre></td></tr></table></figure></p>","more":"<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</span></div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>"},{"title":"利用Github的webhook和tornado实现代码自动部署","date":"2016-12-04T02:39:31.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","source":"_posts/Github-Webhook.md","raw":"---\ntitle: 利用Github的webhook和tornado实现代码自动部署\ndate: 2016-12-04 10:39:31\ncategories:\n- Program\ntags:\n- Github\n- Webhook\n- 自动部署\n- code deploy\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","slug":"Github-Webhook","published":1,"updated":"2016-12-14T23:01:16.329Z","layout":"post","photos":[],"link":"","_id":"ciwpjky8h000cc4uzirihxz5x","content":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>\n","excerpt":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br>","more":"</p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>"},{"title":"Learn Markdown","date":"2016-07-22T14:29:18.000Z","_content":"# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","source":"_posts/Learn-Markdown.md","raw":"---\ntitle: Learn Markdown\ndate: 2016-07-22 22:29:18\ntags:\n- markdown\n- 入坑\n---\n# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","slug":"Learn-Markdown","published":1,"updated":"2016-12-14T23:07:19.744Z","_id":"ciwpjky8h000gc4uzi42q44kg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br><a id=\"more\"></a></p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"external\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\" data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br>","more":"</p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\"data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Learn VIM","date":"2016-11-29T11:25:18.000Z","_content":"###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","source":"_posts/Learn_VIM.md","raw":"---\ntitle: Learn VIM\ndate: 2016-11-29 19:25:18\ncategories: Linux\ntags:\n- VIM\n- Linux\n- Edtor\n---\n###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","slug":"Learn_VIM","published":1,"updated":"2016-12-14T23:04:58.283Z","_id":"ciwpjky8x000jc4uzauol8vqj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br><a id=\"more\"></a><br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>\n","excerpt":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br>","more":"<br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>"},{"title":"搭建OpenWRT编译开发环境","date":"2016-11-28T11:25:18.000Z","_content":"本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","source":"_posts/OpenWRT-BuildEnvironMent.md","raw":"---\ntitle:  搭建OpenWRT编译开发环境 \ndate: 2016-11-28 19:25:18\ncategories: Linux\ntags:\n- Linux\n- openwrt\n- enviroment\n---\n本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","slug":"OpenWRT-BuildEnvironMent","published":1,"updated":"2016-12-14T23:04:03.830Z","_id":"ciwpjky8x000mc4uzjxdtxw1t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作<a id=\"more\"></a>\nLet’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\" target=\"_blank\" rel=\"external\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>\n","excerpt":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作","more":"Let’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>"},{"title":"利用Python的PIL截屏","date":"2016-12-04T02:23:02.000Z","_content":"\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","source":"_posts/PIL-Grab.md","raw":"---\ntitle: 利用Python的PIL截屏\ndate: 2016-12-04 10:23:02\ncategories: Program\ntags:\n- python\n- PIL\n---\n\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","slug":"PIL-Grab","published":1,"updated":"2016-12-04T02:36:44.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwpjky8x000oc4uz5c0yodi0","content":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n","excerpt":"","more":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n"},{"title":"pwnable练习之collision","date":"2016-11-28T11:25:18.000Z","_content":"col.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","source":"_posts/Pwnable-collision.md","raw":"---\ntitle:  pwnable练习之collision \ndate: 2016-11-28 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\ncol.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","slug":"Pwnable-collision","published":1,"updated":"2016-12-14T23:04:23.535Z","_id":"ciwpjky8x000rc4uza2vmlk19","comments":1,"layout":"post","photos":[],"link":"","content":"<p>col.c代码如下：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br><a id=\"more\"></a><br>重点1：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>\n","excerpt":"<p>col.c代码如下：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br>","more":"<br>重点1：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>"},{"title":"pwnable练习之fd","date":"2016-11-27T11:25:18.000Z","_content":"fd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","source":"_posts/Pwnable-fd.md","raw":"---\ntitle:  pwnable练习之fd \ndate: 2016-11-27 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\nfd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","slug":"Pwnable-fd","published":1,"updated":"2016-12-14T23:04:35.774Z","_id":"ciwpjky8x000uc4uzxgjt6vlb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br><a id=\"more\"></a><br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>\n","excerpt":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br>","more":"<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-11-07T15:28:24.475Z","updated":"2016-12-14T23:07:47.650Z","_id":"ciwpjky9f000yc4uz25qsx86q","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"配置nginx，防止ip被恶意绑定域名","date":"2016-12-14T20:53:41.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"### 0x1 事件诱因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。对于这方面有洁癖的我,这种情况是万万不能忍的。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","source":"_posts/nginx-diable-domain.md","raw":"---\ntitle: 配置nginx，防止ip被恶意绑定域名\ndate: 2016-12-15 04:53:41\ncategories:\n- Linux\ntags:\n- nginx\n- domain\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n### 0x1 事件诱因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。对于这方面有洁癖的我,这种情况是万万不能忍的。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","slug":"nginx-diable-domain","published":1,"updated":"2016-12-14T23:00:58.109Z","layout":"post","photos":[],"link":"","_id":"ciwpjky9j0011c4uz0l47oe1i","content":"<h3 id=\"0x1-事件诱因\"><a href=\"#0x1-事件诱因\" class=\"headerlink\" title=\"0x1 事件诱因\"></a>0x1 事件诱因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。对于这方面有洁癖的我,这种情况是万万不能忍的。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>\n","excerpt":"<h3 id=\"0x1-事件诱因\"><a href=\"#0x1-事件诱因\" class=\"headerlink\" title=\"0x1 事件诱因\"></a>0x1 事件诱因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。对于这方面有洁癖的我,这种情况是万万不能忍的。<br>","more":"</p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwpjky760000c4uzkrtw3tr9","category_id":"ciwpjky7m0004c4uzyj1b19aj","_id":"ciwpjky82000bc4uz7a0258rb"},{"post_id":"ciwpjky82000ac4uzem16j0wb","category_id":"ciwpjky820009c4uzjrms8avw","_id":"ciwpjky8x000hc4uz4ry49xe0"},{"post_id":"ciwpjky7m0002c4uzfu92p266","category_id":"ciwpjky820009c4uzjrms8avw","_id":"ciwpjky8x000lc4uz7j954cy2"},{"post_id":"ciwpjky8h000cc4uzirihxz5x","category_id":"ciwpjky820009c4uzjrms8avw","_id":"ciwpjky8x000nc4uz8um53ggx"},{"post_id":"ciwpjky820008c4uzdbcgv0qm","category_id":"ciwpjky8h000ec4uzbaz326pj","_id":"ciwpjky8x000qc4uzfgqseiao"},{"post_id":"ciwpjky8x000jc4uzauol8vqj","category_id":"ciwpjky8h000ec4uzbaz326pj","_id":"ciwpjky8x000tc4uzjbskzpxy"},{"post_id":"ciwpjky8x000mc4uzjxdtxw1t","category_id":"ciwpjky8h000ec4uzbaz326pj","_id":"ciwpjky9e000wc4uzyb2mdjp9"},{"post_id":"ciwpjky8x000oc4uz5c0yodi0","category_id":"ciwpjky820009c4uzjrms8avw","_id":"ciwpjky9j0010c4uzk69itdsi"},{"post_id":"ciwpjky8x000rc4uza2vmlk19","category_id":"ciwpjky7m0004c4uzyj1b19aj","_id":"ciwpjky9j0012c4uzrzn9sa4h"},{"post_id":"ciwpjky8x000uc4uzxgjt6vlb","category_id":"ciwpjky7m0004c4uzyj1b19aj","_id":"ciwpjky9j0014c4uzt5x3cbzv"},{"post_id":"ciwpjky9j0011c4uz0l47oe1i","category_id":"ciwpjky8h000ec4uzbaz326pj","_id":"ciwpjky9j0015c4uz2k5wpeks"}],"PostTag":[{"post_id":"ciwpjky760000c4uzkrtw3tr9","tag_id":"ciwpjky7m0003c4uz8mh6a2h5","_id":"ciwpjky8h000fc4uzr0ohfu35"},{"post_id":"ciwpjky760000c4uzkrtw3tr9","tag_id":"ciwpjky820007c4uzzowy94fd","_id":"ciwpjky8x000ic4uz7iburr4o"},{"post_id":"ciwpjky7m0002c4uzfu92p266","tag_id":"ciwpjky8h000dc4uz5zyxa97j","_id":"ciwpjky8x000sc4uzzo42pbio"},{"post_id":"ciwpjky7m0002c4uzfu92p266","tag_id":"ciwpjky8x000kc4uzi3ra40oz","_id":"ciwpjky9d000vc4uzup9n7fo2"},{"post_id":"ciwpjky7m0005c4uz0sh09h53","tag_id":"ciwpjky8x000pc4uzaiuypj17","_id":"ciwpjky9j000zc4uz6xjiv13a"},{"post_id":"ciwpjky820008c4uzdbcgv0qm","tag_id":"ciwpjky9e000xc4uz9kuumvdy","_id":"ciwpjky9j0019c4uzl46aarbf"},{"post_id":"ciwpjky820008c4uzdbcgv0qm","tag_id":"ciwpjky9j0013c4uz5d6xaa8o","_id":"ciwpjky9j001ac4uz1pi3sc7q"},{"post_id":"ciwpjky820008c4uzdbcgv0qm","tag_id":"ciwpjky9j0016c4uz7tbus0wz","_id":"ciwpjky9y001cc4uz02nszcc1"},{"post_id":"ciwpjky820008c4uzdbcgv0qm","tag_id":"ciwpjky9j0017c4uzarwutg2l","_id":"ciwpjky9y001dc4uzln9cyn6p"},{"post_id":"ciwpjky82000ac4uzem16j0wb","tag_id":"ciwpjky9j0018c4uz5ixas1zs","_id":"ciwpjky9y001fc4uz8mteg2xs"},{"post_id":"ciwpjky82000ac4uzem16j0wb","tag_id":"ciwpjky9j001bc4uz83kkss0c","_id":"ciwpjky9y001gc4uzqkkfwc1v"},{"post_id":"ciwpjky8h000cc4uzirihxz5x","tag_id":"ciwpjky9y001ec4uzpdc5c5ze","_id":"ciwpjky9y001lc4uzxcvp0dlh"},{"post_id":"ciwpjky8h000cc4uzirihxz5x","tag_id":"ciwpjky9y001hc4uzq9dj92iq","_id":"ciwpjky9y001mc4uzyv7voma7"},{"post_id":"ciwpjky8h000cc4uzirihxz5x","tag_id":"ciwpjky9y001ic4uz34nah9cp","_id":"ciwpjky9y001oc4uzihth9b4m"},{"post_id":"ciwpjky8h000cc4uzirihxz5x","tag_id":"ciwpjky9y001jc4uz5kvqiyc2","_id":"ciwpjky9y001pc4uzgz25mpo6"},{"post_id":"ciwpjky8h000gc4uzi42q44kg","tag_id":"ciwpjky9y001kc4uzjgf90ngs","_id":"ciwpjky9y001rc4uzmeq76h25"},{"post_id":"ciwpjky8h000gc4uzi42q44kg","tag_id":"ciwpjky9y001nc4uzvum3ak0z","_id":"ciwpjky9y001sc4uzawk2kz1s"},{"post_id":"ciwpjky8x000jc4uzauol8vqj","tag_id":"ciwpjky9y001qc4uzsobwrh1x","_id":"ciwpjky9y001wc4uzp3qrwl4u"},{"post_id":"ciwpjky8x000jc4uzauol8vqj","tag_id":"ciwpjky9j0013c4uz5d6xaa8o","_id":"ciwpjky9y001xc4uzkul8w22p"},{"post_id":"ciwpjky8x000jc4uzauol8vqj","tag_id":"ciwpjky9y001uc4uzmdwui4ay","_id":"ciwpjkyae001zc4uzoe2gn5u5"},{"post_id":"ciwpjky8x000mc4uzjxdtxw1t","tag_id":"ciwpjky9j0013c4uz5d6xaa8o","_id":"ciwpjkyae0022c4uzhdwqspmk"},{"post_id":"ciwpjky8x000mc4uzjxdtxw1t","tag_id":"ciwpjky9y001yc4uz2iqgmquq","_id":"ciwpjkyae0023c4uz7l1tkdu4"},{"post_id":"ciwpjky8x000mc4uzjxdtxw1t","tag_id":"ciwpjkyae0020c4uzyo7edpoa","_id":"ciwpjkyae0025c4uzji4qe1iv"},{"post_id":"ciwpjky8x000oc4uz5c0yodi0","tag_id":"ciwpjkyae0021c4uztvmn8nvj","_id":"ciwpjkyae0027c4uzrqfgbbxv"},{"post_id":"ciwpjky8x000oc4uz5c0yodi0","tag_id":"ciwpjkyae0024c4uz1okljv5s","_id":"ciwpjkyae0028c4uz89xz8bov"},{"post_id":"ciwpjky8x000rc4uza2vmlk19","tag_id":"ciwpjkyae0026c4uztw9uy4n4","_id":"ciwpjkyau002dc4uzesfdjg4e"},{"post_id":"ciwpjky8x000rc4uza2vmlk19","tag_id":"ciwpjky9j0013c4uz5d6xaa8o","_id":"ciwpjkyau002ec4uzf1b7ir6g"},{"post_id":"ciwpjky8x000rc4uza2vmlk19","tag_id":"ciwpjkyae002ac4uzcvl3eltq","_id":"ciwpjkyau002gc4uzxsvzhjlj"},{"post_id":"ciwpjky8x000rc4uza2vmlk19","tag_id":"ciwpjkyau002bc4uz9pu5qj4f","_id":"ciwpjkyau002hc4uzjesp1yxk"},{"post_id":"ciwpjky8x000uc4uzxgjt6vlb","tag_id":"ciwpjkyae0026c4uztw9uy4n4","_id":"ciwpjkyau002lc4uzxrt9g5sm"},{"post_id":"ciwpjky8x000uc4uzxgjt6vlb","tag_id":"ciwpjky9j0013c4uz5d6xaa8o","_id":"ciwpjkyau002mc4uzwpf9w3my"},{"post_id":"ciwpjky8x000uc4uzxgjt6vlb","tag_id":"ciwpjkyae002ac4uzcvl3eltq","_id":"ciwpjkyau002oc4uziwg08766"},{"post_id":"ciwpjky8x000uc4uzxgjt6vlb","tag_id":"ciwpjkyau002bc4uz9pu5qj4f","_id":"ciwpjkyau002pc4uznjjwfqbr"},{"post_id":"ciwpjky9j0011c4uz0l47oe1i","tag_id":"ciwpjkyau002kc4uzwdf8oq23","_id":"ciwpjkyau002qc4uzixl24bfb"},{"post_id":"ciwpjky9j0011c4uz0l47oe1i","tag_id":"ciwpjkyau002nc4uzbks7enu3","_id":"ciwpjkyau002rc4uzbwj9cb2q"}],"Tag":[{"name":"HCTF","_id":"ciwpjky7m0003c4uz8mh6a2h5"},{"name":"萌新第一次","_id":"ciwpjky820007c4uzzowy94fd"},{"name":"C","_id":"ciwpjky8h000dc4uz5zyxa97j"},{"name":"Helloworld","_id":"ciwpjky8x000kc4uzi3ra40oz"},{"name":"tools reverse","_id":"ciwpjky8x000pc4uzaiuypj17"},{"name":"GDB","_id":"ciwpjky9e000xc4uz9kuumvdy"},{"name":"Linux","_id":"ciwpjky9j0013c4uz5d6xaa8o"},{"name":"Debugger","_id":"ciwpjky9j0016c4uz7tbus0wz"},{"name":"peda","_id":"ciwpjky9j0017c4uzarwutg2l"},{"name":"github","_id":"ciwpjky9j0018c4uz5ixas1zs"},{"name":"ssh key","_id":"ciwpjky9j001bc4uz83kkss0c"},{"name":"Github","_id":"ciwpjky9y001ec4uzpdc5c5ze"},{"name":"Webhook","_id":"ciwpjky9y001hc4uzq9dj92iq"},{"name":"自动部署","_id":"ciwpjky9y001ic4uz34nah9cp"},{"name":"code deploy","_id":"ciwpjky9y001jc4uz5kvqiyc2"},{"name":"markdown","_id":"ciwpjky9y001kc4uzjgf90ngs"},{"name":"入坑","_id":"ciwpjky9y001nc4uzvum3ak0z"},{"name":"VIM","_id":"ciwpjky9y001qc4uzsobwrh1x"},{"name":"Edtor","_id":"ciwpjky9y001uc4uzmdwui4ay"},{"name":"openwrt","_id":"ciwpjky9y001yc4uz2iqgmquq"},{"name":"enviroment","_id":"ciwpjkyae0020c4uzyo7edpoa"},{"name":"python","_id":"ciwpjkyae0021c4uztvmn8nvj"},{"name":"PIL","_id":"ciwpjkyae0024c4uz1okljv5s"},{"name":"CTF","_id":"ciwpjkyae0026c4uztw9uy4n4"},{"name":"PWN","_id":"ciwpjkyae002ac4uzcvl3eltq"},{"name":"pwnable","_id":"ciwpjkyau002bc4uz9pu5qj4f"},{"name":"nginx","_id":"ciwpjkyau002kc4uzwdf8oq23"},{"name":"domain","_id":"ciwpjkyau002nc4uzbks7enu3"}]}}