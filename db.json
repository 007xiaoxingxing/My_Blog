{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.pngg","path":"img/favicon.pngg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/instagram.png","path":"img/instagram.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1507605308018},{"_id":"themes/spfk/README.md","hash":"a573ef126efe0747c3a648f07a94b109b3d62984","modified":1507605308019},{"_id":"themes/spfk/_config.yml","hash":"fd53fd711c053fc73760d6299ac8640eef2c39f5","modified":1507605308020},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1507605308082},{"_id":"source/_posts/C-Helloworld.md","hash":"fb0c8b027b3d6c0587a9a91284279cf00b424f45","modified":1507605307984},{"_id":"source/_posts/BubbleSort.md","hash":"73e2238b8b681af61de4153d705c737ca82bbc90","modified":1507605307983},{"_id":"source/_posts/Centos7-lnmp.md","hash":"6a9e4792938245668b7c57fe4ea992e7119238ef","modified":1507605307985},{"_id":"source/_posts/ChangeUbuntuPassWd.md","hash":"608829e98f114a3d5a72fee12bb3cdeb682b71b8","modified":1507605307986},{"_id":"source/_posts/Decorator-Notes.md","hash":"3d5e6d0883728287a3353b4d8e53ea4f11f2e850","modified":1507605307988},{"_id":"source/_posts/DjangoRESTframework-ReqAndRes.md","hash":"4c59e592d59e9514e570bd9062efd84cbda4e1e8","modified":1507622845603},{"_id":"source/_posts/Django-helloworld.md","hash":"01640090e50652d87f9bf5107f78baea3bc07309","modified":1507605307989},{"_id":"source/_posts/CompileNgrok.md","hash":"2bfe4a568a8790a66204cd1ff49581f3bdbcf36f","modified":1507605307987},{"_id":"source/_posts/CompileOpenJDK.md","hash":"3557d10e8bf9df68df0e254c530f6e51adafc1b0","modified":1507605307988},{"_id":"source/_posts/Django-install.md","hash":"7e9f68f61c283e23e899fcabc5cef576e81bd572","modified":1507605307990},{"_id":"source/_posts/DokerStudy-install.md","hash":"385bc2043636c675b1a5179a01839cd0e5804c11","modified":1507605307991},{"_id":"source/_posts/Factory-Notes.md","hash":"7c2b38981c72936ba30c65b77a5eea915eb03b3a","modified":1507605307992},{"_id":"source/_posts/GDB-peda.md","hash":"9c4cf7a2451ca4ea14576774025be581c85cef77","modified":1507605307993},{"_id":"source/_posts/Github-Add-SSHKEY.md","hash":"70f1633cbe380319448704ba9a44c060d6f27599","modified":1507605307994},{"_id":"source/_posts/Github-Webhook.md","hash":"196f2e9a8851882d44e9609d21856c80446c368b","modified":1507605307995},{"_id":"source/_posts/InsertSort.md","hash":"0588a28328787b97bd67b09a732671f2d6e28aeb","modified":1507605307995},{"_id":"source/_posts/Learn-Markdown.md","hash":"4a6390a7fc1340baccd2765706d60473fe72106f","modified":1507605307996},{"_id":"source/_posts/Learn_VIM.md","hash":"7e76f6a9228a407e4d9ca1d512f1e0d38a376ed0","modified":1507605307997},{"_id":"source/_posts/Let-s-Encrypt.md","hash":"cfcbe8e339a3d8205f0502c10f74560ab0b930fe","modified":1507605307998},{"_id":"source/_posts/Linux-Add-Swap.md","hash":"3abb25b69f674f989bfa2053404ad3a148961538","modified":1507605307999},{"_id":"source/_posts/DjangoRESTframework-serializetion.md","hash":"e6c983d8e0e5d83d404afbb3727e8dce06e0e3ce","modified":1507618640780},{"_id":"source/_posts/DjangoRESTframework-quickstart.md","hash":"7afc8d91050e4c3169b91b992c2a12d1114a22cc","modified":1507606395206},{"_id":"source/_posts/MariaDB-Create-Remote.md","hash":"269edd0c2e9cf4ba0ef8bf00e976efb058d383dc","modified":1507605308002},{"_id":"source/_posts/Linux-File-Priveleges.md","hash":"f4c352781d1d0ac5e1bd12a9a2c1f5fb32987a8e","modified":1507605308000},{"_id":"source/_posts/LoginNewTP.md","hash":"408e07d216e6a9b9a1db73b85762f78fb0e08adb","modified":1507605308001},{"_id":"source/_posts/Observer-Notes.md","hash":"26048603a4f9d48392c997e910118be6dabc8cc6","modified":1507605308003},{"_id":"source/_posts/OpenWRT-BuildEnvironMent.md","hash":"57f1e8ab4f45a66eb23e380f68ed71681749f867","modified":1507605308004},{"_id":"source/_posts/OpenWrt-HelloWorl.md","hash":"16bd89f2c61b0fd9c25ccaf445857e517598ac47","modified":1507605308005},{"_id":"source/_posts/PDF-watermask.md","hash":"8b2a4b537a6ff175a0e3c5bb4b28e3730024394c","modified":1507605308006},{"_id":"source/_posts/PIL-Grab.md","hash":"6cae0587585a7bed5fd786ddc55dc4ef8a604cd5","modified":1507605308007},{"_id":"source/_posts/SSH-LOG-USER.md","hash":"e3c13a33a20cf19ef005e5bd26834aab31bda18e","modified":1507605308010},{"_id":"source/_posts/Pwnable-fd.md","hash":"a4f09db8a4fba0b515cbfdbd94620ea7ac174ae6","modified":1507605308009},{"_id":"source/_posts/Pwnable-collision.md","hash":"7a75e2d0a1a6df82a2eba92b6a5425dc03d6797a","modified":1507605308008},{"_id":"source/_posts/nginx-diable-domain.md","hash":"6385f3d1196f90881b485d24c285c53287a5d701","modified":1507605308012},{"_id":"source/_posts/hello-world.md","hash":"cc55890d4caa8353f85c0f2a014f0f3343b4c134","modified":1507605308011},{"_id":"source/_posts/TCP-Echo-Demo.md","hash":"c08014212bf4ba2b0d29d3b357d2211264a35acc","modified":1507605308011},{"_id":"source/_posts/python-note-repr.md","hash":"d6f0b6699afeddab69fbac3739397ee5e7b229db","modified":1507605308013},{"_id":"source/_drafts/HCTF2016-Writeup.md","hash":"ffd60061b274b690d6d6578924c942b7ef2fcfeb","modified":1507605307979},{"_id":"source/_posts/tornado-hello-world.md","hash":"86ac545d6d8c89604cdf052f85ecab43f381f42a","modified":1507605308014},{"_id":"source/_posts/tornado-requesthandler.md","hash":"4cf7091b41d00c8510847aadd575d007482bd495","modified":1507605308015},{"_id":"source/_drafts/test.md","hash":"676e63cfc27bd10816be73d80ad5381621a86fc4","modified":1507605307981},{"_id":"source/_drafts/初识OD.md","hash":"403ec03c2799e2d6b6c38ca058cb2bf1846ee696","modified":1507605307981},{"_id":"source/about/index.md","hash":"ac2e62f0037a8d57985e35bbf3fbadb8f31cf031","modified":1507605308016},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1507605308022},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1507605308023},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1507605308021},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1507605308024},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1507605308025},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1507605308026},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1507605308027},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1507605308028},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1507605308028},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1507605308029},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1507605308076},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1507605308075},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1507605308077},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1507605308077},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1507605308078},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1507605308079},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1507605308081},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1507605308080},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1507605308083},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"9f960e278a1f8db11d632f35ccab63812e1a0b66","modified":1507605308031},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1507605308036},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1507605308035},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"4031d2ae2bd23cea8c1059122e7358d6b4943664","modified":1507605308037},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1507605308039},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"33a9e21698fe3038a7dfcf0f34d73901482c49db","modified":1507605308036},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1507605308038},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1507605308043},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1507605308045},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1507605308047},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1507605308045},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"1f2809590152382520abbba13fab2571322db123","modified":1507605308044},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1507605308049},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"99b8143b6bfd6a6f3de4bbb34c3b9a50162fa4d4","modified":1507605308046},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"fe5f6a248269db2003d4bde653f56c3adc7a613a","modified":1507605308048},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1507605308049},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"dcd7e89788f050d466d0502e7535397619009360","modified":1507605308050},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1507605308068},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1507605308072},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1507605308073},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1507605308074},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1507605308153},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1507605308185},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1507605308190},{"_id":"themes/spfk/source/css/showshare.css","hash":"176f81997ae8108d07a82fc6ea7cc34f7305bfde","modified":1507605308187},{"_id":"themes/spfk/source/css/style.styl","hash":"6f93632f70b25aafc1e0d31c30c1d3e3120688cc","modified":1507605308188},{"_id":"themes/spfk/source/css/_variables.styl","hash":"06d579447488fb23e40603970dc08ffe6ad31897","modified":1507605308184},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1507605308191},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1507605308192},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1507605308194},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1507605308195},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1507605308193},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1507605308203},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1507605308202},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1507605308204},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1507605308248},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1507605308250},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1507605308257},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1507605308257},{"_id":"themes/spfk/source/js/main.js","hash":"28d30d6dd4ffef17d236f31b5cba7714d770f5c1","modified":1507605308258},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1507605308260},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1507605308259},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1507605308261},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1507605308262},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1507605308222},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1507605308221},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1507605308222},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1507605308223},{"_id":"themes/spfk/source/img/favicon.pngg","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1507605308226},{"_id":"themes/spfk/source/img/favicon.ico","hash":"48d9661f11688d84618da35409f6cbf3a0ac0507","modified":1507605308224},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1507605308227},{"_id":"themes/spfk/source/img/favicon.png","hash":"33da7602134e0ec3c9eb08eb1478e2893f48a6ed","modified":1507605308226},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1507605308228},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1507605308231},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1507605308235},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1507605308230},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1507605308236},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1507605308233},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1507605308234},{"_id":"themes/spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1507605308232},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1507605308238},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1507605308235},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1507605308237},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1507605308240},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1507605308242},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1507605308241},{"_id":"themes/spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1507605308239},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1507605308243},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1507605308244},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"7ef559423622f8959cce79274bdf782d92a6e867","modified":1507605308136},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1507605308034},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1507605308032},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1507605308042},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1507605308054},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1507605308053},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1507605308054},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1507605308040},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1507605308056},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1507605308068},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"da37a6c1631e82533b4cec7d1f5bb246b5b1acfe","modified":1507605308041},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1507605308052},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1507605308067},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"9590b381b3b787ca9b1d93d97a8d58e9fd9a4f2a","modified":1507605308055},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1507605308250},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1507605308255},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1507605308071},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"499c1f92b613caff6d3828e5bfc4f40ed7af7b85","modified":1507605308070},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1507605308072},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1507605308183},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1507605308184},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1507605308187},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1507605308207},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1507605308206},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1507605308154},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1507605308156},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"ac1648577fb7cec4674dda53a0c02490b43d4d7b","modified":1507605308155},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1507605308171},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1507605308172},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1507605308170},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1507605308174},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"525dd26d258c566353417fa1b74b9eb57807f898","modified":1507605308172},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1507605308176},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1507605308180},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"606c4b47dce561443f2d5151382aea4cfef4989a","modified":1507605308173},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1507605308175},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1507605308179},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1507605308177},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1507605308181},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1507605308181},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1507605308197},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1507605308196},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1507605308198},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1507605308199},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1507605308201},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1507605308200},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1507605308093},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1507605308091},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1507605308085},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1507605308111},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1507605308134},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1507605308122},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1507605308151},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1507605308247},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1507605308209},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1507605308211},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1507605308216},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1507605308217},{"_id":"themes/spfk/source/img/head.jpg","hash":"07047af83673946967a0f46e5586c5470c2df952","modified":1507605308230},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1507605308106},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1507605308129},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1507605308145},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1507605308246},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1507605308214},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1507605308167},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"e3d6368de04e83d2baaebf80f7d746272bb22264","modified":1507605308169},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"3571eedc41a7a099fab8cdac5c2143bf10397011","modified":1507605308168},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1507605308178},{"_id":"themes/spfk/source/static/api/css/imgshare.css","hash":"7465b359751d368f4a45f7823dc4a1918bba7f5f","modified":1507605308264},{"_id":"themes/spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1507605308265},{"_id":"themes/spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1507605308266},{"_id":"themes/spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1507605308267},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1507605308268},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1507605308269},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1507605308270},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1507605308271},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1507605308270},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1507605308273},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1507605308275},{"_id":"themes/spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1507605308273},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1507605308275},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1507605308277},{"_id":"themes/spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1507605308278},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1507605308279},{"_id":"themes/spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1507605308278},{"_id":"themes/spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1507605308328},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1507605308104},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1507605308150},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507605308297},{"_id":"themes/spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507605308338},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507605308339},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1507605308116},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1507605308125},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1507605308133},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1507605308127},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1507605308143},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1507605308147},{"_id":"themes/spfk/source/static/api/js/base/class.js","hash":"9b2e8af7870bd36a7e271c54b726cb79a375d93a","modified":1507605308313},{"_id":"themes/spfk/source/static/api/js/conf/const.js","hash":"44fb8861c5723e508ebaebfeaeafbaebbc2733ea","modified":1507605308326},{"_id":"themes/spfk/source/static/api/js/conf/define.js","hash":"734084a8d672deb373b9ad2ebf82621b9f76cfea","modified":1507605308327},{"_id":"themes/spfk/source/static/api/js/start/router.js","hash":"8566cdaed64760ea765d0542a337ba7acc5a447b","modified":1507605308337},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1507605308280},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1507605308282},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1507605308283},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1507605308284},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1507605308285},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1507605308287},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1507605308286},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1507605308289},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1507605308290},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1507605308292},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1507605308291},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1507605308293},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1507605308295},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1507605308295},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1507605308294},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1507605308296},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1507605308297},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1507605308298},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1507605308300},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1507605308299},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1507605308301},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1507605308302},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1507605308303},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1507605308305},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1507605308304},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1507605308305},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1507605308310},{"_id":"themes/spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1507605308307},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1507605308306},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1507605308311},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1507605308329},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1507605308331},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","hash":"91dc0f3a19bc4f18c44e953e4a22313d9eb4d673","modified":1507605308330},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1507605308334},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","hash":"e1a4b51bf73037876517afae9c873c311a70a3ae","modified":1507605308332},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","hash":"f6815b354bc7120e372bf0af0869996132d9c3db","modified":1507605308333},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1507605308336},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1507605308335},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","hash":"db1ca49efafb70eca0e830a513367c0275368ff1","modified":1507605308341},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","hash":"bbcbd24ac4a6613a2c633766de78b2f9dd988808","modified":1507605308340},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","hash":"7403d0215bb28190bd0cfd5480469f13dd27f88b","modified":1507605308342},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1507605308342},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1507605308318},{"_id":"themes/spfk/source/static/api/js/component/animate.js","hash":"0adfc191385eb76dc38452af8307d4e2f28436f9","modified":1507605308316},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","hash":"3bf6c59fbcf5d77c595e461dac13478d078b2d48","modified":1507605308319},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1507605308322},{"_id":"themes/spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1507605308320},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1507605308321},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1507605308323},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","hash":"e2a413a6ae6fa73cd080f5852a06f6c7e3280fd0","modified":1507605308324},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1507605308325},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1507605308344},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","hash":"b2a9e51f2c35ea58d5d2cc036c88895e34fb653e","modified":1507605308345},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1507605308346},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1507605308347},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1507605308348},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1507605308349},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1507605308089},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1507605308098},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1507605308113},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1507605308213},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1507605308220},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","hash":"f3ecbed4c05dba6a28df137e9a4e66c9ccfbd220","modified":1507605308315},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1507605308109},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1507605308095},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1507605308101},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1507605308120},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1507605308139},{"_id":"public/about/index.html","hash":"f8e311aa9572b59b19ed4b9b3bb3729743570999","modified":1507622856497},{"_id":"public/2017/10/10/DjangoRESTframework-quickstart/index.html","hash":"53e8f6a961cc8cc61a67d836194076a1068dd5b7","modified":1507622856763},{"_id":"public/2017/10/10/DjangoRESTframework-serializetion/index.html","hash":"b08f8f73cb7f48c56cea4fd7309f17dad546ab01","modified":1507622856793},{"_id":"public/2017/10/02/Django-helloworld/index.html","hash":"6e85be79dedba79deb9587ef3391c4ebaf30dbcf","modified":1507622856793},{"_id":"public/2017/10/02/Django-install/index.html","hash":"34a121837ee2ffeac27309a06acda3c66a34530f","modified":1507622856794},{"_id":"public/2017/09/19/TCP-Echo-Demo/index.html","hash":"ba33cd2452c2bf0891f001b96f0b88204ce211f3","modified":1507622856794},{"_id":"public/2017/09/28/python-note-repr/index.html","hash":"276e028178b0eee2211bd438f801eb5a21b8703b","modified":1507622856794},{"_id":"public/2017/09/09/OpenWrt-HelloWorl/index.html","hash":"e330d3b8e5e5de4d4f11e8f4822a43215a910037","modified":1507622856794},{"_id":"public/2017/09/10/PDF-watermask/index.html","hash":"841b559d1e33ed0aa28ff03e984634a9c8f934f9","modified":1507622856794},{"_id":"public/2017/06/19/ChangeUbuntuPassWd/index.html","hash":"fb3e9ae1a24a19b3464c941daebe1a135bc1c381","modified":1507622856794},{"_id":"public/2017/06/02/CompileNgrok/index.html","hash":"8ee5afeb193ed4b0cc980af38324774ce5e1a8fe","modified":1507622856794},{"_id":"public/2017/06/02/DokerStudy-install/index.html","hash":"f2bde51448bdde924d875e441a601c844d15b2b3","modified":1507622856794},{"_id":"public/2017/06/02/LoginNewTP/index.html","hash":"20894238081f1defa8388206dc19ff1750dfcb8d","modified":1507622856794},{"_id":"public/2017/10/10/DjangoRESTframework-ReqAndRes/index.html","hash":"095e6770ba65a165f6c600b2e1f3a9662fb5d720","modified":1507622856873},{"_id":"public/2017/05/31/CompileOpenJDK/index.html","hash":"7877d3b989fc7f40bf7d3d775aa83d7019cd227c","modified":1507622856876},{"_id":"public/2017/05/22/SSH-LOG-USER/index.html","hash":"b300ee306532f0c01601d00ca65c71775f59f279","modified":1507622856877},{"_id":"public/2017/05/23/Linux-File-Priveleges/index.html","hash":"026951afd6cfd545c42c79b60afdf5d0cfea24b4","modified":1507622856877},{"_id":"public/2017/05/23/Linux-Add-Swap/index.html","hash":"6c165a3748c59d57ba2bbe95e85cbcf6da68f7fa","modified":1507622856878},{"_id":"public/2017/05/17/BubbleSort/index.html","hash":"123611e80bb6a371bd5e639275203c940275f447","modified":1507622856878},{"_id":"public/2017/05/17/InsertSort/index.html","hash":"029fcb7cc21d10f7d6c8582c966a12a84d14aa0c","modified":1507622856878},{"_id":"public/2017/05/12/Decorator-Notes/index.html","hash":"404c860817f54c71a8bfc2eef5eca526e80ea652","modified":1507622856878},{"_id":"public/2017/05/12/Factory-Notes/index.html","hash":"4e7aeb7ec3a42bbc028be33563e665853034f520","modified":1507622856878},{"_id":"public/2017/03/11/MariaDB-Create-Remote/index.html","hash":"4a24da3c633c28d76867a855c4c6bf55ed323047","modified":1507622856878},{"_id":"public/2017/03/11/Centos7-lnmp/index.html","hash":"d37fb5e349cf7ef83dd923b31c897af2f7c7af15","modified":1507622856878},{"_id":"public/2016/12/16/Observer-Notes/index.html","hash":"b95254b280a86aa03f19b15674d5a64cde4eb31a","modified":1507622856878},{"_id":"public/2016/12/15/tornado-hello-world/index.html","hash":"a6e356c6877d22e79701f135448253694f3e2d21","modified":1507622856878},{"_id":"public/2016/12/15/tornado-requesthandler/index.html","hash":"3799bf0a85dc7ea4b54a8c3364d943ec11bb27ee","modified":1507622856878},{"_id":"public/2016/12/15/nginx-diable-domain/index.html","hash":"1a814e20ee2a9e31ee37a196e0bb584f8093d611","modified":1507622856878},{"_id":"public/2016/12/15/Let-s-Encrypt/index.html","hash":"1532d6e67888bec7292e9ac6630e7e37b3ea67ed","modified":1507622856878},{"_id":"public/2016/12/04/PIL-Grab/index.html","hash":"33fdb346d9f4861f6c225cac60a1399c0bfec2f8","modified":1507622856878},{"_id":"public/2016/12/04/Github-Webhook/index.html","hash":"20a65ccda6426b4fa6d324c8f2fec8bdd6dad8e1","modified":1507622856878},{"_id":"public/2016/11/30/Github-Add-SSHKEY/index.html","hash":"0be13c33d72dcf86e4dc9e272653e1051c0e0d09","modified":1507622856878},{"_id":"public/2016/11/28/Pwnable-collision/index.html","hash":"6e65b6ed7b494c23f515fdd7781b52d7be5caeeb","modified":1507622856878},{"_id":"public/2016/11/29/Learn_VIM/index.html","hash":"f8ede8887dd19e2cff776ffc2db4e7e11cabcaba","modified":1507622856878},{"_id":"public/2016/11/29/C-Helloworld/index.html","hash":"fd4e381ec23100d8e458214491d1dd6c115f1e9a","modified":1507622856878},{"_id":"public/2016/11/28/OpenWRT-BuildEnvironMent/index.html","hash":"b4047e9926af465b5b54f5bad08ec8e72f8ae761","modified":1507622856879},{"_id":"public/2016/11/27/Pwnable-fd/index.html","hash":"bbdbe780d5fe8764c480beea5d279f44a42f6aee","modified":1507622856879},{"_id":"public/2016/11/20/GDB-peda/index.html","hash":"1cd60b986688605c6142b71b5c4d8a20c9b9bc61","modified":1507622856879},{"_id":"public/2016/07/21/hello-world/index.html","hash":"23d3ed963e67d4d7233d86a74673b929ac1231f4","modified":1507622856879},{"_id":"public/2016/07/22/Learn-Markdown/index.html","hash":"839261822be66b30014b5af8e676eac89c95911c","modified":1507622856879},{"_id":"public/archives/index.html","hash":"0fc8c4ae28808d66a2cc79eb333900184c2e1436","modified":1507622856879},{"_id":"public/archives/page/2/index.html","hash":"83265de4c652f19eaf02eb4e150867e4e2e9283d","modified":1507622856879},{"_id":"public/archives/page/4/index.html","hash":"58ae2a660b0c8bdfaa78c20c81b772fedfbd9687","modified":1507622856879},{"_id":"public/archives/2016/index.html","hash":"3719291ed192b20177e525e8761b07b355e69ad2","modified":1507622856879},{"_id":"public/archives/page/3/index.html","hash":"a9b0bb364efd4fcaa28dd9a7afcb4ee482b1c1b6","modified":1507622856879},{"_id":"public/archives/2016/07/index.html","hash":"0b5c0668ec49aaf256480afae767b70ffc63cec8","modified":1507622856879},{"_id":"public/archives/2016/page/2/index.html","hash":"62ad1c124f4ca6dafc5004ecf55171121f5c8920","modified":1507622856879},{"_id":"public/archives/2016/12/index.html","hash":"ba569eca5e29a167ef757264cc2c630e260fcc12","modified":1507622856879},{"_id":"public/archives/2016/11/index.html","hash":"d221a4c7bff67e65d679bd349f5ca07e1adf3069","modified":1507622856879},{"_id":"public/archives/2017/index.html","hash":"2a761c409cb07bfbf70ae3b29c3dd69b92463a02","modified":1507622856879},{"_id":"public/archives/2017/03/index.html","hash":"27e7f83160b6d49d49ae395c781e30b85587508d","modified":1507622856880},{"_id":"public/archives/2017/page/3/index.html","hash":"367715f9846ca95bbc8719bf69ee8ed1a88c0dcd","modified":1507622856880},{"_id":"public/archives/2017/page/2/index.html","hash":"494320d5a5c990f789d51d5f07ad0f0d066f0ddb","modified":1507622856880},{"_id":"public/archives/2017/06/index.html","hash":"e7bcaa8cc544b3f72b4dcdcae4bba4ec88b09b40","modified":1507622856880},{"_id":"public/archives/2017/09/index.html","hash":"0d8180c7d10649681ed36857f9c3017296cc6bf9","modified":1507622856880},{"_id":"public/archives/2017/10/index.html","hash":"7f7afb9b155c0d7226b00e703233b9f1d9daccd6","modified":1507622856880},{"_id":"public/archives/2017/05/index.html","hash":"624112df11967069ebbf904a993a032491ce00b2","modified":1507622856880},{"_id":"public/index.html","hash":"18286677c919e72040eb3d55f26b757393f5d1b1","modified":1507622856880},{"_id":"public/page/3/index.html","hash":"cb767d4d9dc68e73308e2967d8cd85e025a88644","modified":1507622856880},{"_id":"public/page/2/index.html","hash":"a442df4bc6a226dc558fde5e2ebd1f41f41abcc0","modified":1507622856880},{"_id":"public/page/4/index.html","hash":"2280d64b5fe2fbf497becc56390c9a04bcaf4de9","modified":1507622856880},{"_id":"public/tags/C/index.html","hash":"12360b9387fea2139471719727e19c480254d09a","modified":1507622856880},{"_id":"public/tags/排序/index.html","hash":"63b418c09ea53a0bb23ac3f78af8c9bd98e152cf","modified":1507622856880},{"_id":"public/tags/冒泡排序/index.html","hash":"c553ef6d2a984244c3978e7a97323011026ed85c","modified":1507622856880},{"_id":"public/tags/Helloworld/index.html","hash":"3501fa3676a1865cf7b5c1d05b1da9dba58444a2","modified":1507622856880},{"_id":"public/tags/算法/index.html","hash":"3b0fc677aef1fcee00ca2a82d197ea13e235b09d","modified":1507622856880},{"_id":"public/tags/liux/index.html","hash":"3afc53981d059e887580fbb13200cf658cf15eda","modified":1507622856880},{"_id":"public/tags/PHP/index.html","hash":"1aec63d92962c76b5fccf6caabfb79eaf6ce112d","modified":1507622856880},{"_id":"public/tags/CentOS/index.html","hash":"e64ed606a83d67f0e59a278fed221391703918ec","modified":1507622856880},{"_id":"public/tags/Nignx/index.html","hash":"19af7dda5b76890ec68be0bb1a654ca456c493e1","modified":1507622856881},{"_id":"public/tags/MariaDB/index.html","hash":"86306cb049412cd356573ec25e59f87c2ac51972","modified":1507622856881},{"_id":"public/tags/java/index.html","hash":"1c01bf0a1c74e7d1fe725d2eb3e784a430d0c421","modified":1507622856881},{"_id":"public/tags/LNMP/index.html","hash":"075d216958df8ee2ce5e7030a9bc8154b5e0080c","modified":1507622856881},{"_id":"public/tags/设计模式/index.html","hash":"769079ac9767b607990d7187b2a4d410d3e5060e","modified":1507622856881},{"_id":"public/tags/转发/index.html","hash":"97b9e80390c4a1c66171a6812fb23aa1d9072e91","modified":1507622856881},{"_id":"public/tags/装饰者模式/index.html","hash":"4a30535c8182919dd818e145eb3b65c70c8f844e","modified":1507622856881},{"_id":"public/tags/python-web-Django/index.html","hash":"fc038cc68071bbb9dff92edd019cf3046b238088","modified":1507622856881},{"_id":"public/tags/docker/index.html","hash":"057c2b065734f4dab29d0ed21f3f927e864f53da","modified":1507622856881},{"_id":"public/tags/工厂模式/index.html","hash":"38b2abf44ae72332a7446416d9f2c0d1eb6f8446","modified":1507622856881},{"_id":"public/tags/GDB/index.html","hash":"dcf0a410edaee72c05404ab86f796795b373b331","modified":1507622856881},{"_id":"public/tags/Linux/index.html","hash":"376fc956b35a23cd1caad17e6946dc6074075412","modified":1507622856881},{"_id":"public/tags/Debugger/index.html","hash":"db78dd38d0ca1cc16fe8942a68139db213b1a70f","modified":1507622856881},{"_id":"public/tags/peda/index.html","hash":"ce7a11c22cddf9f870001e6205ba5103cc60ab05","modified":1507622856881},{"_id":"public/tags/github/index.html","hash":"9d460d427a367926105902f2a498262d43a9ff6d","modified":1507622856881},{"_id":"public/tags/ssh-key/index.html","hash":"acf6da91f0b0a0143f68436945fe8e320135eede","modified":1507622856881},{"_id":"public/tags/Github/index.html","hash":"69b15573da08709df5d5635328f7794abd03657d","modified":1507622856881},{"_id":"public/tags/插入排序/index.html","hash":"b253f99266b37b96dcb9f464a6e33161a63368cd","modified":1507622856881},{"_id":"public/tags/Webhook/index.html","hash":"b5f1aec46a1be726c4016b1bae16a55607ad1763","modified":1507622856881},{"_id":"public/tags/code-deploy/index.html","hash":"327fb3ea4054c7a4ce288fa133d72a28a4fe70ca","modified":1507622856881},{"_id":"public/tags/自动部署/index.html","hash":"3f7eb9aaaac12a548eec90220af9272a2ee6ca6b","modified":1507622856881},{"_id":"public/tags/markdown/index.html","hash":"595755ed763040165b25de4368d83c2325819c8b","modified":1507622856881},{"_id":"public/tags/入坑/index.html","hash":"17732c0420b0d8c92c5822bd0ddcf5a40c2de44d","modified":1507622856881},{"_id":"public/tags/VIM/index.html","hash":"2f6f15dd0d2b2cda768125852e30ad4ecbc16f97","modified":1507622856881},{"_id":"public/tags/Edtor/index.html","hash":"4fcdda9b4e402df56cd25b7809d84eec30777463","modified":1507622856881},{"_id":"public/tags/SWAP/index.html","hash":"696fd62b5f5a1a5aaf1993a03191806a64118252","modified":1507622856881},{"_id":"public/tags/nginx/index.html","hash":"055e1d101050a7fa8cc32feebb6db10162fcc906","modified":1507622856882},{"_id":"public/tags/https/index.html","hash":"bd77f54b6bcc10cedecd0a9518ad08e1e0c09e4f","modified":1507622856882},{"_id":"public/tags/Django-djangorestframework/index.html","hash":"d2fd362e66bfc038199caae7501ae84e9d31503a","modified":1507622856882},{"_id":"public/tags/python-djangorestframework/index.html","hash":"89e8b82fcef26f69ac4c7b658652dfa0bac795a5","modified":1507622856882},{"_id":"public/tags/文件权限/index.html","hash":"c41518e79b597e114eade9c39cf25813439b6097","modified":1507622856882},{"_id":"public/tags/学习笔记/index.html","hash":"d58d4c0aba12a61abe8145c9b28427e5a1520c8a","modified":1507622856882},{"_id":"public/tags/router/index.html","hash":"dfc050c89646afa9082eb81cac49bda3216d25e3","modified":1507622856882},{"_id":"public/tags/New-DB/index.html","hash":"2e730ce78f5f1ea8e6c8ed3f303cf925e5592244","modified":1507622856882},{"_id":"public/tags/观察者模式/index.html","hash":"71577a58af47969f1cdd645274f2a3cacf35a1f4","modified":1507622856882},{"_id":"public/tags/Remote/index.html","hash":"1c8a97350ee350014902d23abaf4d2f65ed916b1","modified":1507622856882},{"_id":"public/tags/openwrt/index.html","hash":"5021b74ea1a08788f77789148b525526ab0c275a","modified":1507622856882},{"_id":"public/tags/OpenWrt/index.html","hash":"59b1b52bd7d48f46ccf9e7cf81550db671ea8733","modified":1507622856882},{"_id":"public/tags/PWN/index.html","hash":"0d850260ba003a0595a26d8ba7bb99e947c676cc","modified":1507622856882},{"_id":"public/tags/enviroment/index.html","hash":"cecc379280bb936a3d643a36a73c428d884550fd","modified":1507622856882},{"_id":"public/tags/CTF/index.html","hash":"7cbd670dc9d9005b0770cbafe72f73a88e06789a","modified":1507622856887},{"_id":"public/tags/pwnable/index.html","hash":"53141ae9c364d037a3c795b89917f286052de882","modified":1507622856887},{"_id":"public/tags/ssh/index.html","hash":"eaead2ec68a8a02c8874941441090f4de03ede78","modified":1507622856887},{"_id":"public/tags/记录/index.html","hash":"9ee7ac05183945e08499bb2605160efa4fe76fea","modified":1507622856887},{"_id":"public/tags/暴力破解/index.html","hash":"d93583b7b802f1d6ff0dccf79c7e37bfae82d293","modified":1507622856887},{"_id":"public/tags/C-pdf/index.html","hash":"e42726bbf911ec6e086e1ede129a1a4d40f32c3a","modified":1507622856887},{"_id":"public/tags/python/index.html","hash":"ddbed88603cf9494c9a9327cb123e4e546479669","modified":1507622856887},{"_id":"public/tags/PIL/index.html","hash":"ebd0c046cafa55207e2ab8d902c1d83a35c5b728","modified":1507622856887},{"_id":"public/tags/domain/index.html","hash":"d28053fe734e0b22ae89905da2f329e968037854","modified":1507622856887},{"_id":"public/tags/hello-hexo/index.html","hash":"04904e9fd06f7ba1e82a5dcd2cadcecba6277a20","modified":1507622856887},{"_id":"public/tags/python-note/index.html","hash":"b2954596f9fe686d82a2b2f23cd6654ebc697dee","modified":1507622856887},{"_id":"public/tags/tcp-program/index.html","hash":"57b0ca560a9417862ff2319a58e839696e885109","modified":1507622856887},{"_id":"public/tags/tornado/index.html","hash":"3b6b0fa3e4143b3ac186829acfa23982c7070be5","modified":1507622856887},{"_id":"public/tags/web/index.html","hash":"1e1cdbe561f16976557d2d8d2aa81818413b9498","modified":1507622856888},{"_id":"public/categories/Program/index.html","hash":"7eecef0aef49d1a489b9136f9a1f80d179d2e43b","modified":1507622856888},{"_id":"public/categories/Program/page/2/index.html","hash":"6aee14d286901b9a03665fc696a68600f5690ddb","modified":1507622856888},{"_id":"public/categories/Linux/index.html","hash":"e6d2c6712ad813eab71cd35ff1c7c3082c6c64d8","modified":1507622856888},{"_id":"public/categories/Linux/page/2/index.html","hash":"a23af57ae76ed7ba5e1a18601511d4b3f520ef56","modified":1507622856888},{"_id":"public/categories/CTF/index.html","hash":"aef8d51717f88ac6d5781abbeb062256e33a2648","modified":1507622856888},{"_id":"public/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507622856888},{"_id":"public/tags/djangorestframework/index.html","hash":"e35a313814620a4eae087c271f1d9e94b39bdf59","modified":1507622856901},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1507622856901},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1507622856901},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1507622856901},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1507622856901},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1507622856901},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1507622856901},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1507622856902},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1507622856902},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1507622856902},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1507622856902},{"_id":"public/img/favicon.pngg","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1507622856902},{"_id":"public/img/favicon.ico","hash":"48d9661f11688d84618da35409f6cbf3a0ac0507","modified":1507622856902},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1507622856902},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1507622856902},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1507622856902},{"_id":"public/img/favicon.png","hash":"33da7602134e0ec3c9eb08eb1478e2893f48a6ed","modified":1507622856902},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1507622856902},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1507622856902},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1507622856902},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1507622856903},{"_id":"public/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1507622856903},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1507622856903},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1507622856903},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1507622856903},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1507622856903},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1507622856903},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1507622856903},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1507622856903},{"_id":"public/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1507622856903},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1507622856903},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1507622856903},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1507622856903},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1507622856903},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1507622856903},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1507622856903},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1507622856903},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1507622856903},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1507622856903},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1507622856904},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1507622856904},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1507622856904},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1507622856904},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1507622856904},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1507622856904},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1507622856904},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1507622856904},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1507622856904},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1507622856904},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1507622856904},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1507622856904},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1507622856904},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1507622856904},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1507622856904},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1507622856904},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1507622856904},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1507622856904},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1507622856904},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1507622856904},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1507622856904},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1507622856904},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1507622856904},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1507622856904},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1507622856905},{"_id":"public/background/bg-4.jpg","hash":"7ef559423622f8959cce79274bdf782d92a6e867","modified":1507622860111},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1507622860125},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1507622860138},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1507622860138},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1507622860138},{"_id":"public/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1507622860149},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1507622860149},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1507622860149},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1507622860149},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1507622860149},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1507622860149},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1507622860149},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1507622860149},{"_id":"public/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1507622860150},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1507622860150},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1507622860150},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1507622860150},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1507622860150},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1507622860150},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1507622860150},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1507622860150},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1507622860150},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1507622860150},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1507622860150},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1507622860150},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1507622860150},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1507622860150},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1507622860150},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1507622860150},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1507622860150},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1507622860150},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1507622860150},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1507622860150},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1507622860150},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1507622860150},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1507622860150},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1507622860151},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1507622860151},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1507622860151},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1507622860151},{"_id":"public/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1507622860151},{"_id":"public/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1507622860151},{"_id":"public/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1507622860151},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507622860151},{"_id":"public/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1507622860151},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1507622860151},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1507622860151},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1507622860151},{"_id":"public/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1507622860151},{"_id":"public/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1507622860151},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1507622860151},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1507622860151},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1507622860151},{"_id":"public/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1507622860151},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1507622860151},{"_id":"public/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1507622860151},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1507622860151},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1507622860151},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1507622860151},{"_id":"public/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1507622860151},{"_id":"public/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1507622860152},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1507622860152},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1507622860152},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1507622860152},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1507622860152},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1507622860152},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1507622860152},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1507622860152},{"_id":"public/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1507622860152},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1507622860152},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1507622860152},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1507622860152},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1507622860153},{"_id":"public/css/style.css","hash":"073525e68a984a438a15d60efbeba4a76f57176a","modified":1507622860153},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1507622860153},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1507622860153},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1507622860153},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1507622860153},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1507622860153},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1507622860153},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1507622860153},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1507622860153},{"_id":"public/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1507622860153},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1507622860153},{"_id":"public/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1507622860154},{"_id":"public/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1507622860154},{"_id":"public/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1507622860154},{"_id":"public/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1507622860154},{"_id":"public/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1507622860154},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1507622860154},{"_id":"public/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1507622860154},{"_id":"public/img/head.jpg","hash":"07047af83673946967a0f46e5586c5470c2df952","modified":1507622860154},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1507622860154},{"_id":"public/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1507622860168},{"_id":"public/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1507622860170},{"_id":"public/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1507622860174},{"_id":"public/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1507622860194},{"_id":"public/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1507622860194},{"_id":"public/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1507622860229},{"_id":"public/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1507622860229},{"_id":"public/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1507622860229},{"_id":"public/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1507622860231},{"_id":"public/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1507622860231},{"_id":"public/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1507622860232},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1507622860232},{"_id":"public/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1507622860236},{"_id":"public/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1507622860236},{"_id":"public/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1507622860237},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1507622860238},{"_id":"public/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1507622860249},{"_id":"public/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1507622860249},{"_id":"public/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1507622860250},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1507622860256},{"_id":"public/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1507622860260}],"Category":[{"name":"Program","_id":"cj8lbpzcq0003gov5hoxzveyx"},{"name":"Linux","_id":"cj8lbpzec000cgov53a6y403l"},{"name":"CTF","_id":"cj8lbpzjj0036gov5a1aosx2w"}],"Data":[],"Page":[{"title":"About","date":"2016-07-30T11:10:59.000Z","tags":["我是谁","从哪来","到哪去"],"_content":"About me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-07-30 19:10:59\ntags:\n- 我是谁\n- 从哪来\n- 到哪去\n---\nAbout me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","updated":"2017-10-10T03:15:08.016Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj8lbpzfz001fgov5y2i2282w","content":"<p>About me:<br><figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n","excerpt":"","more":"<p>About me:<br><figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n"}],"Post":[{"title":"Program HelloWorld","date":"2016-11-29T11:12:27.000Z","_content":"\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","source":"_posts/C-Helloworld.md","raw":"---\ntitle: Program HelloWorld\ndate: 2016-11-29 19:12:27\ncategories: Program\ntags:\n- C\n- Helloworld\n---\n\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","slug":"C-Helloworld","published":1,"updated":"2017-10-10T03:15:07.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzc70000gov57794ixxv","content":"<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>\n","excerpt":"<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>"},{"title":"常见排序算法之冒泡排序","date":"2017-05-17T15:54:44.000Z","_content":"\n冒泡排序，这个就不多说了吧。show me the code!\n\n```python\n# -*- coding:utf-8 -*-\n\nA = [3,7,5,2,9,0,1]\n\ndef bubble_sort(Array_A):\n    for i in range(0,len(Array_A)-1):\n        for j in range(len(Array_A)-i-1):\n            if Array_A[j] > Array_A[j+1]:\n                Array_A[j],Array_A[j+1] = Array_A[j+1],Array_A[j]\nbubble_sort(A)\nprint A\n```\n\n<!-- more -->\n\n### 冒泡排序的原理\n\n每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)\n\n### 冒泡排序的缺点\n\n效率特别低，时间复杂度O(n2)\n\n### 冒泡排序的算法稳定性\n\n冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。\n\n","source":"_posts/BubbleSort.md","raw":"---\ntitle: 常见排序算法之冒泡排序\ncategories:\n-  Program\ntags:\n- 排序\n- 冒泡排序\n- 算法\ndate: 2017-05-17 23:54:44\n---\n\n冒泡排序，这个就不多说了吧。show me the code!\n\n```python\n# -*- coding:utf-8 -*-\n\nA = [3,7,5,2,9,0,1]\n\ndef bubble_sort(Array_A):\n    for i in range(0,len(Array_A)-1):\n        for j in range(len(Array_A)-i-1):\n            if Array_A[j] > Array_A[j+1]:\n                Array_A[j],Array_A[j+1] = Array_A[j+1],Array_A[j]\nbubble_sort(A)\nprint A\n```\n\n<!-- more -->\n\n### 冒泡排序的原理\n\n每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)\n\n### 冒泡排序的缺点\n\n效率特别低，时间复杂度O(n2)\n\n### 冒泡排序的算法稳定性\n\n冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。\n\n","slug":"BubbleSort","published":1,"updated":"2017-10-10T03:15:07.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzck0001gov5722kxhjk","content":"<p>冒泡排序，这个就不多说了吧。show me the code!</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">A = [<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(Array_A)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(Array_A)<span class=\"number\">-1</span>):</div><div class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(Array_A)-i<span class=\"number\">-1</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> Array_A[j] &gt; Array_A[j+<span class=\"number\">1</span>]:</div><div class=\"line\">                Array_A[j],Array_A[j+<span class=\"number\">1</span>] = Array_A[j+<span class=\"number\">1</span>],Array_A[j]</div><div class=\"line\">bubble_sort(A)</div><div class=\"line\"><span class=\"keyword\">print</span> A</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"冒泡排序的原理\"><a href=\"#冒泡排序的原理\" class=\"headerlink\" title=\"冒泡排序的原理\"></a>冒泡排序的原理</h3><p>每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)</p>\n<h3 id=\"冒泡排序的缺点\"><a href=\"#冒泡排序的缺点\" class=\"headerlink\" title=\"冒泡排序的缺点\"></a>冒泡排序的缺点</h3><p>效率特别低，时间复杂度O(n2)</p>\n<h3 id=\"冒泡排序的算法稳定性\"><a href=\"#冒泡排序的算法稳定性\" class=\"headerlink\" title=\"冒泡排序的算法稳定性\"></a>冒泡排序的算法稳定性</h3><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>\n","excerpt":"<p>冒泡排序，这个就不多说了吧。show me the code!</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">A = [<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(Array_A)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,len(Array_A)<span class=\"number\">-1</span>):</div><div class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(len(Array_A)-i<span class=\"number\">-1</span>):</div><div class=\"line\">            <span class=\"keyword\">if</span> Array_A[j] &gt; Array_A[j+<span class=\"number\">1</span>]:</div><div class=\"line\">                Array_A[j],Array_A[j+<span class=\"number\">1</span>] = Array_A[j+<span class=\"number\">1</span>],Array_A[j]</div><div class=\"line\">bubble_sort(A)</div><div class=\"line\"><span class=\"keyword\">print</span> A</div></pre></td></tr></table></figure>","more":"<h3 id=\"冒泡排序的原理\"><a href=\"#冒泡排序的原理\" class=\"headerlink\" title=\"冒泡排序的原理\"></a>冒泡排序的原理</h3><p>每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)</p>\n<h3 id=\"冒泡排序的缺点\"><a href=\"#冒泡排序的缺点\" class=\"headerlink\" title=\"冒泡排序的缺点\"></a>冒泡排序的缺点</h3><p>效率特别低，时间复杂度O(n2)</p>\n<h3 id=\"冒泡排序的算法稳定性\"><a href=\"#冒泡排序的算法稳定性\" class=\"headerlink\" title=\"冒泡排序的算法稳定性\"></a>冒泡排序的算法稳定性</h3><p>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。</p>"},{"title":"忘记Ubuntu用户密码，怎么办?","date":"2017-06-19T12:13:50.000Z","_content":"\n在使用Linux系统的时候，有时候难免会忘掉登录的用户名和密码，这个时候该怎么办呢？<!--more-->\n\n#### 开机，在grub启动菜单选择\"ubuntu 高级选项\"\n\n![image](/blogimg/grub_advance.png)\n\n#### 选择恢复模式，按e，进入编辑模式\n\n![image](/blogimg/grub_recovery.png)\n\n找到第一个内核参数配置的地方，把“ro recovery nomodeset”替换为“quiet splash rw init=/bin/bash”，如下图所示：\n\n![image](/blogimg/grub_kernel_param.png)\n\n改好参数后，F10保存，系统会重新启动。\n\n#### 重启后，命令行更改用户密码\n\n![image](/blogimg/grub_reboot.png)\n\n重启后，已经得到一个root权限的shell，可以查看当前的用户。现在就可以用\n\n```bash\nroot@(none)/# passwd root\n```\n\n更改root用户的密码了。\n\n","source":"_posts/ChangeUbuntuPassWd.md","raw":"---\ntitle: 忘记Ubuntu用户密码，怎么办?\ncategories:\n  - Linux\ntags:\n  - liux\ndate: 2017-06-19 20:13:50\n---\n\n在使用Linux系统的时候，有时候难免会忘掉登录的用户名和密码，这个时候该怎么办呢？<!--more-->\n\n#### 开机，在grub启动菜单选择\"ubuntu 高级选项\"\n\n![image](/blogimg/grub_advance.png)\n\n#### 选择恢复模式，按e，进入编辑模式\n\n![image](/blogimg/grub_recovery.png)\n\n找到第一个内核参数配置的地方，把“ro recovery nomodeset”替换为“quiet splash rw init=/bin/bash”，如下图所示：\n\n![image](/blogimg/grub_kernel_param.png)\n\n改好参数后，F10保存，系统会重新启动。\n\n#### 重启后，命令行更改用户密码\n\n![image](/blogimg/grub_reboot.png)\n\n重启后，已经得到一个root权限的shell，可以查看当前的用户。现在就可以用\n\n```bash\nroot@(none)/# passwd root\n```\n\n更改root用户的密码了。\n\n","slug":"ChangeUbuntuPassWd","published":1,"updated":"2017-10-10T03:15:07.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzcr0004gov5esr1rh25","content":"<p>在使用Linux系统的时候，有时候难免会忘掉登录的用户名和密码，这个时候该怎么办呢？<a id=\"more\"></a></p>\n<h4 id=\"开机，在grub启动菜单选择”ubuntu-高级选项”\"><a href=\"#开机，在grub启动菜单选择”ubuntu-高级选项”\" class=\"headerlink\" title=\"开机，在grub启动菜单选择”ubuntu 高级选项”\"></a>开机，在grub启动菜单选择”ubuntu 高级选项”</h4><p><img src=\"/blogimg/grub_advance.png\" alt=\"image\"></p>\n<h4 id=\"选择恢复模式，按e，进入编辑模式\"><a href=\"#选择恢复模式，按e，进入编辑模式\" class=\"headerlink\" title=\"选择恢复模式，按e，进入编辑模式\"></a>选择恢复模式，按e，进入编辑模式</h4><p><img src=\"/blogimg/grub_recovery.png\" alt=\"image\"></p>\n<p>找到第一个内核参数配置的地方，把“ro recovery nomodeset”替换为“quiet splash rw init=/bin/bash”，如下图所示：</p>\n<p><img src=\"/blogimg/grub_kernel_param.png\" alt=\"image\"></p>\n<p>改好参数后，F10保存，系统会重新启动。</p>\n<h4 id=\"重启后，命令行更改用户密码\"><a href=\"#重启后，命令行更改用户密码\" class=\"headerlink\" title=\"重启后，命令行更改用户密码\"></a>重启后，命令行更改用户密码</h4><p><img src=\"/blogimg/grub_reboot.png\" alt=\"image\"></p>\n<p>重启后，已经得到一个root权限的shell，可以查看当前的用户。现在就可以用</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@(none)/<span class=\"comment\"># passwd root</span></div></pre></td></tr></table></figure>\n<p>更改root用户的密码了。</p>\n","excerpt":"<p>在使用Linux系统的时候，有时候难免会忘掉登录的用户名和密码，这个时候该怎么办呢？","more":"</p>\n<h4 id=\"开机，在grub启动菜单选择”ubuntu-高级选项”\"><a href=\"#开机，在grub启动菜单选择”ubuntu-高级选项”\" class=\"headerlink\" title=\"开机，在grub启动菜单选择”ubuntu 高级选项”\"></a>开机，在grub启动菜单选择”ubuntu 高级选项”</h4><p><img src=\"/blogimg/grub_advance.png\" alt=\"image\"></p>\n<h4 id=\"选择恢复模式，按e，进入编辑模式\"><a href=\"#选择恢复模式，按e，进入编辑模式\" class=\"headerlink\" title=\"选择恢复模式，按e，进入编辑模式\"></a>选择恢复模式，按e，进入编辑模式</h4><p><img src=\"/blogimg/grub_recovery.png\" alt=\"image\"></p>\n<p>找到第一个内核参数配置的地方，把“ro recovery nomodeset”替换为“quiet splash rw init=/bin/bash”，如下图所示：</p>\n<p><img src=\"/blogimg/grub_kernel_param.png\" alt=\"image\"></p>\n<p>改好参数后，F10保存，系统会重新启动。</p>\n<h4 id=\"重启后，命令行更改用户密码\"><a href=\"#重启后，命令行更改用户密码\" class=\"headerlink\" title=\"重启后，命令行更改用户密码\"></a>重启后，命令行更改用户密码</h4><p><img src=\"/blogimg/grub_reboot.png\" alt=\"image\"></p>\n<p>重启后，已经得到一个root权限的shell，可以查看当前的用户。现在就可以用</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@(none)/<span class=\"comment\"># passwd root</span></div></pre></td></tr></table></figure>\n<p>更改root用户的密码了。</p>"},{"title":"CentOS 7.2 搭建lnmp环境","date":"2017-03-11T03:08:20.000Z","_content":"\n### Centos7 安装php7\n由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.\n#### 首先rpm安装php7.0的yum源\n```bash\n[root@vultr ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n```\n<!-- more -->\n#### yum安装php7\n```bash\n[root@vultr ~]# yum install php70w\n```\n### yum安装php-fpm\n```bash\n[root@vultr ~]# yum install php70w-fpm\n```\n####  查看php版本\n```bash\n[root@vultr ~]# php -v\nPHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n```\n\n### 安装MariaDB\n\n```bash\n[root@vultr ~]# yum install mariadb-server mariadb\n```\n启动MariaDB\n\n```bash\n[root@vultr ~]# systemctl start mariadb\n```\n刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。\n\n```bash\n[root@vultr ~]# mysql_secure_installation \n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] Y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] Y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] Y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] Y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。\n\n### Nginx+php-fpm，让Nginx能够解析php请求\n\n在安装好Nginx和php-fpm之后，需要配置一下Nginx。\n```\nserver {\n\n\t\tlisten 80;\n\t\tserver_name www.xxx.com;\n\t\t\n\t\troot /var/www/html;\n\t\tindex index.html index.htm index.php;\n\t\t\n\t\tlocation ~ \\.php$ {\n\t\t\t\n\t\t\tinclude fastcgi_params;\n\t\t\tfastcgi_pass 127.0.0.1:9000;\n\t\t\tfastcgi_index index.php;\n\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t\t\n\t\t}\n\n\t}\n```\n\n开启php-fpm\n```bash\n[root@vultr lgsmb]# systemctl start php-fpm\n```\n在web根目录写个phpinfo\n```php\n<?php\n\tphpinfo();\n?>\n```\n访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。\n","source":"_posts/Centos7-lnmp.md","raw":"---\ntitle: CentOS 7.2 搭建lnmp环境\ndate: 2017.3.11 11:08:20\ncategories: Linux\ntags:\n- CentOS\n- PHP\n- Nignx\n- MariaDB\n- LNMP\n---\n\n### Centos7 安装php7\n由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.\n#### 首先rpm安装php7.0的yum源\n```bash\n[root@vultr ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n```\n<!-- more -->\n#### yum安装php7\n```bash\n[root@vultr ~]# yum install php70w\n```\n### yum安装php-fpm\n```bash\n[root@vultr ~]# yum install php70w-fpm\n```\n####  查看php版本\n```bash\n[root@vultr ~]# php -v\nPHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n```\n\n### 安装MariaDB\n\n```bash\n[root@vultr ~]# yum install mariadb-server mariadb\n```\n启动MariaDB\n\n```bash\n[root@vultr ~]# systemctl start mariadb\n```\n刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。\n\n```bash\n[root@vultr ~]# mysql_secure_installation \n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] Y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] Y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] Y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] Y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。\n\n### Nginx+php-fpm，让Nginx能够解析php请求\n\n在安装好Nginx和php-fpm之后，需要配置一下Nginx。\n```\nserver {\n\n\t\tlisten 80;\n\t\tserver_name www.xxx.com;\n\t\t\n\t\troot /var/www/html;\n\t\tindex index.html index.htm index.php;\n\t\t\n\t\tlocation ~ \\.php$ {\n\t\t\t\n\t\t\tinclude fastcgi_params;\n\t\t\tfastcgi_pass 127.0.0.1:9000;\n\t\t\tfastcgi_index index.php;\n\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t\t\n\t\t}\n\n\t}\n```\n\n开启php-fpm\n```bash\n[root@vultr lgsmb]# systemctl start php-fpm\n```\n在web根目录写个phpinfo\n```php\n<?php\n\tphpinfo();\n?>\n```\n访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。\n","slug":"Centos7-lnmp","published":1,"updated":"2017-10-10T03:15:07.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzdj0005gov5luk7i86j","content":"<h3 id=\"Centos7-安装php7\"><a href=\"#Centos7-安装php7\" class=\"headerlink\" title=\"Centos7 安装php7\"></a>Centos7 安装php7</h3><p>由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.</p>\n<h4 id=\"首先rpm安装php7-0的yum源\"><a href=\"#首先rpm安装php7-0的yum源\" class=\"headerlink\" title=\"首先rpm安装php7.0的yum源\"></a>首先rpm安装php7.0的yum源</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"yum安装php7\"><a href=\"#yum安装php7\" class=\"headerlink\" title=\"yum安装php7\"></a>yum安装php7</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w</span></div></pre></td></tr></table></figure>\n<h3 id=\"yum安装php-fpm\"><a href=\"#yum安装php-fpm\" class=\"headerlink\" title=\"yum安装php-fpm\"></a>yum安装php-fpm</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w-fpm</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php版本\"><a href=\"#查看php版本\" class=\"headerlink\" title=\"查看php版本\"></a>查看php版本</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># php -v</span></div><div class=\"line\">PHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2017 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div></pre></td></tr></table></figure>\n<h3 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install mariadb-server mariadb</span></div></pre></td></tr></table></figure>\n<p>启动MariaDB</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># systemctl start mariadb</span></div></pre></td></tr></table></figure>\n<p>刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</span></div><div class=\"line\">password for the root user.  If you've just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</span></div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user 'root<span class=\"string\">'@'</span>localhost<span class=\"string\">' (using password: YES)</span></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] Y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from 'localhost<span class=\"string\">'.  This</span></div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named '<span class=\"built_in\">test</span><span class=\"string\">' that anyone can</span></div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] Y</div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you've completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks <span class=\"keyword\">for</span> using MariaDB!</div></pre></td></tr></table></figure>\n<p>根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。</p>\n<h3 id=\"Nginx-php-fpm，让Nginx能够解析php请求\"><a href=\"#Nginx-php-fpm，让Nginx能够解析php请求\" class=\"headerlink\" title=\"Nginx+php-fpm，让Nginx能够解析php请求\"></a>Nginx+php-fpm，让Nginx能够解析php请求</h3><p>在安装好Nginx和php-fpm之后，需要配置一下Nginx。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tlisten 80;</div><div class=\"line\">\t\tserver_name www.xxx.com;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot /var/www/html;</div><div class=\"line\">\t\tindex index.html index.htm index.php;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlocation ~ \\.php$ &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tinclude fastcgi_params;</div><div class=\"line\">\t\t\tfastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">\t\t\tfastcgi_index index.php;</div><div class=\"line\">\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr lgsmb]<span class=\"comment\"># systemctl start php-fpm</span></div></pre></td></tr></table></figure></p>\n<p>在web根目录写个phpinfo<br><figure class=\"highlight php\" data-lang=\" php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\tphpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。</p>\n","excerpt":"<h3 id=\"Centos7-安装php7\"><a href=\"#Centos7-安装php7\" class=\"headerlink\" title=\"Centos7 安装php7\"></a>Centos7 安装php7</h3><p>由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.</p>\n<h4 id=\"首先rpm安装php7-0的yum源\"><a href=\"#首先rpm安装php7-0的yum源\" class=\"headerlink\" title=\"首先rpm安装php7.0的yum源\"></a>首先rpm安装php7.0的yum源</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></div></pre></td></tr></table></figure>","more":"<h4 id=\"yum安装php7\"><a href=\"#yum安装php7\" class=\"headerlink\" title=\"yum安装php7\"></a>yum安装php7</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w</span></div></pre></td></tr></table></figure>\n<h3 id=\"yum安装php-fpm\"><a href=\"#yum安装php-fpm\" class=\"headerlink\" title=\"yum安装php-fpm\"></a>yum安装php-fpm</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w-fpm</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php版本\"><a href=\"#查看php版本\" class=\"headerlink\" title=\"查看php版本\"></a>查看php版本</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># php -v</span></div><div class=\"line\">PHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2017 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div></pre></td></tr></table></figure>\n<h3 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install mariadb-server mariadb</span></div></pre></td></tr></table></figure>\n<p>启动MariaDB</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># systemctl start mariadb</span></div></pre></td></tr></table></figure>\n<p>刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</div><div class=\"line\">password for the root user.  If you'</span>ve just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user '</span>root<span class=\"string\">'@'</span>localhost<span class=\"string\">' (using password: YES)</div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] Y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from '</span>localhost<span class=\"string\">'.  This</div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named '</span><span class=\"built_in\">test</span><span class=\"string\">' that anyone can</div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] Y</div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you'</span>ve completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks <span class=\"keyword\">for</span> using MariaDB!</div></pre></td></tr></table></figure>\n<p>根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。</p>\n<h3 id=\"Nginx-php-fpm，让Nginx能够解析php请求\"><a href=\"#Nginx-php-fpm，让Nginx能够解析php请求\" class=\"headerlink\" title=\"Nginx+php-fpm，让Nginx能够解析php请求\"></a>Nginx+php-fpm，让Nginx能够解析php请求</h3><p>在安装好Nginx和php-fpm之后，需要配置一下Nginx。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tlisten 80;</div><div class=\"line\">\t\tserver_name www.xxx.com;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot /var/www/html;</div><div class=\"line\">\t\tindex index.html index.htm index.php;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlocation ~ \\.php$ &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tinclude fastcgi_params;</div><div class=\"line\">\t\t\tfastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">\t\t\tfastcgi_index index.php;</div><div class=\"line\">\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr lgsmb]<span class=\"comment\"># systemctl start php-fpm</span></div></pre></td></tr></table></figure></p>\n<p>在web根目录写个phpinfo<br><figure class=\"highlight php\"data-lang=\" php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\tphpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。</p>"},{"title":"设计模式学习之装饰者模式","date":"2017-05-11T18:16:06.000Z","_content":"\n这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。  \n这次继续设计模式的学习--------装饰者模式  \n<!-- more --> \n\n其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：\n\n```java\nBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.txt\")));\n```\n\n其中stream就经过了stream->streamreader->bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。\n\n### 装饰者模式要解决的问题\n\n通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。\n\n### 装饰者模式的定义\n\n装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则------对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。\n\n### 代码实例（摘自HeadFirst设计模式上的例子）\n\n```java\n//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口\npublic abstract class Beverage{\n  String description = \"Unknown Beverage\";\n  \n  public String getDescription(){\n    return description;\n  }\n  \n  public abstract double cost();\n  \n}\n```\n\n\n\n```java\n//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性\npublic abstract class CondimentDecorator extends Beverage{\n  \n  public abstract String getDescription();\n}\n```\n\n```java\n//定义一个被装饰对象，这里的description是从父类继承得到的\npublic class Espresso extends Beverage{\n  \n  public Espresso(){\n    \n    description = \"Espresso\";\n  }\n  \n  public double cost(){\n    \n    return 1.99;\n  }\n}\n```\n\n```java\n//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格\npublic class Mocha extends CondimentDecorator{\n  \n  Beverage beverage;\n  \n  public Mocha(Beverage beverage){\n    this.beverage = beverage;\n  }\n  \n  public String getDescription(){\n    return beverage.getDescription() + \", Mocha\";\n  }\n  \n  public double cost(){\n    \n    return .20 + beverage.cost();\n  }\n  \n}\n```\n\n```java\n//代码测试\npublic class DecoratorTest{\n  \n  public static void main(String[] args){\n    \n    \tBdverage beverage = new Espresso();\n    \tbeverage = new Mocha(beverage);\n    \tSystem.out.println(\"The coffee is\"+mocha.getDescription()+\" ,The price is \"+mocha.cost());\n  }\n}\n```\n\n我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。\n\n利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。","source":"_posts/Decorator-Notes.md","raw":"---\ntitle: 设计模式学习之装饰者模式\ndate: 2017-5-12 2:16:06\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 装饰者模式\n---\n\n这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。  \n这次继续设计模式的学习--------装饰者模式  \n<!-- more --> \n\n其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：\n\n```java\nBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.txt\")));\n```\n\n其中stream就经过了stream->streamreader->bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。\n\n### 装饰者模式要解决的问题\n\n通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。\n\n### 装饰者模式的定义\n\n装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则------对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。\n\n### 代码实例（摘自HeadFirst设计模式上的例子）\n\n```java\n//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口\npublic abstract class Beverage{\n  String description = \"Unknown Beverage\";\n  \n  public String getDescription(){\n    return description;\n  }\n  \n  public abstract double cost();\n  \n}\n```\n\n\n\n```java\n//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性\npublic abstract class CondimentDecorator extends Beverage{\n  \n  public abstract String getDescription();\n}\n```\n\n```java\n//定义一个被装饰对象，这里的description是从父类继承得到的\npublic class Espresso extends Beverage{\n  \n  public Espresso(){\n    \n    description = \"Espresso\";\n  }\n  \n  public double cost(){\n    \n    return 1.99;\n  }\n}\n```\n\n```java\n//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格\npublic class Mocha extends CondimentDecorator{\n  \n  Beverage beverage;\n  \n  public Mocha(Beverage beverage){\n    this.beverage = beverage;\n  }\n  \n  public String getDescription(){\n    return beverage.getDescription() + \", Mocha\";\n  }\n  \n  public double cost(){\n    \n    return .20 + beverage.cost();\n  }\n  \n}\n```\n\n```java\n//代码测试\npublic class DecoratorTest{\n  \n  public static void main(String[] args){\n    \n    \tBdverage beverage = new Espresso();\n    \tbeverage = new Mocha(beverage);\n    \tSystem.out.println(\"The coffee is\"+mocha.getDescription()+\" ,The price is \"+mocha.cost());\n  }\n}\n```\n\n我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。\n\n利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。","slug":"Decorator-Notes","published":1,"updated":"2017-10-10T03:15:07.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzdv0007gov5be2q97la","content":"<p>这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。<br>这次继续设计模式的学习——–装饰者模式<br><a id=\"more\"></a> </p>\n<p>其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>)));</div></pre></td></tr></table></figure>\n<p>其中stream就经过了stream-&gt;streamreader-&gt;bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。</p>\n<h3 id=\"装饰者模式要解决的问题\"><a href=\"#装饰者模式要解决的问题\" class=\"headerlink\" title=\"装饰者模式要解决的问题\"></a>装饰者模式要解决的问题</h3><p>通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。</p>\n<h3 id=\"装饰者模式的定义\"><a href=\"#装饰者模式的定义\" class=\"headerlink\" title=\"装饰者模式的定义\"></a>装饰者模式的定义</h3><p>装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则——对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。</p>\n<h3 id=\"代码实例（摘自HeadFirst设计模式上的例子）\"><a href=\"#代码实例（摘自HeadFirst设计模式上的例子）\" class=\"headerlink\" title=\"代码实例（摘自HeadFirst设计模式上的例子）\"></a>代码实例（摘自HeadFirst设计模式上的例子）</h3><figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  String description = <span class=\"string\">\"Unknown Beverage\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> description;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个被装饰对象，这里的description是从父类继承得到的</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    description = <span class=\"string\">\"Espresso\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title\">CondimentDecorator</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  Beverage beverage;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.beverage = beverage;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">\", Mocha\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> .<span class=\"number\">20</span> + beverage.cost();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//代码测试</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    \tBdverage beverage = <span class=\"keyword\">new</span> Espresso();</div><div class=\"line\">    \tbeverage = <span class=\"keyword\">new</span> Mocha(beverage);</div><div class=\"line\">    \tSystem.out.println(<span class=\"string\">\"The coffee is\"</span>+mocha.getDescription()+<span class=\"string\">\" ,The price is \"</span>+mocha.cost());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。</p>\n<p>利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。</p>\n","excerpt":"<p>这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。<br>这次继续设计模式的学习——–装饰者模式<br>","more":"</p>\n<p>其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>)));</div></pre></td></tr></table></figure>\n<p>其中stream就经过了stream-&gt;streamreader-&gt;bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。</p>\n<h3 id=\"装饰者模式要解决的问题\"><a href=\"#装饰者模式要解决的问题\" class=\"headerlink\" title=\"装饰者模式要解决的问题\"></a>装饰者模式要解决的问题</h3><p>通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。</p>\n<h3 id=\"装饰者模式的定义\"><a href=\"#装饰者模式的定义\" class=\"headerlink\" title=\"装饰者模式的定义\"></a>装饰者模式的定义</h3><p>装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则——对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。</p>\n<h3 id=\"代码实例（摘自HeadFirst设计模式上的例子）\"><a href=\"#代码实例（摘自HeadFirst设计模式上的例子）\" class=\"headerlink\" title=\"代码实例（摘自HeadFirst设计模式上的例子）\"></a>代码实例（摘自HeadFirst设计模式上的例子）</h3><figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  String description = <span class=\"string\">\"Unknown Beverage\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> description;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个被装饰对象，这里的description是从父类继承得到的</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    description = <span class=\"string\">\"Espresso\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title\">CondimentDecorator</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  Beverage beverage;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.beverage = beverage;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">\", Mocha\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> .<span class=\"number\">20</span> + beverage.cost();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//代码测试</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    \tBdverage beverage = <span class=\"keyword\">new</span> Espresso();</div><div class=\"line\">    \tbeverage = <span class=\"keyword\">new</span> Mocha(beverage);</div><div class=\"line\">    \tSystem.out.println(<span class=\"string\">\"The coffee is\"</span>+mocha.getDescription()+<span class=\"string\">\" ,The price is \"</span>+mocha.cost());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。</p>\n<p>利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。</p>"},{"title":"DjangoRESTframework-请求与响应（Request Response）","date":"2017-10-10T08:05:41.000Z","_content":"\n### DjangoRESTframework-------请求与响应（Request and Response）\n\n在这一章，我们将真正的开始接触REST framework的核心了。接下来介绍一下几个内建模块。\n\n#### Request对象\n\nREST framework提供了一个Request对象，它派生自HttpRequest，提供更多弹性的访问数据的序列化操作。它的核心是request.data属性，它类似于request.POST，在Web API中用处很大。\n\n<!--more-->\n\n```code\nrequest.POST #只能处理表单数据，只能在POST方法中起作用\nrequest.data #可以处理任意的数据，能够在POST,PUT,PATCH方法中起作用\n```\n\n#### Response对象\n\nREST framework提供了Response对象，他是一个TemplateResponse类型的对象，它能够提供未渲染的内容，使用合适的数据类型返回给客户端。\n\n```code\nreturn Response(data) #渲染数据给客户端\n```\n\n#### Status codes\n\n使用数字状态的HTTP响应码，用于不必要的数据读取。它的使用需要非常注意，如果你给出了一个错误的状态码。REST framework为每个状态提供了更明确的状态码，比如HTTP_400_BAD_REQUEST\n\n#### Wrapping API views\n\nREST framework提供了两种wrapper，你可以用来编写API views\n\n1.@api_view 装饰器，用于基于方法的视图\n\n2.APIVIEW类，用于基于类的视图\n\n这些装饰器提供了基本的方法能够确保你收到Request实例，为Reponse对象添加上下文。\n\n这些装饰器也提供一些行为控制，比如返回405 Method Not Allowed在合适的情况下，也能够处理任何ParseError异常，当request.data是非法输入时。\n\n#### 把以上的内容拼起来复习一下，Pulling it all together\n\n好了，现在我们可以使用这些新组件来编写view了。我们不需views.py中引入JSONResponse类，删掉它，继续coding。\n\n```python\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n  if request.method == 'GET':\n    snippet = Snippet.objects.all()\n    serializer = SnippetSerializer(snippets, many=True)\n    return Reponse(serializer.data)\n  \n  elif request.method == 'POST':\n    serializer = SnippetSerializer(data=request.data)\n    if serializer.is_valid():\n      serializer.save()\n      return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n```\n\n现在的视图与之前相比，显得更加简洁了一些，看起来和Forms API看起来也非常相似。我们也使用了status codes，使我们返回的意义更加明确。下面是snippet的详细视图，对应的文件是views.py:\n\n```python\n@api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n```\n\n这看起来就更加熟悉了，和一般的Django视图区别不大。\n\n注意：我们不再明确的指定request和response中的内容类型，request.data能够帮我们处理传入的json格式的请求数据，但是它也能给处理其他类型的格式。类似地，我们能返回响应对象数据，允许REST framework用合适的数据类型渲染响应。\n\n#### 给我们的URLs添加可选的格式前缀\n\n利用这一优点，我们的响应内容不再硬生生的绑定单一的内容格式，而可以支持格式前缀，定义我们需要返回的格式。比如http://example.com/api/items/4.sjon.\n\n要达到这个目的的话，需要给添加一个format参数，就像这样：\n\n```python\ndef snippet_list(request, format=None)\n```\n\n```python\ndef snippet_detail(request, pk, format=None)\n```\n\n现在需要更新urls.py,追加format_suffix_patterns\n\n```python\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n]\n\nurlpatterns = fromat_suffix_patterns(urlpatterns)\n```\n\n\n\n我们就不再需要添加其他额外的url策略，就能够给我们一个清晰，简洁的支持指定需要的响应格式。\n\n#### 应用跑起来是怎样的呢？\n\n我们可以和之前一样列出所有的snippets\n\n```shell\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:52:59 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\n```\n\n我们也可以控制返回的格式，利用HTTP头或者格式前缀。\n\n```bash\n\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/ Accept:application/json\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:54:19 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/ Accept:text/html\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 7647\nContent-Type: text/html; charset=utf-8\nDate: Tue, 10 Oct 2017 07:54:50 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n<!DOCTYPE html>\n<html>\n  <head>\n\n\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n\n\n      <title>Snippet List – Django REST framework</title>\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets.json\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:55:25 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets.api\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 7668\nContent-Type: text/html; charset=utf-8\nDate: Tue, 10 Oct 2017 07:55:42 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n<!DOCTYPE html>\n<html>\n  <head>\n\n\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n\n\n      <title>Snippet List – Django REST framework</title>\n\n\n```\n\n同时，我们可以控制请求数据的格式，利用Content-type头。\n\n```shell\nPS E:\\Study\\Serializer_tutorial\\tutorial> http --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\nHTTP/1.0 201 Created\nAllow: POST, OPTIONS, GET\nContent-Length: 93\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:58:55 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"code\": \"print 123\",\n    \"id\": 4,\n    \"language\": \"python\",\n    \"linenos\": false,\n    \"style\": \"friendly\",\n    \"title\": \"\"\n}\n\nPS E:\\Study\\Serializer_tutorial\\tutorial> http --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\"\nHTTP/1.0 201 Created\nAllow: POST, OPTIONS, GET\nContent-Length: 93\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:59:24 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"code\": \"print 456\",\n    \"id\": 5,\n    \"language\": \"python\",\n    \"linenos\": false,\n    \"style\": \"friendly\",\n    \"title\": \"\"\n}\n```\n\n\n\n#### 可视化\n\n由于API可以根据客户端的请求选择合适的响应类型。因此当接收到来自浏览器的请求时，会默认以html的格式响应请求。这可以让api能够返回，用于网页浏览。可视化之后，用浏览器开发和使用api将变得十分方便。所以现在用浏览器查看是这个画风：\n\n![image](/blogimg/reqres.png)\n\n","source":"_posts/DjangoRESTframework-ReqAndRes.md","raw":"---\ntitle: DjangoRESTframework-请求与响应（Request Response）\ncategories:\n  - Program\ntags:\n  - djangorestframework\ndate: 2017-10-10 16:05:41\n---\n\n### DjangoRESTframework-------请求与响应（Request and Response）\n\n在这一章，我们将真正的开始接触REST framework的核心了。接下来介绍一下几个内建模块。\n\n#### Request对象\n\nREST framework提供了一个Request对象，它派生自HttpRequest，提供更多弹性的访问数据的序列化操作。它的核心是request.data属性，它类似于request.POST，在Web API中用处很大。\n\n<!--more-->\n\n```code\nrequest.POST #只能处理表单数据，只能在POST方法中起作用\nrequest.data #可以处理任意的数据，能够在POST,PUT,PATCH方法中起作用\n```\n\n#### Response对象\n\nREST framework提供了Response对象，他是一个TemplateResponse类型的对象，它能够提供未渲染的内容，使用合适的数据类型返回给客户端。\n\n```code\nreturn Response(data) #渲染数据给客户端\n```\n\n#### Status codes\n\n使用数字状态的HTTP响应码，用于不必要的数据读取。它的使用需要非常注意，如果你给出了一个错误的状态码。REST framework为每个状态提供了更明确的状态码，比如HTTP_400_BAD_REQUEST\n\n#### Wrapping API views\n\nREST framework提供了两种wrapper，你可以用来编写API views\n\n1.@api_view 装饰器，用于基于方法的视图\n\n2.APIVIEW类，用于基于类的视图\n\n这些装饰器提供了基本的方法能够确保你收到Request实例，为Reponse对象添加上下文。\n\n这些装饰器也提供一些行为控制，比如返回405 Method Not Allowed在合适的情况下，也能够处理任何ParseError异常，当request.data是非法输入时。\n\n#### 把以上的内容拼起来复习一下，Pulling it all together\n\n好了，现在我们可以使用这些新组件来编写view了。我们不需views.py中引入JSONResponse类，删掉它，继续coding。\n\n```python\nfrom rest_framework import status\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n\n@api_view(['GET', 'POST'])\ndef snippet_list(request):\n  if request.method == 'GET':\n    snippet = Snippet.objects.all()\n    serializer = SnippetSerializer(snippets, many=True)\n    return Reponse(serializer.data)\n  \n  elif request.method == 'POST':\n    serializer = SnippetSerializer(data=request.data)\n    if serializer.is_valid():\n      serializer.save()\n      return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n```\n\n现在的视图与之前相比，显得更加简洁了一些，看起来和Forms API看起来也非常相似。我们也使用了status codes，使我们返回的意义更加明确。下面是snippet的详细视图，对应的文件是views.py:\n\n```python\n@api_view(['GET', 'PUT', 'DELETE'])\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return Response(serializer.data)\n\n    elif request.method == 'PUT':\n        serializer = SnippetSerializer(snippet, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n```\n\n这看起来就更加熟悉了，和一般的Django视图区别不大。\n\n注意：我们不再明确的指定request和response中的内容类型，request.data能够帮我们处理传入的json格式的请求数据，但是它也能给处理其他类型的格式。类似地，我们能返回响应对象数据，允许REST framework用合适的数据类型渲染响应。\n\n#### 给我们的URLs添加可选的格式前缀\n\n利用这一优点，我们的响应内容不再硬生生的绑定单一的内容格式，而可以支持格式前缀，定义我们需要返回的格式。比如http://example.com/api/items/4.sjon.\n\n要达到这个目的的话，需要给添加一个format参数，就像这样：\n\n```python\ndef snippet_list(request, format=None)\n```\n\n```python\ndef snippet_detail(request, pk, format=None)\n```\n\n现在需要更新urls.py,追加format_suffix_patterns\n\n```python\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n]\n\nurlpatterns = fromat_suffix_patterns(urlpatterns)\n```\n\n\n\n我们就不再需要添加其他额外的url策略，就能够给我们一个清晰，简洁的支持指定需要的响应格式。\n\n#### 应用跑起来是怎样的呢？\n\n我们可以和之前一样列出所有的snippets\n\n```shell\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:52:59 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\n```\n\n我们也可以控制返回的格式，利用HTTP头或者格式前缀。\n\n```bash\n\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/ Accept:application/json\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:54:19 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/ Accept:text/html\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 7647\nContent-Type: text/html; charset=utf-8\nDate: Tue, 10 Oct 2017 07:54:50 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n<!DOCTYPE html>\n<html>\n  <head>\n\n\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n\n\n      <title>Snippet List – Django REST framework</title>\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets.json\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 319\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:55:25 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets.api\nHTTP/1.0 200 OK\nAllow: POST, OPTIONS, GET\nContent-Length: 7668\nContent-Type: text/html; charset=utf-8\nDate: Tue, 10 Oct 2017 07:55:42 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n<!DOCTYPE html>\n<html>\n  <head>\n\n\n\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n        <meta name=\"robots\" content=\"NONE,NOARCHIVE\" />\n\n\n      <title>Snippet List – Django REST framework</title>\n\n\n```\n\n同时，我们可以控制请求数据的格式，利用Content-type头。\n\n```shell\nPS E:\\Study\\Serializer_tutorial\\tutorial> http --form POST http://127.0.0.1:8000/snippets/ code=\"print 123\"\nHTTP/1.0 201 Created\nAllow: POST, OPTIONS, GET\nContent-Length: 93\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:58:55 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"code\": \"print 123\",\n    \"id\": 4,\n    \"language\": \"python\",\n    \"linenos\": false,\n    \"style\": \"friendly\",\n    \"title\": \"\"\n}\n\nPS E:\\Study\\Serializer_tutorial\\tutorial> http --json POST http://127.0.0.1:8000/snippets/ code=\"print 456\"\nHTTP/1.0 201 Created\nAllow: POST, OPTIONS, GET\nContent-Length: 93\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 07:59:24 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"code\": \"print 456\",\n    \"id\": 5,\n    \"language\": \"python\",\n    \"linenos\": false,\n    \"style\": \"friendly\",\n    \"title\": \"\"\n}\n```\n\n\n\n#### 可视化\n\n由于API可以根据客户端的请求选择合适的响应类型。因此当接收到来自浏览器的请求时，会默认以html的格式响应请求。这可以让api能够返回，用于网页浏览。可视化之后，用浏览器开发和使用api将变得十分方便。所以现在用浏览器查看是这个画风：\n\n![image](/blogimg/reqres.png)\n\n","slug":"DjangoRESTframework-ReqAndRes","published":1,"updated":"2017-10-10T08:07:25.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpze20009gov5p452jzyl","content":"<h3 id=\"DjangoRESTframework——-请求与响应（Request-and-Response）\"><a href=\"#DjangoRESTframework——-请求与响应（Request-and-Response）\" class=\"headerlink\" title=\"DjangoRESTframework——-请求与响应（Request and Response）\"></a>DjangoRESTframework——-请求与响应（Request and Response）</h3><p>在这一章，我们将真正的开始接触REST framework的核心了。接下来介绍一下几个内建模块。</p>\n<h4 id=\"Request对象\"><a href=\"#Request对象\" class=\"headerlink\" title=\"Request对象\"></a>Request对象</h4><p>REST framework提供了一个Request对象，它派生自HttpRequest，提供更多弹性的访问数据的序列化操作。它的核心是request.data属性，它类似于request.POST，在Web API中用处很大。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.POST #只能处理表单数据，只能在POST方法中起作用</div><div class=\"line\">request.data #可以处理任意的数据，能够在POST,PUT,PATCH方法中起作用</div></pre></td></tr></table></figure>\n<h4 id=\"Response对象\"><a href=\"#Response对象\" class=\"headerlink\" title=\"Response对象\"></a>Response对象</h4><p>REST framework提供了Response对象，他是一个TemplateResponse类型的对象，它能够提供未渲染的内容，使用合适的数据类型返回给客户端。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return Response(data) #渲染数据给客户端</div></pre></td></tr></table></figure>\n<h4 id=\"Status-codes\"><a href=\"#Status-codes\" class=\"headerlink\" title=\"Status codes\"></a>Status codes</h4><p>使用数字状态的HTTP响应码，用于不必要的数据读取。它的使用需要非常注意，如果你给出了一个错误的状态码。REST framework为每个状态提供了更明确的状态码，比如HTTP_400_BAD_REQUEST</p>\n<h4 id=\"Wrapping-API-views\"><a href=\"#Wrapping-API-views\" class=\"headerlink\" title=\"Wrapping API views\"></a>Wrapping API views</h4><p>REST framework提供了两种wrapper，你可以用来编写API views</p>\n<p>1.@api_view 装饰器，用于基于方法的视图</p>\n<p>2.APIVIEW类，用于基于类的视图</p>\n<p>这些装饰器提供了基本的方法能够确保你收到Request实例，为Reponse对象添加上下文。</p>\n<p>这些装饰器也提供一些行为控制，比如返回405 Method Not Allowed在合适的情况下，也能够处理任何ParseError异常，当request.data是非法输入时。</p>\n<h4 id=\"把以上的内容拼起来复习一下，Pulling-it-all-together\"><a href=\"#把以上的内容拼起来复习一下，Pulling-it-all-together\" class=\"headerlink\" title=\"把以上的内容拼起来复习一下，Pulling it all together\"></a>把以上的内容拼起来复习一下，Pulling it all together</h4><p>好了，现在我们可以使用这些新组件来编写view了。我们不需views.py中引入JSONResponse类，删掉它，继续coding。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> api_view</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">    snippet = Snippet.objects.all()</div><div class=\"line\">    serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> Reponse(serializer.data)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">    serializer = SnippetSerializer(data=request.data)</div><div class=\"line\">    <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">      serializer.save()</div><div class=\"line\">      <span class=\"keyword\">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class=\"line\">    <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure>\n<p>现在的视图与之前相比，显得更加简洁了一些，看起来和Forms API看起来也非常相似。我们也使用了status codes，使我们返回的意义更加明确。下面是snippet的详细视图，对应的文件是views.py:</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    Retrieve, update or delete a code snippet.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        snippet = Snippet.objects.get(pk=pk)</div><div class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_404_NOT_FOUND)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet, data=request.data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</div><div class=\"line\">        snippet.delete()</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_204_NO_CONTENT)</div></pre></td></tr></table></figure>\n<p>这看起来就更加熟悉了，和一般的Django视图区别不大。</p>\n<p>注意：我们不再明确的指定request和response中的内容类型，request.data能够帮我们处理传入的json格式的请求数据，但是它也能给处理其他类型的格式。类似地，我们能返回响应对象数据，允许REST framework用合适的数据类型渲染响应。</p>\n<h4 id=\"给我们的URLs添加可选的格式前缀\"><a href=\"#给我们的URLs添加可选的格式前缀\" class=\"headerlink\" title=\"给我们的URLs添加可选的格式前缀\"></a>给我们的URLs添加可选的格式前缀</h4><p>利用这一优点，我们的响应内容不再硬生生的绑定单一的内容格式，而可以支持格式前缀，定义我们需要返回的格式。比如<a href=\"http://example.com/api/items/4.sjon\" target=\"_blank\" rel=\"external\">http://example.com/api/items/4.sjon</a>.</p>\n<p>要达到这个目的的话，需要给添加一个format参数，就像这样：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request, format=None)</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk, format=None)</span></span></div></pre></td></tr></table></figure>\n<p>现在需要更新urls.py,追加format_suffix_patterns</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)$'</span>, views.snippet_detail),</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = fromat_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<p>我们就不再需要添加其他额外的url策略，就能够给我们一个清晰，简洁的支持指定需要的响应格式。</p>\n<h4 id=\"应用跑起来是怎样的呢？\"><a href=\"#应用跑起来是怎样的呢？\" class=\"headerlink\" title=\"应用跑起来是怎样的呢？\"></a>应用跑起来是怎样的呢？</h4><p>我们可以和之前一样列出所有的snippets</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:52:59 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;foo = \\&quot;bar\\&quot;\\n&quot;,</div><div class=\"line\">        &quot;id&quot;: 1,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;print \\&quot;hello, world\\n\\&quot;&quot;,</div><div class=\"line\">        &quot;id&quot;: 2,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;print \\&quot;hello, world\\n\\&quot;&quot;,</div><div class=\"line\">        &quot;id&quot;: 3,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>我们也可以控制返回的格式，利用HTTP头或者格式前缀。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/ Accept:application/json</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:54:19 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 1,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 2,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 3,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/ Accept:text/html</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 7647</div><div class=\"line\">Content-Type: text/html; charset=utf-8</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:54:50 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</div><div class=\"line\">        &lt;meta name=<span class=\"string\">\"robots\"</span> content=<span class=\"string\">\"NONE,NOARCHIVE\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      &lt;title&gt;Snippet List – Django REST framework&lt;/title&gt;</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets.json</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:55:25 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 1,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets.api</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 7668</div><div class=\"line\">Content-Type: text/html; charset=utf-8</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:55:42 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</div><div class=\"line\">        &lt;meta name=<span class=\"string\">\"robots\"</span> content=<span class=\"string\">\"NONE,NOARCHIVE\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      &lt;title&gt;Snippet List – Django REST framework&lt;/title&gt;</div></pre></td></tr></table></figure>\n<p>同时，我们可以控制请求数据的格式，利用Content-type头。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http --form POST http://127.0.0.1:8000/snippets/ code=&quot;print 123&quot;</div><div class=\"line\">HTTP/1.0 201 Created</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 93</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:58:55 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;code&quot;: &quot;print 123&quot;,</div><div class=\"line\">    &quot;id&quot;: 4,</div><div class=\"line\">    &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">    &quot;linenos&quot;: false,</div><div class=\"line\">    &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">    &quot;title&quot;: &quot;&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http --json POST http://127.0.0.1:8000/snippets/ code=&quot;print 456&quot;</div><div class=\"line\">HTTP/1.0 201 Created</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 93</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:59:24 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;code&quot;: &quot;print 456&quot;,</div><div class=\"line\">    &quot;id&quot;: 5,</div><div class=\"line\">    &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">    &quot;linenos&quot;: false,</div><div class=\"line\">    &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">    &quot;title&quot;: &quot;&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h4><p>由于API可以根据客户端的请求选择合适的响应类型。因此当接收到来自浏览器的请求时，会默认以html的格式响应请求。这可以让api能够返回，用于网页浏览。可视化之后，用浏览器开发和使用api将变得十分方便。所以现在用浏览器查看是这个画风：</p>\n<p><img src=\"/blogimg/reqres.png\" alt=\"image\"></p>\n","excerpt":"<h3 id=\"DjangoRESTframework——-请求与响应（Request-and-Response）\"><a href=\"#DjangoRESTframework——-请求与响应（Request-and-Response）\" class=\"headerlink\" title=\"DjangoRESTframework——-请求与响应（Request and Response）\"></a>DjangoRESTframework——-请求与响应（Request and Response）</h3><p>在这一章，我们将真正的开始接触REST framework的核心了。接下来介绍一下几个内建模块。</p>\n<h4 id=\"Request对象\"><a href=\"#Request对象\" class=\"headerlink\" title=\"Request对象\"></a>Request对象</h4><p>REST framework提供了一个Request对象，它派生自HttpRequest，提供更多弹性的访问数据的序列化操作。它的核心是request.data属性，它类似于request.POST，在Web API中用处很大。</p>","more":"<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.POST #只能处理表单数据，只能在POST方法中起作用</div><div class=\"line\">request.data #可以处理任意的数据，能够在POST,PUT,PATCH方法中起作用</div></pre></td></tr></table></figure>\n<h4 id=\"Response对象\"><a href=\"#Response对象\" class=\"headerlink\" title=\"Response对象\"></a>Response对象</h4><p>REST framework提供了Response对象，他是一个TemplateResponse类型的对象，它能够提供未渲染的内容，使用合适的数据类型返回给客户端。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return Response(data) #渲染数据给客户端</div></pre></td></tr></table></figure>\n<h4 id=\"Status-codes\"><a href=\"#Status-codes\" class=\"headerlink\" title=\"Status codes\"></a>Status codes</h4><p>使用数字状态的HTTP响应码，用于不必要的数据读取。它的使用需要非常注意，如果你给出了一个错误的状态码。REST framework为每个状态提供了更明确的状态码，比如HTTP_400_BAD_REQUEST</p>\n<h4 id=\"Wrapping-API-views\"><a href=\"#Wrapping-API-views\" class=\"headerlink\" title=\"Wrapping API views\"></a>Wrapping API views</h4><p>REST framework提供了两种wrapper，你可以用来编写API views</p>\n<p>1.@api_view 装饰器，用于基于方法的视图</p>\n<p>2.APIVIEW类，用于基于类的视图</p>\n<p>这些装饰器提供了基本的方法能够确保你收到Request实例，为Reponse对象添加上下文。</p>\n<p>这些装饰器也提供一些行为控制，比如返回405 Method Not Allowed在合适的情况下，也能够处理任何ParseError异常，当request.data是非法输入时。</p>\n<h4 id=\"把以上的内容拼起来复习一下，Pulling-it-all-together\"><a href=\"#把以上的内容拼起来复习一下，Pulling-it-all-together\" class=\"headerlink\" title=\"把以上的内容拼起来复习一下，Pulling it all together\"></a>把以上的内容拼起来复习一下，Pulling it all together</h4><p>好了，现在我们可以使用这些新组件来编写view了。我们不需views.py中引入JSONResponse类，删掉它，继续coding。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> api_view</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'POST'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">  <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">    snippet = Snippet.objects.all()</div><div class=\"line\">    serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> Reponse(serializer.data)</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">    serializer = SnippetSerializer(data=request.data)</div><div class=\"line\">    <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">      serializer.save()</div><div class=\"line\">      <span class=\"keyword\">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class=\"line\">    <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div></pre></td></tr></table></figure>\n<p>现在的视图与之前相比，显得更加简洁了一些，看起来和Forms API看起来也非常相似。我们也使用了status codes，使我们返回的意义更加明确。下面是snippet的详细视图，对应的文件是views.py:</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@api_view(['GET', 'PUT', 'DELETE'])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    Retrieve, update or delete a code snippet.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        snippet = Snippet.objects.get(pk=pk)</div><div class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_404_NOT_FOUND)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet, data=request.data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</div><div class=\"line\">        snippet.delete()</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(status=status.HTTP_204_NO_CONTENT)</div></pre></td></tr></table></figure>\n<p>这看起来就更加熟悉了，和一般的Django视图区别不大。</p>\n<p>注意：我们不再明确的指定request和response中的内容类型，request.data能够帮我们处理传入的json格式的请求数据，但是它也能给处理其他类型的格式。类似地，我们能返回响应对象数据，允许REST framework用合适的数据类型渲染响应。</p>\n<h4 id=\"给我们的URLs添加可选的格式前缀\"><a href=\"#给我们的URLs添加可选的格式前缀\" class=\"headerlink\" title=\"给我们的URLs添加可选的格式前缀\"></a>给我们的URLs添加可选的格式前缀</h4><p>利用这一优点，我们的响应内容不再硬生生的绑定单一的内容格式，而可以支持格式前缀，定义我们需要返回的格式。比如<a href=\"http://example.com/api/items/4.sjon\">http://example.com/api/items/4.sjon</a>.</p>\n<p>要达到这个目的的话，需要给添加一个format参数，就像这样：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request, format=None)</span></span></div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk, format=None)</span></span></div></pre></td></tr></table></figure>\n<p>现在需要更新urls.py,追加format_suffix_patterns</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)$'</span>, views.snippet_detail),</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = fromat_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<p>我们就不再需要添加其他额外的url策略，就能够给我们一个清晰，简洁的支持指定需要的响应格式。</p>\n<h4 id=\"应用跑起来是怎样的呢？\"><a href=\"#应用跑起来是怎样的呢？\" class=\"headerlink\" title=\"应用跑起来是怎样的呢？\"></a>应用跑起来是怎样的呢？</h4><p>我们可以和之前一样列出所有的snippets</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:52:59 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;foo = \\&quot;bar\\&quot;\\n&quot;,</div><div class=\"line\">        &quot;id&quot;: 1,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;print \\&quot;hello, world\\n\\&quot;&quot;,</div><div class=\"line\">        &quot;id&quot;: 2,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;code&quot;: &quot;print \\&quot;hello, world\\n\\&quot;&quot;,</div><div class=\"line\">        &quot;id&quot;: 3,</div><div class=\"line\">        &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">        &quot;linenos&quot;: false,</div><div class=\"line\">        &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">        &quot;title&quot;: &quot;&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>我们也可以控制返回的格式，利用HTTP头或者格式前缀。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/ Accept:application/json</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:54:19 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 1,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 2,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 3,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets/ Accept:text/html</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 7647</div><div class=\"line\">Content-Type: text/html; charset=utf-8</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:54:50 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</div><div class=\"line\">        &lt;meta name=<span class=\"string\">\"robots\"</span> content=<span class=\"string\">\"NONE,NOARCHIVE\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      &lt;title&gt;Snippet List – Django REST framework&lt;/title&gt;</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets.json</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 319</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:55:25 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: 1,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://127.0.0.1:8000/snippets.api</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 7668</div><div class=\"line\">Content-Type: text/html; charset=utf-8</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:55:42 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>/&gt;</div><div class=\"line\">        &lt;meta name=<span class=\"string\">\"robots\"</span> content=<span class=\"string\">\"NONE,NOARCHIVE\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      &lt;title&gt;Snippet List – Django REST framework&lt;/title&gt;</div></pre></td></tr></table></figure>\n<p>同时，我们可以控制请求数据的格式，利用Content-type头。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http --form POST http://127.0.0.1:8000/snippets/ code=&quot;print 123&quot;</div><div class=\"line\">HTTP/1.0 201 Created</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 93</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:58:55 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;code&quot;: &quot;print 123&quot;,</div><div class=\"line\">    &quot;id&quot;: 4,</div><div class=\"line\">    &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">    &quot;linenos&quot;: false,</div><div class=\"line\">    &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">    &quot;title&quot;: &quot;&quot;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http --json POST http://127.0.0.1:8000/snippets/ code=&quot;print 456&quot;</div><div class=\"line\">HTTP/1.0 201 Created</div><div class=\"line\">Allow: POST, OPTIONS, GET</div><div class=\"line\">Content-Length: 93</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 07:59:24 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;code&quot;: &quot;print 456&quot;,</div><div class=\"line\">    &quot;id&quot;: 5,</div><div class=\"line\">    &quot;language&quot;: &quot;python&quot;,</div><div class=\"line\">    &quot;linenos&quot;: false,</div><div class=\"line\">    &quot;style&quot;: &quot;friendly&quot;,</div><div class=\"line\">    &quot;title&quot;: &quot;&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h4><p>由于API可以根据客户端的请求选择合适的响应类型。因此当接收到来自浏览器的请求时，会默认以html的格式响应请求。这可以让api能够返回，用于网页浏览。可视化之后，用浏览器开发和使用api将变得十分方便。所以现在用浏览器查看是这个画风：</p>\n<p><img src=\"/blogimg/reqres.png\" alt=\"image\"></p>"},{"title":"Django快速上手笔记之HelloWorld","date":"2017-10-02T05:09:39.000Z","_content":"\n在上篇博文中，成功的安装好了Django框架，在这篇博文中，先建个helloworl工程试试水。再根据helloworld工程进一步介绍Django框架中的各个模块怎么配置和使用。废话不多讲，上图。\n\n<!--more-->\n\n在Linux环境下用命令行也可以很好的进行Django项目的开发，为了学习的方便我在windowns环境下使用Pycharm集成开发环境作示范。\n\n### 创建项目\n\n1.点击file->new project,选择Django项目，输入你想创建的项目名称和所在路径，选择python解释器版本，点击create即可生成一个Django项目。\n\n![image](/blogimg/django-step-1.png)\n\n生成的项目的目录结构如下：\n\n![image](/blogimg/django-step-2.png)\n\n### 创建Django APP\n\n在一个Django项目中，可以包含多个APP，一个APP可以作为分系统、子模块、功能部件等待。创建方法为在pycharm的terminal中输入命令\n\n```cmd\npython manage.py startapp hello\n```\n\n![imange](/blogimg/django-step-3.png)\n\n创建成功的APP目录结构如下：\n\n![imange](/blogimg/django-step-4.png)\n\n### 编写路由\n\n在project目录下的urls.py文件中添加需要的路由\n\n```python\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nfrom Hello import views  #导入对应的app的views文件\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'index/',views.index)  #自己需要的路由，第一个参数是url匹配的正则表达式，第二个参数是对应的views的业务逻辑方法\n]\n```\n\n### 编写对应的业务逻辑\n\n业务逻辑代码需要在APP中views.py文件中编写：\n\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.shortcuts import render\nfrom django.shortcuts import HttpResponse #导入HttpResponse模块\n\n# Create your views here.\ndef index(request):\n    return  HttpResponse(\"Hello Django!\")  #直接返回一个字符串\n```\n\n完成了以上两步，我们就将index这个url路径指向了views中的index()方法，它完成的动作便是给访问/index/这个url的浏览器返回“Hello Django!”字符串。\n\n### 让服务跑起来\n\n1. 在pycharm的terminal中执行：\n\n```cmd\npython manange.py runserver 127.0.0.1:8000\n```\n\n2. 直接点击pycharm工具栏中的绿色run图标即可。\n\n### 看看效果\n\n![image](/blogimg/django-step-5.png)\n\n服务开启正常，用浏览器访问一下。\n\n![imange](/blogimg/django-step-6.png)\n\nOK,服务运行正常，说明这个工程创建是成功的。","source":"_posts/Django-helloworld.md","raw":"---\ntitle: Django快速上手笔记之HelloWorld\ncategories:\n  - Program\ntags:\n  - python web Django\ndate: 2017-10-02 13:09:39\n---\n\n在上篇博文中，成功的安装好了Django框架，在这篇博文中，先建个helloworl工程试试水。再根据helloworld工程进一步介绍Django框架中的各个模块怎么配置和使用。废话不多讲，上图。\n\n<!--more-->\n\n在Linux环境下用命令行也可以很好的进行Django项目的开发，为了学习的方便我在windowns环境下使用Pycharm集成开发环境作示范。\n\n### 创建项目\n\n1.点击file->new project,选择Django项目，输入你想创建的项目名称和所在路径，选择python解释器版本，点击create即可生成一个Django项目。\n\n![image](/blogimg/django-step-1.png)\n\n生成的项目的目录结构如下：\n\n![image](/blogimg/django-step-2.png)\n\n### 创建Django APP\n\n在一个Django项目中，可以包含多个APP，一个APP可以作为分系统、子模块、功能部件等待。创建方法为在pycharm的terminal中输入命令\n\n```cmd\npython manage.py startapp hello\n```\n\n![imange](/blogimg/django-step-3.png)\n\n创建成功的APP目录结构如下：\n\n![imange](/blogimg/django-step-4.png)\n\n### 编写路由\n\n在project目录下的urls.py文件中添加需要的路由\n\n```python\nfrom django.conf.urls import url\nfrom django.contrib import admin\n\nfrom Hello import views  #导入对应的app的views文件\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),\n    url(r'index/',views.index)  #自己需要的路由，第一个参数是url匹配的正则表达式，第二个参数是对应的views的业务逻辑方法\n]\n```\n\n### 编写对应的业务逻辑\n\n业务逻辑代码需要在APP中views.py文件中编写：\n\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\nfrom django.shortcuts import render\nfrom django.shortcuts import HttpResponse #导入HttpResponse模块\n\n# Create your views here.\ndef index(request):\n    return  HttpResponse(\"Hello Django!\")  #直接返回一个字符串\n```\n\n完成了以上两步，我们就将index这个url路径指向了views中的index()方法，它完成的动作便是给访问/index/这个url的浏览器返回“Hello Django!”字符串。\n\n### 让服务跑起来\n\n1. 在pycharm的terminal中执行：\n\n```cmd\npython manange.py runserver 127.0.0.1:8000\n```\n\n2. 直接点击pycharm工具栏中的绿色run图标即可。\n\n### 看看效果\n\n![image](/blogimg/django-step-5.png)\n\n服务开启正常，用浏览器访问一下。\n\n![imange](/blogimg/django-step-6.png)\n\nOK,服务运行正常，说明这个工程创建是成功的。","slug":"Django-helloworld","published":1,"updated":"2017-10-10T03:15:07.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpze7000bgov564f6rk71","content":"<p>在上篇博文中，成功的安装好了Django框架，在这篇博文中，先建个helloworl工程试试水。再根据helloworld工程进一步介绍Django框架中的各个模块怎么配置和使用。废话不多讲，上图。</p>\n<a id=\"more\"></a>\n<p>在Linux环境下用命令行也可以很好的进行Django项目的开发，为了学习的方便我在windowns环境下使用Pycharm集成开发环境作示范。</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>1.点击file-&gt;new project,选择Django项目，输入你想创建的项目名称和所在路径，选择python解释器版本，点击create即可生成一个Django项目。</p>\n<p><img src=\"/blogimg/django-step-1.png\" alt=\"image\"></p>\n<p>生成的项目的目录结构如下：</p>\n<p><img src=\"/blogimg/django-step-2.png\" alt=\"image\"></p>\n<h3 id=\"创建Django-APP\"><a href=\"#创建Django-APP\" class=\"headerlink\" title=\"创建Django APP\"></a>创建Django APP</h3><p>在一个Django项目中，可以包含多个APP，一个APP可以作为分系统、子模块、功能部件等待。创建方法为在pycharm的terminal中输入命令</p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp hello</div></pre></td></tr></table></figure>\n<p><img src=\"/blogimg/django-step-3.png\" alt=\"imange\"></p>\n<p>创建成功的APP目录结构如下：</p>\n<p><img src=\"/blogimg/django-step-4.png\" alt=\"imange\"></p>\n<h3 id=\"编写路由\"><a href=\"#编写路由\" class=\"headerlink\" title=\"编写路由\"></a>编写路由</h3><p>在project目录下的urls.py文件中添加需要的路由</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> Hello <span class=\"keyword\">import</span> views  <span class=\"comment\">#导入对应的app的views文件</span></div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</div><div class=\"line\">    url(<span class=\"string\">r'index/'</span>,views.index)  <span class=\"comment\">#自己需要的路由，第一个参数是url匹配的正则表达式，第二个参数是对应的views的业务逻辑方法</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"编写对应的业务逻辑\"><a href=\"#编写对应的业务逻辑\" class=\"headerlink\" title=\"编写对应的业务逻辑\"></a>编写对应的业务逻辑</h3><p>业务逻辑代码需要在APP中views.py文件中编写：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse <span class=\"comment\">#导入HttpResponse模块</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span>  HttpResponse(<span class=\"string\">\"Hello Django!\"</span>)  <span class=\"comment\">#直接返回一个字符串</span></div></pre></td></tr></table></figure>\n<p>完成了以上两步，我们就将index这个url路径指向了views中的index()方法，它完成的动作便是给访问/index/这个url的浏览器返回“Hello Django!”字符串。</p>\n<h3 id=\"让服务跑起来\"><a href=\"#让服务跑起来\" class=\"headerlink\" title=\"让服务跑起来\"></a>让服务跑起来</h3><ol>\n<li>在pycharm的terminal中执行：</li>\n</ol>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manange.py runserver <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">8000</span></div></pre></td></tr></table></figure>\n<ol>\n<li>直接点击pycharm工具栏中的绿色run图标即可。</li>\n</ol>\n<h3 id=\"看看效果\"><a href=\"#看看效果\" class=\"headerlink\" title=\"看看效果\"></a>看看效果</h3><p><img src=\"/blogimg/django-step-5.png\" alt=\"image\"></p>\n<p>服务开启正常，用浏览器访问一下。</p>\n<p><img src=\"/blogimg/django-step-6.png\" alt=\"imange\"></p>\n<p>OK,服务运行正常，说明这个工程创建是成功的。</p>\n","excerpt":"<p>在上篇博文中，成功的安装好了Django框架，在这篇博文中，先建个helloworl工程试试水。再根据helloworld工程进一步介绍Django框架中的各个模块怎么配置和使用。废话不多讲，上图。</p>","more":"<p>在Linux环境下用命令行也可以很好的进行Django项目的开发，为了学习的方便我在windowns环境下使用Pycharm集成开发环境作示范。</p>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>1.点击file-&gt;new project,选择Django项目，输入你想创建的项目名称和所在路径，选择python解释器版本，点击create即可生成一个Django项目。</p>\n<p><img src=\"/blogimg/django-step-1.png\" alt=\"image\"></p>\n<p>生成的项目的目录结构如下：</p>\n<p><img src=\"/blogimg/django-step-2.png\" alt=\"image\"></p>\n<h3 id=\"创建Django-APP\"><a href=\"#创建Django-APP\" class=\"headerlink\" title=\"创建Django APP\"></a>创建Django APP</h3><p>在一个Django项目中，可以包含多个APP，一个APP可以作为分系统、子模块、功能部件等待。创建方法为在pycharm的terminal中输入命令</p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp hello</div></pre></td></tr></table></figure>\n<p><img src=\"/blogimg/django-step-3.png\" alt=\"imange\"></p>\n<p>创建成功的APP目录结构如下：</p>\n<p><img src=\"/blogimg/django-step-4.png\" alt=\"imange\"></p>\n<h3 id=\"编写路由\"><a href=\"#编写路由\" class=\"headerlink\" title=\"编写路由\"></a>编写路由</h3><p>在project目录下的urls.py文件中添加需要的路由</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> Hello <span class=\"keyword\">import</span> views  <span class=\"comment\">#导入对应的app的views文件</span></div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),</div><div class=\"line\">    url(<span class=\"string\">r'index/'</span>,views.index)  <span class=\"comment\">#自己需要的路由，第一个参数是url匹配的正则表达式，第二个参数是对应的views的业务逻辑方法</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"编写对应的业务逻辑\"><a href=\"#编写对应的业务逻辑\" class=\"headerlink\" title=\"编写对应的业务逻辑\"></a>编写对应的业务逻辑</h3><p>业务逻辑代码需要在APP中views.py文件中编写：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> HttpResponse <span class=\"comment\">#导入HttpResponse模块</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span>  HttpResponse(<span class=\"string\">\"Hello Django!\"</span>)  <span class=\"comment\">#直接返回一个字符串</span></div></pre></td></tr></table></figure>\n<p>完成了以上两步，我们就将index这个url路径指向了views中的index()方法，它完成的动作便是给访问/index/这个url的浏览器返回“Hello Django!”字符串。</p>\n<h3 id=\"让服务跑起来\"><a href=\"#让服务跑起来\" class=\"headerlink\" title=\"让服务跑起来\"></a>让服务跑起来</h3><ol>\n<li>在pycharm的terminal中执行：</li>\n</ol>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manange.py runserver <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">8000</span></div></pre></td></tr></table></figure>\n<ol>\n<li>直接点击pycharm工具栏中的绿色run图标即可。</li>\n</ol>\n<h3 id=\"看看效果\"><a href=\"#看看效果\" class=\"headerlink\" title=\"看看效果\"></a>看看效果</h3><p><img src=\"/blogimg/django-step-5.png\" alt=\"image\"></p>\n<p>服务开启正常，用浏览器访问一下。</p>\n<p><img src=\"/blogimg/django-step-6.png\" alt=\"imange\"></p>\n<p>OK,服务运行正常，说明这个工程创建是成功的。</p>"},{"title":"在自己的VPS上编译部署Ngrok","date":"2017-06-02T03:12:12.000Z","_content":"\n由于我有一些测试服务需要从内网映射到公网，但是又不想使用其他第三方的转发服务，索性就自己编译一把Ngrok放到自己的服务器上用吧。\n\n<!-- more -->\n\n### Ngrok是个啥？\n\n> ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.\n>\n> -------github上作者对ngrok的说明\n\n简单的来说，ngrok就是一个反向代理，可以通过公网服务器来和本地内网机器之间建立一个隧道，使得可以从外网访问内网的服务。\n\n### 准备工作\n\n1.在服务器上搭建go环境\n\n我选择直接下载go的源码\n\n>  [http://www.golangtc.com/download](http://www.golangtc.com/download) \n\n选取适合服务器系统的go环境压缩包，由于我的VPS是Centos 7 64位，所以我下载的是1.8 amd64\n\n```bash\n[root@vultr ngrok_compile]# wget http://www.golangtc.com/static/go/1.8/go1.8.linux-amd64.tar.gz\n```\n\n然后需要解压一下，需要注意的是要把go解压到/usr/local，免得后面出现一些不可描述的问题。\n\n```bash\n[root@vultr ngrok_compile]# tar -C /usr/local  -xzf go1.8.linux-amd64.tar.gz\n```\n\n为go创建个软连接到/usr/bin，方便直接使用go命令\n\n```bash\n[root@vultr ngrok_compile]# ln -s /usr/local/go/bin/* /usr/bin\n```\n\n到此，go环境就搭建好了。\n\n2.克隆ngrok的git仓库到本地\n\n```bash\n[root@vultr ngrok_compile]# git clone https://github.com/inconshreveable/ngrok.git\n```\n\n3.设置一些编译所需的环境变量\n\n```bash\n[root@vultr ngrok]# export GOPATH=/opt/ngrok_compile/ngrok/\n[root@vultr ngrok]# export NGROK_DOMAIN=\"ngrok.star-chen.com\"\n```\n\n4.为域名生成证书\n\n```bash\n[root@vultr ngrok_compile]# cd ngrok\n[root@vultr ngrok]# openssl genrsa -out rootCA.key 2048\n[root@vultr ngrok]# openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" days 5000 -out rootCA.pem\n[root@vultr ngrok]# openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\n[root@vultr ngrok]# openssl -genrsa -out sever.key 2048\n[root@vultr ngrok]# openssl genrsa -out sever.key 2048\n[root@vultr ngrok]# openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr\n[root@vultr ngrok]# openssl genrsa -out server.key 2048\n[root@vultr ngrok]# openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr\n[root@vultr ngrok]# openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000\n```\n5.把生成的证书拷贝到指定的目录下\n\n```bash\n[root@vultr ngrok]# cp rootCA.pem assets/client/tls/ngrokroot.crt \n[root@vultr ngrok]# cp server.crt assets/server/tls/snakeoil.crt \n[root@vultr ngrok]# cp server.key assets/server/tls/snakeoil.key \n```\n\n6.为域名设置A记录泛解析\n\n![img](/blogimg/fan.png)\n\n### 开始编译\n\n```bash\n#先编译个Linux 64位的服务端和客户端程序\n[root@vultr ngrok]#  GOOS=linux GOARCH=amd64 make release-server\n[root@vultr ngrok]#  GOOS=linux GOARCH=amd64 make release-client\n#再编译个windows64位的客户端\n[root@vultr ngrok]#  GOOS=windows GOARCH=amd64 make release-client\n```\n\n看一下编译好的程序\n\n```bash\n[root@vultr ngrok]# ls -la bin\ntotal 21544\ndrwxr-xr-x 3 root root     4096 Jun  2 03:06 .\ndrwxr-xr-x 9 root root     4096 Jun  2 02:31 ..\n-rwxr-xr-x 1 root root  2527810 Jun  2 02:31 go-bindata\n-rwxr-xr-x 1 root root 10672322 Jun  2 02:31 ngrok\n-rwxr-xr-x 1 root root  8841733 Jun  2 03:06 ngrokd\ndrwxr-xr-x 2 root root     4096 Jun  2 02:35 windows_amd64\n\n```\n\n### 运行测试\n\n服务端：\n\n```bash\n #因为我的服务上的80和443端口上运行着这个博客，所以我把http和https的端口进行了更改\n [root@vultr ngrok]# bin/ngrokd -domain=ngrok.star-chen.com -httpAddr=\":8080\" -httpsAddr=\":8081\"\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for public http connections on [::]:8080\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for public https connections on [::]:8081\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for control and proxy connections on [::]:4443\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds\n\n\n```\n\nwindows客户端:\n\n在ngrok.exe的所在目录新建一个简单的配置文件，内容如下：\n\n```\nserver_addr: \"ngrok.star-chen.com:4443\"   #尤其注意，这里的域名需要和你生成证书所使用的域名一致\ntrust_host_root_certs: false  \n```\n\n运行客户端程序：\n\n```cmd\nPS G:\\> .\\ngrok.exe -config .\\ngrok.cfg  -subdomain local 80 #subdomain为指定的子域名\n```\n\n运行的显示，status为online则表明已经建立了转发连接。\n\n```cmd\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://local.ngrok.star-chen.com:8080 -> 127.0.0.1:80\nForwarding                    https://local.ngrok.star-chen.com:8080 -> 127.0.0.1:80\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n\n\n```\n\n然后访问 http://local.ngrok.star-chen.com:8080  就可以访问到我本机的xampp测试环境了。当然客户端还可以转发tcp连接，例如我的虚拟机里边的ssh：\n\n```cmd\nPS G:\\> .\\ngrok.exe -config .\\ngrok.cfg  -proto tcp 192.168.10.176:22\n```\n\n这样子，在外边也可以方便的ssh到内网中的虚拟机了。","source":"_posts/CompileNgrok.md","raw":"---\ntitle: 在自己的VPS上编译部署Ngrok\ncategories:\n  - Linux\ntags:\n  - 转发\ndate: 2017-06-02 11:12:12\n---\n\n由于我有一些测试服务需要从内网映射到公网，但是又不想使用其他第三方的转发服务，索性就自己编译一把Ngrok放到自己的服务器上用吧。\n\n<!-- more -->\n\n### Ngrok是个啥？\n\n> ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.\n>\n> -------github上作者对ngrok的说明\n\n简单的来说，ngrok就是一个反向代理，可以通过公网服务器来和本地内网机器之间建立一个隧道，使得可以从外网访问内网的服务。\n\n### 准备工作\n\n1.在服务器上搭建go环境\n\n我选择直接下载go的源码\n\n>  [http://www.golangtc.com/download](http://www.golangtc.com/download) \n\n选取适合服务器系统的go环境压缩包，由于我的VPS是Centos 7 64位，所以我下载的是1.8 amd64\n\n```bash\n[root@vultr ngrok_compile]# wget http://www.golangtc.com/static/go/1.8/go1.8.linux-amd64.tar.gz\n```\n\n然后需要解压一下，需要注意的是要把go解压到/usr/local，免得后面出现一些不可描述的问题。\n\n```bash\n[root@vultr ngrok_compile]# tar -C /usr/local  -xzf go1.8.linux-amd64.tar.gz\n```\n\n为go创建个软连接到/usr/bin，方便直接使用go命令\n\n```bash\n[root@vultr ngrok_compile]# ln -s /usr/local/go/bin/* /usr/bin\n```\n\n到此，go环境就搭建好了。\n\n2.克隆ngrok的git仓库到本地\n\n```bash\n[root@vultr ngrok_compile]# git clone https://github.com/inconshreveable/ngrok.git\n```\n\n3.设置一些编译所需的环境变量\n\n```bash\n[root@vultr ngrok]# export GOPATH=/opt/ngrok_compile/ngrok/\n[root@vultr ngrok]# export NGROK_DOMAIN=\"ngrok.star-chen.com\"\n```\n\n4.为域名生成证书\n\n```bash\n[root@vultr ngrok_compile]# cd ngrok\n[root@vultr ngrok]# openssl genrsa -out rootCA.key 2048\n[root@vultr ngrok]# openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" days 5000 -out rootCA.pem\n[root@vultr ngrok]# openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem\n[root@vultr ngrok]# openssl -genrsa -out sever.key 2048\n[root@vultr ngrok]# openssl genrsa -out sever.key 2048\n[root@vultr ngrok]# openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr\n[root@vultr ngrok]# openssl genrsa -out server.key 2048\n[root@vultr ngrok]# openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr\n[root@vultr ngrok]# openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000\n```\n5.把生成的证书拷贝到指定的目录下\n\n```bash\n[root@vultr ngrok]# cp rootCA.pem assets/client/tls/ngrokroot.crt \n[root@vultr ngrok]# cp server.crt assets/server/tls/snakeoil.crt \n[root@vultr ngrok]# cp server.key assets/server/tls/snakeoil.key \n```\n\n6.为域名设置A记录泛解析\n\n![img](/blogimg/fan.png)\n\n### 开始编译\n\n```bash\n#先编译个Linux 64位的服务端和客户端程序\n[root@vultr ngrok]#  GOOS=linux GOARCH=amd64 make release-server\n[root@vultr ngrok]#  GOOS=linux GOARCH=amd64 make release-client\n#再编译个windows64位的客户端\n[root@vultr ngrok]#  GOOS=windows GOARCH=amd64 make release-client\n```\n\n看一下编译好的程序\n\n```bash\n[root@vultr ngrok]# ls -la bin\ntotal 21544\ndrwxr-xr-x 3 root root     4096 Jun  2 03:06 .\ndrwxr-xr-x 9 root root     4096 Jun  2 02:31 ..\n-rwxr-xr-x 1 root root  2527810 Jun  2 02:31 go-bindata\n-rwxr-xr-x 1 root root 10672322 Jun  2 02:31 ngrok\n-rwxr-xr-x 1 root root  8841733 Jun  2 03:06 ngrokd\ndrwxr-xr-x 2 root root     4096 Jun  2 02:35 windows_amd64\n\n```\n\n### 运行测试\n\n服务端：\n\n```bash\n #因为我的服务上的80和443端口上运行着这个博客，所以我把http和https的端口进行了更改\n [root@vultr ngrok]# bin/ngrokd -domain=ngrok.star-chen.com -httpAddr=\":8080\" -httpsAddr=\":8081\"\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for public http connections on [::]:8080\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for public https connections on [::]:8081\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening for control and proxy connections on [::]:4443\n[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds\n\n\n```\n\nwindows客户端:\n\n在ngrok.exe的所在目录新建一个简单的配置文件，内容如下：\n\n```\nserver_addr: \"ngrok.star-chen.com:4443\"   #尤其注意，这里的域名需要和你生成证书所使用的域名一致\ntrust_host_root_certs: false  \n```\n\n运行客户端程序：\n\n```cmd\nPS G:\\> .\\ngrok.exe -config .\\ngrok.cfg  -subdomain local 80 #subdomain为指定的子域名\n```\n\n运行的显示，status为online则表明已经建立了转发连接。\n\n```cmd\nngrok\n\nTunnel Status                 online\nVersion                       1.7/1.7\nForwarding                    http://local.ngrok.star-chen.com:8080 -> 127.0.0.1:80\nForwarding                    https://local.ngrok.star-chen.com:8080 -> 127.0.0.1:80\nWeb Interface                 127.0.0.1:4040\n# Conn                        0\nAvg Conn Time                 0.00ms\n\n\n```\n\n然后访问 http://local.ngrok.star-chen.com:8080  就可以访问到我本机的xampp测试环境了。当然客户端还可以转发tcp连接，例如我的虚拟机里边的ssh：\n\n```cmd\nPS G:\\> .\\ngrok.exe -config .\\ngrok.cfg  -proto tcp 192.168.10.176:22\n```\n\n这样子，在外边也可以方便的ssh到内网中的虚拟机了。","slug":"CompileNgrok","published":1,"updated":"2017-10-10T03:15:07.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzfw001egov5j5dpxggu","content":"<p>由于我有一些测试服务需要从内网映射到公网，但是又不想使用其他第三方的转发服务，索性就自己编译一把Ngrok放到自己的服务器上用吧。</p>\n<a id=\"more\"></a>\n<h3 id=\"Ngrok是个啥？\"><a href=\"#Ngrok是个啥？\" class=\"headerlink\" title=\"Ngrok是个啥？\"></a>Ngrok是个啥？</h3><blockquote>\n<p>ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.</p>\n<p>——-github上作者对ngrok的说明</p>\n</blockquote>\n<p>简单的来说，ngrok就是一个反向代理，可以通过公网服务器来和本地内网机器之间建立一个隧道，使得可以从外网访问内网的服务。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.在服务器上搭建go环境</p>\n<p>我选择直接下载go的源码</p>\n<blockquote>\n<p> <a href=\"http://www.golangtc.com/download\" target=\"_blank\" rel=\"external\">http://www.golangtc.com/download</a> </p>\n</blockquote>\n<p>选取适合服务器系统的go环境压缩包，由于我的VPS是Centos 7 64位，所以我下载的是1.8 amd64</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># wget http://www.golangtc.com/static/go/1.8/go1.8.linux-amd64.tar.gz</span></div></pre></td></tr></table></figure>\n<p>然后需要解压一下，需要注意的是要把go解压到/usr/local，免得后面出现一些不可描述的问题。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># tar -C /usr/local  -xzf go1.8.linux-amd64.tar.gz</span></div></pre></td></tr></table></figure>\n<p>为go创建个软连接到/usr/bin，方便直接使用go命令</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># ln -s /usr/local/go/bin/* /usr/bin</span></div></pre></td></tr></table></figure>\n<p>到此，go环境就搭建好了。</p>\n<p>2.克隆ngrok的git仓库到本地</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># git clone https://github.com/inconshreveable/ngrok.git</span></div></pre></td></tr></table></figure>\n<p>3.设置一些编译所需的环境变量</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># export GOPATH=/opt/ngrok_compile/ngrok/</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># export NGROK_DOMAIN=\"ngrok.star-chen.com\"</span></div></pre></td></tr></table></figure>\n<p>4.为域名生成证书</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># cd ngrok</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out rootCA.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" days 5000 -out rootCA.pem</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl -genrsa -out sever.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out sever.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out server.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000</span></div></pre></td></tr></table></figure>\n<p>5.把生成的证书拷贝到指定的目录下</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp rootCA.pem assets/client/tls/ngrokroot.crt </span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp server.crt assets/server/tls/snakeoil.crt </span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp server.key assets/server/tls/snakeoil.key</span></div></pre></td></tr></table></figure>\n<p>6.为域名设置A记录泛解析</p>\n<p><img src=\"/blogimg/fan.png\" alt=\"img\"></p>\n<h3 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#先编译个Linux 64位的服务端和客户端程序</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=linux GOARCH=amd64 make release-server</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=linux GOARCH=amd64 make release-client</span></div><div class=\"line\"><span class=\"comment\">#再编译个windows64位的客户端</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=windows GOARCH=amd64 make release-client</span></div></pre></td></tr></table></figure>\n<p>看一下编译好的程序</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># ls -la bin</span></div><div class=\"line\">total 21544</div><div class=\"line\">drwxr-xr-x 3 root root     4096 Jun  2 03:06 .</div><div class=\"line\">drwxr-xr-x 9 root root     4096 Jun  2 02:31 ..</div><div class=\"line\">-rwxr-xr-x 1 root root  2527810 Jun  2 02:31 go-bindata</div><div class=\"line\">-rwxr-xr-x 1 root root 10672322 Jun  2 02:31 ngrok</div><div class=\"line\">-rwxr-xr-x 1 root root  8841733 Jun  2 03:06 ngrokd</div><div class=\"line\">drwxr-xr-x 2 root root     4096 Jun  2 02:35 windows_amd64</div></pre></td></tr></table></figure>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p>服务端：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#因为我的服务上的80和443端口上运行着这个博客，所以我把http和https的端口进行了更改</span></div><div class=\"line\"> [root@vultr ngrok]<span class=\"comment\"># bin/ngrokd -domain=ngrok.star-chen.com -httpAddr=\":8080\" -httpsAddr=\":8081\"</span></div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> public http connections on [::]:8080</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> public https connections on [::]:8081</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> control and proxy connections on [::]:4443</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</div></pre></td></tr></table></figure>\n<p>windows客户端:</p>\n<p>在ngrok.exe的所在目录新建一个简单的配置文件，内容如下：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_addr: &quot;ngrok.star-chen.com:4443&quot;   #尤其注意，这里的域名需要和你生成证书所使用的域名一致</div><div class=\"line\">trust_host_root_certs: false</div></pre></td></tr></table></figure>\n<p>运行客户端程序：</p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS G:\\&gt; .\\ngrok.exe -config .\\ngrok.cfg  -subdomain local <span class=\"number\">80</span> #subdomain为指定的子域名</div></pre></td></tr></table></figure>\n<p>运行的显示，status为online则表明已经建立了转发连接。</p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngrok</div><div class=\"line\"></div><div class=\"line\">Tunnel Status                 online</div><div class=\"line\">Version                       <span class=\"number\">1</span>.<span class=\"number\">7</span>/<span class=\"number\">1</span>.<span class=\"number\">7</span></div><div class=\"line\">Forwarding                    http://local.ngrok.star-chen.com:<span class=\"number\">8080</span> -&gt; <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">80</span></div><div class=\"line\">Forwarding                    https://local.ngrok.star-chen.com:<span class=\"number\">8080</span> -&gt; <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">80</span></div><div class=\"line\">Web Interface                 <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">4040</span></div><div class=\"line\"># Conn                        <span class=\"number\">0</span></div><div class=\"line\">Avg Conn <span class=\"built_in\">Time</span>                 <span class=\"number\">0</span>.<span class=\"number\">00</span>ms</div></pre></td></tr></table></figure>\n<p>然后访问 <a href=\"http://local.ngrok.star-chen.com:8080\" target=\"_blank\" rel=\"external\">http://local.ngrok.star-chen.com:8080</a>  就可以访问到我本机的xampp测试环境了。当然客户端还可以转发tcp连接，例如我的虚拟机里边的ssh：</p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS G:\\&gt; .\\ngrok.exe -config .\\ngrok.cfg  -proto tcp <span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">10</span>.<span class=\"number\">176</span>:<span class=\"number\">22</span></div></pre></td></tr></table></figure>\n<p>这样子，在外边也可以方便的ssh到内网中的虚拟机了。</p>\n","excerpt":"<p>由于我有一些测试服务需要从内网映射到公网，但是又不想使用其他第三方的转发服务，索性就自己编译一把Ngrok放到自己的服务器上用吧。</p>","more":"<h3 id=\"Ngrok是个啥？\"><a href=\"#Ngrok是个啥？\" class=\"headerlink\" title=\"Ngrok是个啥？\"></a>Ngrok是个啥？</h3><blockquote>\n<p>ngrok is a reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service. ngrok captures and analyzes all traffic over the tunnel for later inspection and replay.</p>\n<p>——-github上作者对ngrok的说明</p>\n</blockquote>\n<p>简单的来说，ngrok就是一个反向代理，可以通过公网服务器来和本地内网机器之间建立一个隧道，使得可以从外网访问内网的服务。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.在服务器上搭建go环境</p>\n<p>我选择直接下载go的源码</p>\n<blockquote>\n<p> <a href=\"http://www.golangtc.com/download\">http://www.golangtc.com/download</a> </p>\n</blockquote>\n<p>选取适合服务器系统的go环境压缩包，由于我的VPS是Centos 7 64位，所以我下载的是1.8 amd64</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># wget http://www.golangtc.com/static/go/1.8/go1.8.linux-amd64.tar.gz</span></div></pre></td></tr></table></figure>\n<p>然后需要解压一下，需要注意的是要把go解压到/usr/local，免得后面出现一些不可描述的问题。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># tar -C /usr/local  -xzf go1.8.linux-amd64.tar.gz</span></div></pre></td></tr></table></figure>\n<p>为go创建个软连接到/usr/bin，方便直接使用go命令</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># ln -s /usr/local/go/bin/* /usr/bin</span></div></pre></td></tr></table></figure>\n<p>到此，go环境就搭建好了。</p>\n<p>2.克隆ngrok的git仓库到本地</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># git clone https://github.com/inconshreveable/ngrok.git</span></div></pre></td></tr></table></figure>\n<p>3.设置一些编译所需的环境变量</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># export GOPATH=/opt/ngrok_compile/ngrok/</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># export NGROK_DOMAIN=\"ngrok.star-chen.com\"</span></div></pre></td></tr></table></figure>\n<p>4.为域名生成证书</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok_compile]<span class=\"comment\"># cd ngrok</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out rootCA.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" days 5000 -out rootCA.pem</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -x509 -new -nodes -key rootCA.key -subj \"/CN=$NGROK_DOMAIN\" -days 5000 -out rootCA.pem</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl -genrsa -out sever.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out sever.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl genrsa -out server.key 2048</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl req -new -key server.key -subj \"/CN=$NGROK_DOMAIN\" -out server.csr</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000</span></div></pre></td></tr></table></figure>\n<p>5.把生成的证书拷贝到指定的目录下</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp rootCA.pem assets/client/tls/ngrokroot.crt </span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp server.crt assets/server/tls/snakeoil.crt </span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># cp server.key assets/server/tls/snakeoil.key</span></div></pre></td></tr></table></figure>\n<p>6.为域名设置A记录泛解析</p>\n<p><img src=\"/blogimg/fan.png\" alt=\"img\"></p>\n<h3 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#先编译个Linux 64位的服务端和客户端程序</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=linux GOARCH=amd64 make release-server</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=linux GOARCH=amd64 make release-client</span></div><div class=\"line\"><span class=\"comment\">#再编译个windows64位的客户端</span></div><div class=\"line\">[root@vultr ngrok]<span class=\"comment\">#  GOOS=windows GOARCH=amd64 make release-client</span></div></pre></td></tr></table></figure>\n<p>看一下编译好的程序</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ngrok]<span class=\"comment\"># ls -la bin</span></div><div class=\"line\">total 21544</div><div class=\"line\">drwxr-xr-x 3 root root     4096 Jun  2 03:06 .</div><div class=\"line\">drwxr-xr-x 9 root root     4096 Jun  2 02:31 ..</div><div class=\"line\">-rwxr-xr-x 1 root root  2527810 Jun  2 02:31 go-bindata</div><div class=\"line\">-rwxr-xr-x 1 root root 10672322 Jun  2 02:31 ngrok</div><div class=\"line\">-rwxr-xr-x 1 root root  8841733 Jun  2 03:06 ngrokd</div><div class=\"line\">drwxr-xr-x 2 root root     4096 Jun  2 02:35 windows_amd64</div></pre></td></tr></table></figure>\n<h3 id=\"运行测试\"><a href=\"#运行测试\" class=\"headerlink\" title=\"运行测试\"></a>运行测试</h3><p>服务端：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#因为我的服务上的80和443端口上运行着这个博客，所以我把http和https的端口进行了更改</span></div><div class=\"line\"> [root@vultr ngrok]<span class=\"comment\"># bin/ngrokd -domain=ngrok.star-chen.com -httpAddr=\":8080\" -httpsAddr=\":8081\"</span></div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> public http connections on [::]:8080</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> public https connections on [::]:8081</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.Info:112) Listening <span class=\"keyword\">for</span> control and proxy connections on [::]:4443</div><div class=\"line\">[04:00:34 UTC 2017/06/02] [INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</div></pre></td></tr></table></figure>\n<p>windows客户端:</p>\n<p>在ngrok.exe的所在目录新建一个简单的配置文件，内容如下：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_addr: &quot;ngrok.star-chen.com:4443&quot;   #尤其注意，这里的域名需要和你生成证书所使用的域名一致</div><div class=\"line\">trust_host_root_certs: false</div></pre></td></tr></table></figure>\n<p>运行客户端程序：</p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS G:\\&gt; .\\ngrok.exe -config .\\ngrok.cfg  -subdomain local <span class=\"number\">80</span> #subdomain为指定的子域名</div></pre></td></tr></table></figure>\n<p>运行的显示，status为online则表明已经建立了转发连接。</p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ngrok</div><div class=\"line\"></div><div class=\"line\">Tunnel Status                 online</div><div class=\"line\">Version                       <span class=\"number\">1</span>.<span class=\"number\">7</span>/<span class=\"number\">1</span>.<span class=\"number\">7</span></div><div class=\"line\">Forwarding                    http://local.ngrok.star-chen.com:<span class=\"number\">8080</span> -&gt; <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">80</span></div><div class=\"line\">Forwarding                    https://local.ngrok.star-chen.com:<span class=\"number\">8080</span> -&gt; <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">80</span></div><div class=\"line\">Web Interface                 <span class=\"number\">127</span>.<span class=\"number\">0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">4040</span></div><div class=\"line\"># Conn                        <span class=\"number\">0</span></div><div class=\"line\">Avg Conn <span class=\"built_in\">Time</span>                 <span class=\"number\">0</span>.<span class=\"number\">00</span>ms</div></pre></td></tr></table></figure>\n<p>然后访问 <a href=\"http://local.ngrok.star-chen.com:8080\">http://local.ngrok.star-chen.com:8080</a>  就可以访问到我本机的xampp测试环境了。当然客户端还可以转发tcp连接，例如我的虚拟机里边的ssh：</p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS G:\\&gt; .\\ngrok.exe -config .\\ngrok.cfg  -proto tcp <span class=\"number\">192</span>.<span class=\"number\">168</span>.<span class=\"number\">10</span>.<span class=\"number\">176</span>:<span class=\"number\">22</span></div></pre></td></tr></table></figure>\n<p>这样子，在外边也可以方便的ssh到内网中的虚拟机了。</p>"},{"title":"深入理解java虚拟机之动手编译OpenJDK 7","date":"2017-05-31T11:31:28.000Z","_content":"\n### 编译环境构建\n\n1. 操作系统\n\n   我选择的是Ubuntu Server 14.04 LTS,系统已经自带了openjdk 7，可以作为编译openjdk 7的bootstrap jdk,这里我就省略了安装bootstrap jdk的步骤了。\n\n2. 安装依赖的软件包\n   ```bash\n   $sudo apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev binutils libmotif-dev ant\n   ```\n\n3. 下载openjdk 7源码并解压\n\n   ```bash\n   $wget http://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip\n   ```\n   <!-- more -->\n4. 设置一些编译所需的环境变量\n\n   ```bash\n   export LANG=C\n   #bootstrap jdk的路径，我放在了~/jdk1.6\n   export ALT_BOOTDIR=~/jdk1.6\n   #允许编译过程中自动下载\n   export ALLOW_DOWNLOADS=true\n   #设置并行编译的线程数，我这虚拟机给了一个核，写个1\n   export HOTSPOT_BUILD_JOBS=1\n   export ALT_PARALLEL_COMPILE_JOBS=1\n   export SKIP_COMPARE_IMAGES=true\n   #使用预编译头文件\n   export USE_PRECOMPILED_HEADER=true\n   #需要编译的内容\n   export BUILD_LANGTOOLS=true\n   export BUILD_HOTSPOT=true\n   export BUILD_JDK=true\n   export BUILD_DEPLOY=false\n   #编译结果的存放路径\n   export ALT_OUTPUTDIR=~/compiled_jdk\n   unset JAVA_HOEM\n   unset CLASSPATH\n   ```\n\n### 准备就绪，开搞\n\n```bash\nxing@ubuntu-compile:~/openjdk$ make sanity \n.\n.\n.\nExternal File/Binary Locations:\n  USRJDKINSTANCES_PATH = /opt/java\n  BUILD_JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries\n    ALT_BUILD_JDK_IMPORT_PATH = \n  JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries/linux-amd64\n    ALT_JDK_IMPORT_PATH = \n  LANGTOOLS_DIST = \n    ALT_LANGTOOLS_DIST = /home/xing/compiled_jdk/langtools/dist\n  CORBA_DIST = \n    ALT_CORBA_DIST = /home/xing/compiled_jdk/corba/dist\n  JAXP_DIST = \n    ALT_JAXP_DIST = /home/xing/compiled_jdk/jaxp/dist\n  JAXWS_DIST = \n    ALT_JAXWS_DIST = /home/xing/compiled_jdk/jaxws/dist\n  HOTSPOT_DOCS_IMPORT_PATH = /NO_DOCS_DIR\n    ALT_HOTSPOT_DOCS_IMPORT_PATH = \n  HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import\n    ALT_HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import\n  HOTSPOT_SERVER_PATH = /home/xing/compiled_jdk/hotspot/import/jre/lib/amd64/server\n    ALT_HOTSPOT_SERVER_PATH = \n  CACERTS_FILE = ./../src/share/lib/security/cacerts\n    ALT_CACERTS_FILE = \n  CUPS_HEADERS_PATH = /usr/include\n    ALT_CUPS_HEADERS_PATH = \n \nOpenJDK-specific settings:\n  FREETYPE_HEADERS_PATH = /usr/include\n    ALT_FREETYPE_HEADERS_PATH = \n  FREETYPE_LIB_PATH = /usr/lib\n    ALT_FREETYPE_LIB_PATH = \n \nPrevious JDK Settings:\n  PREVIOUS_RELEASE_PATH = USING-PREVIOUS_RELEASE_IMAGE\n    ALT_PREVIOUS_RELEASE_PATH = \n  PREVIOUS_JDK_VERSION = 1.6.0\n    ALT_PREVIOUS_JDK_VERSION = \n  PREVIOUS_JDK_FILE = \n    ALT_PREVIOUS_JDK_FILE = \n  PREVIOUS_JRE_FILE = \n    ALT_PREVIOUS_JRE_FILE = \n  PREVIOUS_RELEASE_IMAGE = /usr/lib/jvm/java-7-openjdk-amd64/\n    ALT_PREVIOUS_RELEASE_IMAGE = \n\n\nSanity check passed.\n\nxing@ubuntu-compile:~/openjdk$ make\n.\n.\n.\n```\n\n### 遇到的问题​\n\n``` \ncd linux_amd64_compiler2/product &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; ./test_gamma\n   Using java runtime at: /usr/lib/jvm/java-7-openjdk-amd64/jre\n   Error occurred during initialization of VM\n   java.lang.NullPointerException\n\n   \tat java.util.Hashtable.put(Hashtable.java:514)\n   \tat java.lang.System.initProperties(Native Method)\n   \tat java.lang.System.initializeSystemClass(System.java:1119)\n\n   make[4]: *** [product] Error 1\n   make[4]: Leaving directory `/home/xing/compiled_jdk/hotspot/outputdir'\n   make[3]: *** [generic_build2] Error 2\n   make[3]: Leaving directory `/home/xing/openjdk/hotspot/make'\n   make[2]: *** [product] Error 2\n   make[2]: Leaving directory `/home/xing/openjdk/hotspot/make'\n   make[1]: *** [hotspot-build] Error 2\n   make[1]: Leaving directory `/home/xing/openjdk'\n   make: *** [build_product_image] Error 2\n```\n\n从网上找到的解决办法是删除makefile中的 ./test_gamma,或者安装oracle jdk1.6来作为bootstrap jdk应该也可以。\n``` \n/usr/lib/jvm/java-7-openjdk-amd64//bin/java -XX:-PrintVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-LogVMOutput -Xmx512m -Xms512m -XX:PermSize=32m -XX:MaxPermSize=160m -jar /home/xing/compiled_jdk/btjars/generatecurrencydata.jar -o /home/xing/compiled_jdk/lib/currency.data.temp \\&amp;amp;amp;amp;amp;amp;amp;lt; ../../../src/share/classes/java/util/CurrencyData.properties\n      Error: time is more than 10 years from present: 1136059200000\n      java.lang.RuntimeException: time is more than 10 years from present: 1136059200000\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.makeSpecialCaseEntry(GenerateCurrencyData.java:285)\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.buildMainAndSpecialCaseTables(GenerateCurrencyData.java:225)\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.main(GenerateCurrencyData.java:154)\n      make[4]: *** [/home/xing/compiled_jdk/lib/currency.data] Error 1\n      make[4]: Leaving directory `/home/xing/openjdk/jdk/make/java/java'\n      make[3]: *** [all] Error 1\n      make[3]: Leaving directory `/home/xing/openjdk/jdk/make/java'\n      make[2]: *** [all] Error 1\n      make[2]: Leaving directory `/home/xing/openjdk/jdk/make'\n      make[1]: *** [jdk-build] Error 2\n      make[1]: Leaving directory `/home/xing/openjdk'\n      make: *** [build_product_image] Error 2\n```\n\n错误提示是说时间超过了10年，解决办法是更改源文件，将10年前的时间改到十年之内。\n\n### 编译结果\n\n```\n>>>Finished making images @ Fri Jun  2 01:43:41 CST 2017 ...\nmake[2]: Leaving directory `/home/xing/openjdk/jdk/make'\n########################################################################\n##### Leaving jdk for target(s) sanity all docs images             #####\n########################################################################\n##### Build time 00:06:34 jdk for target(s) sanity all docs images #####\n########################################################################\n\n#-- Build times ----------\nTarget all_product_build\nStart 2017-06-02 01:36:50\nEnd   2017-06-02 01:43:41\n00:00:07 corba\n00:00:04 hotspot\n00:00:02 jaxp\n00:00:02 jaxws\n00:06:34 jdk\n00:00:01 langtools\n00:06:51 TOTAL\n-------------------------\nmake[1]: Leaving directory `/home/xing/openjdk'\n\n```\n\n整个编译过程还是比较顺利的，遇到的也是些小问题~\n\n### 运行一下\n\n```bash\nxing@ubuntu-compile:~/compiled_jdk$ ~/compiled_jdk/bin/java -version\nopenjdk version \"1.7.0-internal\"\nOpenJDK Runtime Environment (build 1.7.0-internal-xing_2017_06_02_01_12-b00)\nOpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)\n\n```\n\n可以看到已经能够成功运行，并且带上了编译的时间和用户。\n\n\n\n参考书籍：《深入理解Java虚拟机 JVM高级特性与最佳实践》","source":"_posts/CompileOpenJDK.md","raw":"---\ntitle: 深入理解java虚拟机之动手编译OpenJDK 7\ncategories:\n  - Program\ntags:\n  - java\ndate: 2017-05-31 19:31:28\n---\n\n### 编译环境构建\n\n1. 操作系统\n\n   我选择的是Ubuntu Server 14.04 LTS,系统已经自带了openjdk 7，可以作为编译openjdk 7的bootstrap jdk,这里我就省略了安装bootstrap jdk的步骤了。\n\n2. 安装依赖的软件包\n   ```bash\n   $sudo apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev binutils libmotif-dev ant\n   ```\n\n3. 下载openjdk 7源码并解压\n\n   ```bash\n   $wget http://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip\n   ```\n   <!-- more -->\n4. 设置一些编译所需的环境变量\n\n   ```bash\n   export LANG=C\n   #bootstrap jdk的路径，我放在了~/jdk1.6\n   export ALT_BOOTDIR=~/jdk1.6\n   #允许编译过程中自动下载\n   export ALLOW_DOWNLOADS=true\n   #设置并行编译的线程数，我这虚拟机给了一个核，写个1\n   export HOTSPOT_BUILD_JOBS=1\n   export ALT_PARALLEL_COMPILE_JOBS=1\n   export SKIP_COMPARE_IMAGES=true\n   #使用预编译头文件\n   export USE_PRECOMPILED_HEADER=true\n   #需要编译的内容\n   export BUILD_LANGTOOLS=true\n   export BUILD_HOTSPOT=true\n   export BUILD_JDK=true\n   export BUILD_DEPLOY=false\n   #编译结果的存放路径\n   export ALT_OUTPUTDIR=~/compiled_jdk\n   unset JAVA_HOEM\n   unset CLASSPATH\n   ```\n\n### 准备就绪，开搞\n\n```bash\nxing@ubuntu-compile:~/openjdk$ make sanity \n.\n.\n.\nExternal File/Binary Locations:\n  USRJDKINSTANCES_PATH = /opt/java\n  BUILD_JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries\n    ALT_BUILD_JDK_IMPORT_PATH = \n  JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries/linux-amd64\n    ALT_JDK_IMPORT_PATH = \n  LANGTOOLS_DIST = \n    ALT_LANGTOOLS_DIST = /home/xing/compiled_jdk/langtools/dist\n  CORBA_DIST = \n    ALT_CORBA_DIST = /home/xing/compiled_jdk/corba/dist\n  JAXP_DIST = \n    ALT_JAXP_DIST = /home/xing/compiled_jdk/jaxp/dist\n  JAXWS_DIST = \n    ALT_JAXWS_DIST = /home/xing/compiled_jdk/jaxws/dist\n  HOTSPOT_DOCS_IMPORT_PATH = /NO_DOCS_DIR\n    ALT_HOTSPOT_DOCS_IMPORT_PATH = \n  HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import\n    ALT_HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import\n  HOTSPOT_SERVER_PATH = /home/xing/compiled_jdk/hotspot/import/jre/lib/amd64/server\n    ALT_HOTSPOT_SERVER_PATH = \n  CACERTS_FILE = ./../src/share/lib/security/cacerts\n    ALT_CACERTS_FILE = \n  CUPS_HEADERS_PATH = /usr/include\n    ALT_CUPS_HEADERS_PATH = \n \nOpenJDK-specific settings:\n  FREETYPE_HEADERS_PATH = /usr/include\n    ALT_FREETYPE_HEADERS_PATH = \n  FREETYPE_LIB_PATH = /usr/lib\n    ALT_FREETYPE_LIB_PATH = \n \nPrevious JDK Settings:\n  PREVIOUS_RELEASE_PATH = USING-PREVIOUS_RELEASE_IMAGE\n    ALT_PREVIOUS_RELEASE_PATH = \n  PREVIOUS_JDK_VERSION = 1.6.0\n    ALT_PREVIOUS_JDK_VERSION = \n  PREVIOUS_JDK_FILE = \n    ALT_PREVIOUS_JDK_FILE = \n  PREVIOUS_JRE_FILE = \n    ALT_PREVIOUS_JRE_FILE = \n  PREVIOUS_RELEASE_IMAGE = /usr/lib/jvm/java-7-openjdk-amd64/\n    ALT_PREVIOUS_RELEASE_IMAGE = \n\n\nSanity check passed.\n\nxing@ubuntu-compile:~/openjdk$ make\n.\n.\n.\n```\n\n### 遇到的问题​\n\n``` \ncd linux_amd64_compiler2/product &amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp; ./test_gamma\n   Using java runtime at: /usr/lib/jvm/java-7-openjdk-amd64/jre\n   Error occurred during initialization of VM\n   java.lang.NullPointerException\n\n   \tat java.util.Hashtable.put(Hashtable.java:514)\n   \tat java.lang.System.initProperties(Native Method)\n   \tat java.lang.System.initializeSystemClass(System.java:1119)\n\n   make[4]: *** [product] Error 1\n   make[4]: Leaving directory `/home/xing/compiled_jdk/hotspot/outputdir'\n   make[3]: *** [generic_build2] Error 2\n   make[3]: Leaving directory `/home/xing/openjdk/hotspot/make'\n   make[2]: *** [product] Error 2\n   make[2]: Leaving directory `/home/xing/openjdk/hotspot/make'\n   make[1]: *** [hotspot-build] Error 2\n   make[1]: Leaving directory `/home/xing/openjdk'\n   make: *** [build_product_image] Error 2\n```\n\n从网上找到的解决办法是删除makefile中的 ./test_gamma,或者安装oracle jdk1.6来作为bootstrap jdk应该也可以。\n``` \n/usr/lib/jvm/java-7-openjdk-amd64//bin/java -XX:-PrintVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-LogVMOutput -Xmx512m -Xms512m -XX:PermSize=32m -XX:MaxPermSize=160m -jar /home/xing/compiled_jdk/btjars/generatecurrencydata.jar -o /home/xing/compiled_jdk/lib/currency.data.temp \\&amp;amp;amp;amp;amp;amp;amp;lt; ../../../src/share/classes/java/util/CurrencyData.properties\n      Error: time is more than 10 years from present: 1136059200000\n      java.lang.RuntimeException: time is more than 10 years from present: 1136059200000\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.makeSpecialCaseEntry(GenerateCurrencyData.java:285)\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.buildMainAndSpecialCaseTables(GenerateCurrencyData.java:225)\n      \tat build.tools.generatecurrencydata.GenerateCurrencyData.main(GenerateCurrencyData.java:154)\n      make[4]: *** [/home/xing/compiled_jdk/lib/currency.data] Error 1\n      make[4]: Leaving directory `/home/xing/openjdk/jdk/make/java/java'\n      make[3]: *** [all] Error 1\n      make[3]: Leaving directory `/home/xing/openjdk/jdk/make/java'\n      make[2]: *** [all] Error 1\n      make[2]: Leaving directory `/home/xing/openjdk/jdk/make'\n      make[1]: *** [jdk-build] Error 2\n      make[1]: Leaving directory `/home/xing/openjdk'\n      make: *** [build_product_image] Error 2\n```\n\n错误提示是说时间超过了10年，解决办法是更改源文件，将10年前的时间改到十年之内。\n\n### 编译结果\n\n```\n>>>Finished making images @ Fri Jun  2 01:43:41 CST 2017 ...\nmake[2]: Leaving directory `/home/xing/openjdk/jdk/make'\n########################################################################\n##### Leaving jdk for target(s) sanity all docs images             #####\n########################################################################\n##### Build time 00:06:34 jdk for target(s) sanity all docs images #####\n########################################################################\n\n#-- Build times ----------\nTarget all_product_build\nStart 2017-06-02 01:36:50\nEnd   2017-06-02 01:43:41\n00:00:07 corba\n00:00:04 hotspot\n00:00:02 jaxp\n00:00:02 jaxws\n00:06:34 jdk\n00:00:01 langtools\n00:06:51 TOTAL\n-------------------------\nmake[1]: Leaving directory `/home/xing/openjdk'\n\n```\n\n整个编译过程还是比较顺利的，遇到的也是些小问题~\n\n### 运行一下\n\n```bash\nxing@ubuntu-compile:~/compiled_jdk$ ~/compiled_jdk/bin/java -version\nopenjdk version \"1.7.0-internal\"\nOpenJDK Runtime Environment (build 1.7.0-internal-xing_2017_06_02_01_12-b00)\nOpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)\n\n```\n\n可以看到已经能够成功运行，并且带上了编译的时间和用户。\n\n\n\n参考书籍：《深入理解Java虚拟机 JVM高级特性与最佳实践》","slug":"CompileOpenJDK","published":1,"updated":"2017-10-10T03:15:07.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzg2001ggov5386r8hnq","content":"<h3 id=\"编译环境构建\"><a href=\"#编译环境构建\" class=\"headerlink\" title=\"编译环境构建\"></a>编译环境构建</h3><ol>\n<li><p>操作系统</p>\n<p>我选择的是Ubuntu Server 14.04 LTS,系统已经自带了openjdk 7，可以作为编译openjdk 7的bootstrap jdk,这里我就省略了安装bootstrap jdk的步骤了。</p>\n</li>\n<li><p>安装依赖的软件包</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev binutils libmotif-dev ant</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载openjdk 7源码并解压</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip</div></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>设置一些编译所需的环境变量</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=C</div><div class=\"line\"><span class=\"comment\">#bootstrap jdk的路径，我放在了~/jdk1.6</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALT_BOOTDIR=~/jdk1.6</div><div class=\"line\"><span class=\"comment\">#允许编译过程中自动下载</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALLOW_DOWNLOADS=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#设置并行编译的线程数，我这虚拟机给了一个核，写个1</span></div><div class=\"line\"><span class=\"built_in\">export</span> HOTSPOT_BUILD_JOBS=1</div><div class=\"line\"><span class=\"built_in\">export</span> ALT_PARALLEL_COMPILE_JOBS=1</div><div class=\"line\"><span class=\"built_in\">export</span> SKIP_COMPARE_IMAGES=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#使用预编译头文件</span></div><div class=\"line\"><span class=\"built_in\">export</span> USE_PRECOMPILED_HEADER=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#需要编译的内容</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_LANGTOOLS=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_HOTSPOT=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_JDK=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_DEPLOY=<span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\">#编译结果的存放路径</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALT_OUTPUTDIR=~/compiled_jdk</div><div class=\"line\"><span class=\"built_in\">unset</span> JAVA_HOEM</div><div class=\"line\"><span class=\"built_in\">unset</span> CLASSPATH</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"准备就绪，开搞\"><a href=\"#准备就绪，开搞\" class=\"headerlink\" title=\"准备就绪，开搞\"></a>准备就绪，开搞</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~/openjdk$ make sanity </div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">External File/Binary Locations:</div><div class=\"line\">  USRJDKINSTANCES_PATH = /opt/java</div><div class=\"line\">  BUILD_JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries</div><div class=\"line\">    ALT_BUILD_JDK_IMPORT_PATH = </div><div class=\"line\">  JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries/linux-amd64</div><div class=\"line\">    ALT_JDK_IMPORT_PATH = </div><div class=\"line\">  LANGTOOLS_DIST = </div><div class=\"line\">    ALT_LANGTOOLS_DIST = /home/xing/compiled_jdk/langtools/dist</div><div class=\"line\">  CORBA_DIST = </div><div class=\"line\">    ALT_CORBA_DIST = /home/xing/compiled_jdk/corba/dist</div><div class=\"line\">  JAXP_DIST = </div><div class=\"line\">    ALT_JAXP_DIST = /home/xing/compiled_jdk/jaxp/dist</div><div class=\"line\">  JAXWS_DIST = </div><div class=\"line\">    ALT_JAXWS_DIST = /home/xing/compiled_jdk/jaxws/dist</div><div class=\"line\">  HOTSPOT_DOCS_IMPORT_PATH = /NO_DOCS_DIR</div><div class=\"line\">    ALT_HOTSPOT_DOCS_IMPORT_PATH = </div><div class=\"line\">  HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import</div><div class=\"line\">    ALT_HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import</div><div class=\"line\">  HOTSPOT_SERVER_PATH = /home/xing/compiled_jdk/hotspot/import/jre/lib/amd64/server</div><div class=\"line\">    ALT_HOTSPOT_SERVER_PATH = </div><div class=\"line\">  CACERTS_FILE = ./../src/share/lib/security/cacerts</div><div class=\"line\">    ALT_CACERTS_FILE = </div><div class=\"line\">  CUPS_HEADERS_PATH = /usr/include</div><div class=\"line\">    ALT_CUPS_HEADERS_PATH = </div><div class=\"line\"> </div><div class=\"line\">OpenJDK-specific settings:</div><div class=\"line\">  FREETYPE_HEADERS_PATH = /usr/include</div><div class=\"line\">    ALT_FREETYPE_HEADERS_PATH = </div><div class=\"line\">  FREETYPE_LIB_PATH = /usr/lib</div><div class=\"line\">    ALT_FREETYPE_LIB_PATH = </div><div class=\"line\"> </div><div class=\"line\">Previous JDK Settings:</div><div class=\"line\">  PREVIOUS_RELEASE_PATH = USING-PREVIOUS_RELEASE_IMAGE</div><div class=\"line\">    ALT_PREVIOUS_RELEASE_PATH = </div><div class=\"line\">  PREVIOUS_JDK_VERSION = 1.6.0</div><div class=\"line\">    ALT_PREVIOUS_JDK_VERSION = </div><div class=\"line\">  PREVIOUS_JDK_FILE = </div><div class=\"line\">    ALT_PREVIOUS_JDK_FILE = </div><div class=\"line\">  PREVIOUS_JRE_FILE = </div><div class=\"line\">    ALT_PREVIOUS_JRE_FILE = </div><div class=\"line\">  PREVIOUS_RELEASE_IMAGE = /usr/lib/jvm/java-7-openjdk-amd64/</div><div class=\"line\">    ALT_PREVIOUS_RELEASE_IMAGE = </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Sanity check passed.</div><div class=\"line\"></div><div class=\"line\">xing@ubuntu-compile:~/openjdk$ make</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n<h3 id=\"遇到的问题​\"><a href=\"#遇到的问题​\" class=\"headerlink\" title=\"遇到的问题​\"></a>遇到的问题​</h3><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd linux_amd64_compiler2/product &amp;amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp;amp; ./test_gamma</div><div class=\"line\">   Using java runtime at: /usr/lib/jvm/java-7-openjdk-amd64/jre</div><div class=\"line\">   Error occurred during initialization of VM</div><div class=\"line\">   java.lang.NullPointerException</div><div class=\"line\"></div><div class=\"line\">   \tat java.util.Hashtable.put(Hashtable.java:514)</div><div class=\"line\">   \tat java.lang.System.initProperties(Native Method)</div><div class=\"line\">   \tat java.lang.System.initializeSystemClass(System.java:1119)</div><div class=\"line\"></div><div class=\"line\">   make[4]: *** [product] Error 1</div><div class=\"line\">   make[4]: Leaving directory `/home/xing/compiled_jdk/hotspot/outputdir&apos;</div><div class=\"line\">   make[3]: *** [generic_build2] Error 2</div><div class=\"line\">   make[3]: Leaving directory `/home/xing/openjdk/hotspot/make&apos;</div><div class=\"line\">   make[2]: *** [product] Error 2</div><div class=\"line\">   make[2]: Leaving directory `/home/xing/openjdk/hotspot/make&apos;</div><div class=\"line\">   make[1]: *** [hotspot-build] Error 2</div><div class=\"line\">   make[1]: Leaving directory `/home/xing/openjdk&apos;</div><div class=\"line\">   make: *** [build_product_image] Error 2</div></pre></td></tr></table></figure>\n<p>从网上找到的解决办法是删除makefile中的 ./test_gamma,或者安装oracle jdk1.6来作为bootstrap jdk应该也可以。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/lib/jvm/java-7-openjdk-amd64//bin/java -XX:-PrintVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-LogVMOutput -Xmx512m -Xms512m -XX:PermSize=32m -XX:MaxPermSize=160m -jar /home/xing/compiled_jdk/btjars/generatecurrencydata.jar -o /home/xing/compiled_jdk/lib/currency.data.temp \\&amp;amp;amp;amp;amp;amp;amp;amp;lt; ../../../src/share/classes/java/util/CurrencyData.properties</div><div class=\"line\">      Error: time is more than 10 years from present: 1136059200000</div><div class=\"line\">      java.lang.RuntimeException: time is more than 10 years from present: 1136059200000</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.makeSpecialCaseEntry(GenerateCurrencyData.java:285)</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.buildMainAndSpecialCaseTables(GenerateCurrencyData.java:225)</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.main(GenerateCurrencyData.java:154)</div><div class=\"line\">      make[4]: *** [/home/xing/compiled_jdk/lib/currency.data] Error 1</div><div class=\"line\">      make[4]: Leaving directory `/home/xing/openjdk/jdk/make/java/java&apos;</div><div class=\"line\">      make[3]: *** [all] Error 1</div><div class=\"line\">      make[3]: Leaving directory `/home/xing/openjdk/jdk/make/java&apos;</div><div class=\"line\">      make[2]: *** [all] Error 1</div><div class=\"line\">      make[2]: Leaving directory `/home/xing/openjdk/jdk/make&apos;</div><div class=\"line\">      make[1]: *** [jdk-build] Error 2</div><div class=\"line\">      make[1]: Leaving directory `/home/xing/openjdk&apos;</div><div class=\"line\">      make: *** [build_product_image] Error 2</div></pre></td></tr></table></figure></p>\n<p>错误提示是说时间超过了10年，解决办法是更改源文件，将10年前的时间改到十年之内。</p>\n<h3 id=\"编译结果\"><a href=\"#编译结果\" class=\"headerlink\" title=\"编译结果\"></a>编译结果</h3><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;Finished making images @ Fri Jun  2 01:43:41 CST 2017 ...</div><div class=\"line\">make[2]: Leaving directory `/home/xing/openjdk/jdk/make&apos;</div><div class=\"line\">########################################################################</div><div class=\"line\">##### Leaving jdk for target(s) sanity all docs images             #####</div><div class=\"line\">########################################################################</div><div class=\"line\">##### Build time 00:06:34 jdk for target(s) sanity all docs images #####</div><div class=\"line\">########################################################################</div><div class=\"line\"></div><div class=\"line\">#-- Build times ----------</div><div class=\"line\">Target all_product_build</div><div class=\"line\">Start 2017-06-02 01:36:50</div><div class=\"line\">End   2017-06-02 01:43:41</div><div class=\"line\">00:00:07 corba</div><div class=\"line\">00:00:04 hotspot</div><div class=\"line\">00:00:02 jaxp</div><div class=\"line\">00:00:02 jaxws</div><div class=\"line\">00:06:34 jdk</div><div class=\"line\">00:00:01 langtools</div><div class=\"line\">00:06:51 TOTAL</div><div class=\"line\">-------------------------</div><div class=\"line\">make[1]: Leaving directory `/home/xing/openjdk&apos;</div></pre></td></tr></table></figure>\n<p>整个编译过程还是比较顺利的，遇到的也是些小问题~</p>\n<h3 id=\"运行一下\"><a href=\"#运行一下\" class=\"headerlink\" title=\"运行一下\"></a>运行一下</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~/compiled_jdk$ ~/compiled_jdk/bin/java -version</div><div class=\"line\">openjdk version <span class=\"string\">\"1.7.0-internal\"</span></div><div class=\"line\">OpenJDK Runtime Environment (build 1.7.0-internal-xing_2017_06_02_01_12-b00)</div><div class=\"line\">OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)</div></pre></td></tr></table></figure>\n<p>可以看到已经能够成功运行，并且带上了编译的时间和用户。</p>\n<p>参考书籍：《深入理解Java虚拟机 JVM高级特性与最佳实践》</p>\n","excerpt":"<h3 id=\"编译环境构建\"><a href=\"#编译环境构建\" class=\"headerlink\" title=\"编译环境构建\"></a>编译环境构建</h3><ol>\n<li><p>操作系统</p>\n<p>我选择的是Ubuntu Server 14.04 LTS,系统已经自带了openjdk 7，可以作为编译openjdk 7的bootstrap jdk,这里我就省略了安装bootstrap jdk的步骤了。</p>\n</li>\n<li><p>安装依赖的软件包</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$sudo</span> apt-get install build-essential gawk m4 libasound2-dev libcups2-dev libxrender-dev xorg-dev xutils-dev binutils libmotif-dev ant</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载openjdk 7源码并解压</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$wget</span> http://download.java.net/openjdk/jdk7u75/ri/openjdk-7u75-src-b13-18_dec_2014.zip</div></pre></td></tr></table></figure>","more":"</li>\n<li><p>设置一些编译所需的环境变量</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> LANG=C</div><div class=\"line\"><span class=\"comment\">#bootstrap jdk的路径，我放在了~/jdk1.6</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALT_BOOTDIR=~/jdk1.6</div><div class=\"line\"><span class=\"comment\">#允许编译过程中自动下载</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALLOW_DOWNLOADS=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#设置并行编译的线程数，我这虚拟机给了一个核，写个1</span></div><div class=\"line\"><span class=\"built_in\">export</span> HOTSPOT_BUILD_JOBS=1</div><div class=\"line\"><span class=\"built_in\">export</span> ALT_PARALLEL_COMPILE_JOBS=1</div><div class=\"line\"><span class=\"built_in\">export</span> SKIP_COMPARE_IMAGES=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#使用预编译头文件</span></div><div class=\"line\"><span class=\"built_in\">export</span> USE_PRECOMPILED_HEADER=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\">#需要编译的内容</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_LANGTOOLS=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_HOTSPOT=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_JDK=<span class=\"literal\">true</span></div><div class=\"line\"><span class=\"built_in\">export</span> BUILD_DEPLOY=<span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\">#编译结果的存放路径</span></div><div class=\"line\"><span class=\"built_in\">export</span> ALT_OUTPUTDIR=~/compiled_jdk</div><div class=\"line\"><span class=\"built_in\">unset</span> JAVA_HOEM</div><div class=\"line\"><span class=\"built_in\">unset</span> CLASSPATH</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"准备就绪，开搞\"><a href=\"#准备就绪，开搞\" class=\"headerlink\" title=\"准备就绪，开搞\"></a>准备就绪，开搞</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~/openjdk$ make sanity </div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">External File/Binary Locations:</div><div class=\"line\">  USRJDKINSTANCES_PATH = /opt/java</div><div class=\"line\">  BUILD_JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries</div><div class=\"line\">    ALT_BUILD_JDK_IMPORT_PATH = </div><div class=\"line\">  JDK_IMPORT_PATH = /NOT-SET/re/jdk/1.7.0/promoted/latest/binaries/linux-amd64</div><div class=\"line\">    ALT_JDK_IMPORT_PATH = </div><div class=\"line\">  LANGTOOLS_DIST = </div><div class=\"line\">    ALT_LANGTOOLS_DIST = /home/xing/compiled_jdk/langtools/dist</div><div class=\"line\">  CORBA_DIST = </div><div class=\"line\">    ALT_CORBA_DIST = /home/xing/compiled_jdk/corba/dist</div><div class=\"line\">  JAXP_DIST = </div><div class=\"line\">    ALT_JAXP_DIST = /home/xing/compiled_jdk/jaxp/dist</div><div class=\"line\">  JAXWS_DIST = </div><div class=\"line\">    ALT_JAXWS_DIST = /home/xing/compiled_jdk/jaxws/dist</div><div class=\"line\">  HOTSPOT_DOCS_IMPORT_PATH = /NO_DOCS_DIR</div><div class=\"line\">    ALT_HOTSPOT_DOCS_IMPORT_PATH = </div><div class=\"line\">  HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import</div><div class=\"line\">    ALT_HOTSPOT_IMPORT_PATH = /home/xing/compiled_jdk/hotspot/import</div><div class=\"line\">  HOTSPOT_SERVER_PATH = /home/xing/compiled_jdk/hotspot/import/jre/lib/amd64/server</div><div class=\"line\">    ALT_HOTSPOT_SERVER_PATH = </div><div class=\"line\">  CACERTS_FILE = ./../src/share/lib/security/cacerts</div><div class=\"line\">    ALT_CACERTS_FILE = </div><div class=\"line\">  CUPS_HEADERS_PATH = /usr/include</div><div class=\"line\">    ALT_CUPS_HEADERS_PATH = </div><div class=\"line\"> </div><div class=\"line\">OpenJDK-specific settings:</div><div class=\"line\">  FREETYPE_HEADERS_PATH = /usr/include</div><div class=\"line\">    ALT_FREETYPE_HEADERS_PATH = </div><div class=\"line\">  FREETYPE_LIB_PATH = /usr/lib</div><div class=\"line\">    ALT_FREETYPE_LIB_PATH = </div><div class=\"line\"> </div><div class=\"line\">Previous JDK Settings:</div><div class=\"line\">  PREVIOUS_RELEASE_PATH = USING-PREVIOUS_RELEASE_IMAGE</div><div class=\"line\">    ALT_PREVIOUS_RELEASE_PATH = </div><div class=\"line\">  PREVIOUS_JDK_VERSION = 1.6.0</div><div class=\"line\">    ALT_PREVIOUS_JDK_VERSION = </div><div class=\"line\">  PREVIOUS_JDK_FILE = </div><div class=\"line\">    ALT_PREVIOUS_JDK_FILE = </div><div class=\"line\">  PREVIOUS_JRE_FILE = </div><div class=\"line\">    ALT_PREVIOUS_JRE_FILE = </div><div class=\"line\">  PREVIOUS_RELEASE_IMAGE = /usr/lib/jvm/java-7-openjdk-amd64/</div><div class=\"line\">    ALT_PREVIOUS_RELEASE_IMAGE = </div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Sanity check passed.</div><div class=\"line\"></div><div class=\"line\">xing@ubuntu-compile:~/openjdk$ make</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n<h3 id=\"遇到的问题​\"><a href=\"#遇到的问题​\" class=\"headerlink\" title=\"遇到的问题​\"></a>遇到的问题​</h3><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd linux_amd64_compiler2/product &amp;amp;amp;amp;amp;amp;amp;amp;&amp;amp;amp;amp;amp;amp;amp;amp; ./test_gamma</div><div class=\"line\">   Using java runtime at: /usr/lib/jvm/java-7-openjdk-amd64/jre</div><div class=\"line\">   Error occurred during initialization of VM</div><div class=\"line\">   java.lang.NullPointerException</div><div class=\"line\"></div><div class=\"line\">   \tat java.util.Hashtable.put(Hashtable.java:514)</div><div class=\"line\">   \tat java.lang.System.initProperties(Native Method)</div><div class=\"line\">   \tat java.lang.System.initializeSystemClass(System.java:1119)</div><div class=\"line\"></div><div class=\"line\">   make[4]: *** [product] Error 1</div><div class=\"line\">   make[4]: Leaving directory `/home/xing/compiled_jdk/hotspot/outputdir&apos;</div><div class=\"line\">   make[3]: *** [generic_build2] Error 2</div><div class=\"line\">   make[3]: Leaving directory `/home/xing/openjdk/hotspot/make&apos;</div><div class=\"line\">   make[2]: *** [product] Error 2</div><div class=\"line\">   make[2]: Leaving directory `/home/xing/openjdk/hotspot/make&apos;</div><div class=\"line\">   make[1]: *** [hotspot-build] Error 2</div><div class=\"line\">   make[1]: Leaving directory `/home/xing/openjdk&apos;</div><div class=\"line\">   make: *** [build_product_image] Error 2</div></pre></td></tr></table></figure>\n<p>从网上找到的解决办法是删除makefile中的 ./test_gamma,或者安装oracle jdk1.6来作为bootstrap jdk应该也可以。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/lib/jvm/java-7-openjdk-amd64//bin/java -XX:-PrintVMOptions -XX:+UnlockDiagnosticVMOptions -XX:-LogVMOutput -Xmx512m -Xms512m -XX:PermSize=32m -XX:MaxPermSize=160m -jar /home/xing/compiled_jdk/btjars/generatecurrencydata.jar -o /home/xing/compiled_jdk/lib/currency.data.temp \\&amp;amp;amp;amp;amp;amp;amp;amp;lt; ../../../src/share/classes/java/util/CurrencyData.properties</div><div class=\"line\">      Error: time is more than 10 years from present: 1136059200000</div><div class=\"line\">      java.lang.RuntimeException: time is more than 10 years from present: 1136059200000</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.makeSpecialCaseEntry(GenerateCurrencyData.java:285)</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.buildMainAndSpecialCaseTables(GenerateCurrencyData.java:225)</div><div class=\"line\">      \tat build.tools.generatecurrencydata.GenerateCurrencyData.main(GenerateCurrencyData.java:154)</div><div class=\"line\">      make[4]: *** [/home/xing/compiled_jdk/lib/currency.data] Error 1</div><div class=\"line\">      make[4]: Leaving directory `/home/xing/openjdk/jdk/make/java/java&apos;</div><div class=\"line\">      make[3]: *** [all] Error 1</div><div class=\"line\">      make[3]: Leaving directory `/home/xing/openjdk/jdk/make/java&apos;</div><div class=\"line\">      make[2]: *** [all] Error 1</div><div class=\"line\">      make[2]: Leaving directory `/home/xing/openjdk/jdk/make&apos;</div><div class=\"line\">      make[1]: *** [jdk-build] Error 2</div><div class=\"line\">      make[1]: Leaving directory `/home/xing/openjdk&apos;</div><div class=\"line\">      make: *** [build_product_image] Error 2</div></pre></td></tr></table></figure></p>\n<p>错误提示是说时间超过了10年，解决办法是更改源文件，将10年前的时间改到十年之内。</p>\n<h3 id=\"编译结果\"><a href=\"#编译结果\" class=\"headerlink\" title=\"编译结果\"></a>编译结果</h3><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;Finished making images @ Fri Jun  2 01:43:41 CST 2017 ...</div><div class=\"line\">make[2]: Leaving directory `/home/xing/openjdk/jdk/make&apos;</div><div class=\"line\">########################################################################</div><div class=\"line\">##### Leaving jdk for target(s) sanity all docs images             #####</div><div class=\"line\">########################################################################</div><div class=\"line\">##### Build time 00:06:34 jdk for target(s) sanity all docs images #####</div><div class=\"line\">########################################################################</div><div class=\"line\"></div><div class=\"line\">#-- Build times ----------</div><div class=\"line\">Target all_product_build</div><div class=\"line\">Start 2017-06-02 01:36:50</div><div class=\"line\">End   2017-06-02 01:43:41</div><div class=\"line\">00:00:07 corba</div><div class=\"line\">00:00:04 hotspot</div><div class=\"line\">00:00:02 jaxp</div><div class=\"line\">00:00:02 jaxws</div><div class=\"line\">00:06:34 jdk</div><div class=\"line\">00:00:01 langtools</div><div class=\"line\">00:06:51 TOTAL</div><div class=\"line\">-------------------------</div><div class=\"line\">make[1]: Leaving directory `/home/xing/openjdk&apos;</div></pre></td></tr></table></figure>\n<p>整个编译过程还是比较顺利的，遇到的也是些小问题~</p>\n<h3 id=\"运行一下\"><a href=\"#运行一下\" class=\"headerlink\" title=\"运行一下\"></a>运行一下</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~/compiled_jdk$ ~/compiled_jdk/bin/java -version</div><div class=\"line\">openjdk version <span class=\"string\">\"1.7.0-internal\"</span></div><div class=\"line\">OpenJDK Runtime Environment (build 1.7.0-internal-xing_2017_06_02_01_12-b00)</div><div class=\"line\">OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)</div></pre></td></tr></table></figure>\n<p>可以看到已经能够成功运行，并且带上了编译的时间和用户。</p>\n<p>参考书籍：《深入理解Java虚拟机 JVM高级特性与最佳实践》</p>"},{"title":"Django快速上手笔记之安装Django","date":"2017-10-02T04:33:17.000Z","_content":"\n### Django简介\n\nDjango是一款开源的web框架，由python编写。采用了MVC的框架模式。Django最初是被用来开发用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站（CMS）,于2005年以BSD许可证发布。\n\n<!--more -->\n\nDjango的设计之美：\n\n- 对象关系映射（ORM）:以Python类形式定义数据模型，ORM将模型和关系数据库连接起来，得到一个十分容易使用的数据库API,同时在Django中也可以使用原生SQL语句。\n- URL路由：使用正则表达式匹配URL,可以设计任意的URL，没有框架的特定限定，十分灵活。\n- 模版系统：使用Django强大而可扩展的模版语言，可以分隔设计、内容和Python代码。具有可继承性。\n- 表单处理：可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例生成对应的表单。\n- Cache系统：可以挂载内存缓冲或其它的框架实现超级缓冲。\n- 会话（session），用户登录与权限检查，快速开发用户会话功能。\n- 国际化：内置国际化系统，方便开发出多种语言的网站。\n- 自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个Admin site，类似于内容管理系统。\n\n总的来说，Django是一个大而全的框架，你所需要的它都有。那么怎么来使用它呢？怎么去一步一步的学习使用它呢？从本篇博文开始，我就要开始探索Django框架了。\n### 安装Django\n首先从安装开始，安装方式有两种：使用pip安装或源码安装。\npip安装很简单，在配置好python环境后，在命令提示符下或终端输入pip install django就行了。下面是我在自己的windowns电脑上的安装记录：\n```powershell\nPS C:\\Users\\star-chen> pip install django\nCollecting django\n  Downloading Django-1.11.5-py2.py3-none-any.whl (6.9MB)\n    100% |████████████████████████████████| 7.0MB 149kB/s\nCollecting pytz (from django)\n  Downloading pytz-2017.2-py2.py3-none-any.whl (484kB)\n    100% |████████████████████████████████| 491kB 377kB/s\nInstalling collected packages: pytz, django\nSuccessfully installed django-1.11.5 pytz-2017.2\nYou are using pip version 8.1.2, however version 9.0.1 is available.\nYou should consider upgrading via the 'python -m pip install --upgrade pip' command.\n```\n\n源码安装：\n\n从github上的Django项目上下载相关的release压缩包 \nhttps://github.com/django/django/releases，\n选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python setup.py install即可。\n\n```powershell\nPS F:\\一些源码\\django-1.11.5> python .\\setup.py install\n```\n\n为了日后使用方便，可以将Django的相关可执行文件添加到系统的可执行目录。\n\n```\nC:\\Python27\\Scripts\n```\n\n在我的机器上，没进行添加环境变量也可以正常调用django命令了，就省去这个步骤了。\n\n```pow\nPS C:\\Users\\star-chen> django-admin\n\nType 'django-admin-script.py help <subcommand>' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\n```\n\n\n\nOK,安装过程就是这么简单，接下来就是实际体验时刻了，下篇博文见。","source":"_posts/Django-install.md","raw":"---\ntitle: Django快速上手笔记之安装Django\ncategories:\n  - Program\ntags:\n  - python web Django\ndate: 2017-10-02 12:33:17\n---\n\n### Django简介\n\nDjango是一款开源的web框架，由python编写。采用了MVC的框架模式。Django最初是被用来开发用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站（CMS）,于2005年以BSD许可证发布。\n\n<!--more -->\n\nDjango的设计之美：\n\n- 对象关系映射（ORM）:以Python类形式定义数据模型，ORM将模型和关系数据库连接起来，得到一个十分容易使用的数据库API,同时在Django中也可以使用原生SQL语句。\n- URL路由：使用正则表达式匹配URL,可以设计任意的URL，没有框架的特定限定，十分灵活。\n- 模版系统：使用Django强大而可扩展的模版语言，可以分隔设计、内容和Python代码。具有可继承性。\n- 表单处理：可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例生成对应的表单。\n- Cache系统：可以挂载内存缓冲或其它的框架实现超级缓冲。\n- 会话（session），用户登录与权限检查，快速开发用户会话功能。\n- 国际化：内置国际化系统，方便开发出多种语言的网站。\n- 自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个Admin site，类似于内容管理系统。\n\n总的来说，Django是一个大而全的框架，你所需要的它都有。那么怎么来使用它呢？怎么去一步一步的学习使用它呢？从本篇博文开始，我就要开始探索Django框架了。\n### 安装Django\n首先从安装开始，安装方式有两种：使用pip安装或源码安装。\npip安装很简单，在配置好python环境后，在命令提示符下或终端输入pip install django就行了。下面是我在自己的windowns电脑上的安装记录：\n```powershell\nPS C:\\Users\\star-chen> pip install django\nCollecting django\n  Downloading Django-1.11.5-py2.py3-none-any.whl (6.9MB)\n    100% |████████████████████████████████| 7.0MB 149kB/s\nCollecting pytz (from django)\n  Downloading pytz-2017.2-py2.py3-none-any.whl (484kB)\n    100% |████████████████████████████████| 491kB 377kB/s\nInstalling collected packages: pytz, django\nSuccessfully installed django-1.11.5 pytz-2017.2\nYou are using pip version 8.1.2, however version 9.0.1 is available.\nYou should consider upgrading via the 'python -m pip install --upgrade pip' command.\n```\n\n源码安装：\n\n从github上的Django项目上下载相关的release压缩包 \nhttps://github.com/django/django/releases，\n选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python setup.py install即可。\n\n```powershell\nPS F:\\一些源码\\django-1.11.5> python .\\setup.py install\n```\n\n为了日后使用方便，可以将Django的相关可执行文件添加到系统的可执行目录。\n\n```\nC:\\Python27\\Scripts\n```\n\n在我的机器上，没进行添加环境变量也可以正常调用django命令了，就省去这个步骤了。\n\n```pow\nPS C:\\Users\\star-chen> django-admin\n\nType 'django-admin-script.py help <subcommand>' for help on a specific subcommand.\n\nAvailable subcommands:\n\n[django]\n    check\n    compilemessages\n    createcachetable\n    dbshell\n    diffsettings\n    dumpdata\n    flush\n    inspectdb\n    loaddata\n    makemessages\n    makemigrations\n    migrate\n    runserver\n    sendtestemail\n    shell\n    showmigrations\n    sqlflush\n    sqlmigrate\n    sqlsequencereset\n    squashmigrations\n    startapp\n    startproject\n    test\n    testserver\n```\n\n\n\nOK,安装过程就是这么简单，接下来就是实际体验时刻了，下篇博文见。","slug":"Django-install","published":1,"updated":"2017-10-10T03:15:07.990Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzg6001igov5lyk6sxps","content":"<h3 id=\"Django简介\"><a href=\"#Django简介\" class=\"headerlink\" title=\"Django简介\"></a>Django简介</h3><p>Django是一款开源的web框架，由python编写。采用了MVC的框架模式。Django最初是被用来开发用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站（CMS）,于2005年以BSD许可证发布。</p>\n<a id=\"more\"></a>\n<p>Django的设计之美：</p>\n<ul>\n<li>对象关系映射（ORM）:以Python类形式定义数据模型，ORM将模型和关系数据库连接起来，得到一个十分容易使用的数据库API,同时在Django中也可以使用原生SQL语句。</li>\n<li>URL路由：使用正则表达式匹配URL,可以设计任意的URL，没有框架的特定限定，十分灵活。</li>\n<li>模版系统：使用Django强大而可扩展的模版语言，可以分隔设计、内容和Python代码。具有可继承性。</li>\n<li>表单处理：可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例生成对应的表单。</li>\n<li>Cache系统：可以挂载内存缓冲或其它的框架实现超级缓冲。</li>\n<li>会话（session），用户登录与权限检查，快速开发用户会话功能。</li>\n<li>国际化：内置国际化系统，方便开发出多种语言的网站。</li>\n<li>自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个Admin site，类似于内容管理系统。</li>\n</ul>\n<p>总的来说，Django是一个大而全的框架，你所需要的它都有。那么怎么来使用它呢？怎么去一步一步的学习使用它呢？从本篇博文开始，我就要开始探索Django框架了。</p>\n<h3 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h3><p>首先从安装开始，安装方式有两种：使用pip安装或源码安装。<br>pip安装很简单，在配置好python环境后，在命令提示符下或终端输入pip install django就行了。下面是我在自己的windowns电脑上的安装记录：<br><figure class=\"highlight powershell\" data-lang=\" powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\Users\\star-chen&gt; pip install django</div><div class=\"line\">Collecting django</div><div class=\"line\">  Downloading Django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span>-py2.py3-none-any.whl (<span class=\"number\">6.9</span>MB)</div><div class=\"line\">    <span class=\"number\">100</span>% |████████████████████████████████| <span class=\"number\">7.0</span>MB <span class=\"number\">149</span>kB/s</div><div class=\"line\">Collecting pytz (from django)</div><div class=\"line\">  Downloading pytz-<span class=\"number\">2017.2</span>-py2.py3-none-any.whl (<span class=\"number\">484</span>kB)</div><div class=\"line\">    <span class=\"number\">100</span>% |████████████████████████████████| <span class=\"number\">491</span>kB <span class=\"number\">377</span>kB/s</div><div class=\"line\">Installing collected packages: pytz, django</div><div class=\"line\">Successfully installed django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span> pytz-<span class=\"number\">2017.2</span></div><div class=\"line\">You are using pip version <span class=\"number\">8.1</span>.<span class=\"number\">2</span>, however version <span class=\"number\">9.0</span>.<span class=\"number\">1</span> is available.</div><div class=\"line\">You should consider upgrading via the <span class=\"string\">'python -m pip install --upgrade pip'</span> command.</div></pre></td></tr></table></figure></p>\n<p>源码安装：</p>\n<p>从github上的Django项目上下载相关的release压缩包<br><a href=\"https://github.com/django/django/releases，\" target=\"_blank\" rel=\"external\">https://github.com/django/django/releases，</a><br>选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python setup.py install即可。</p>\n<figure class=\"highlight powershell\" data-lang=\" powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS F:\\一些源码\\django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span>&gt; python .\\setup.py install</div></pre></td></tr></table></figure>\n<p>为了日后使用方便，可以将Django的相关可执行文件添加到系统的可执行目录。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Python27\\Scripts</div></pre></td></tr></table></figure>\n<p>在我的机器上，没进行添加环境变量也可以正常调用django命令了，就省去这个步骤了。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\Users\\star-chen&gt; django-admin</div><div class=\"line\"></div><div class=\"line\">Type &apos;django-admin-script.py help &lt;subcommand&gt;&apos; for help on a specific subcommand.</div><div class=\"line\"></div><div class=\"line\">Available subcommands:</div><div class=\"line\"></div><div class=\"line\">[django]</div><div class=\"line\">    check</div><div class=\"line\">    compilemessages</div><div class=\"line\">    createcachetable</div><div class=\"line\">    dbshell</div><div class=\"line\">    diffsettings</div><div class=\"line\">    dumpdata</div><div class=\"line\">    flush</div><div class=\"line\">    inspectdb</div><div class=\"line\">    loaddata</div><div class=\"line\">    makemessages</div><div class=\"line\">    makemigrations</div><div class=\"line\">    migrate</div><div class=\"line\">    runserver</div><div class=\"line\">    sendtestemail</div><div class=\"line\">    shell</div><div class=\"line\">    showmigrations</div><div class=\"line\">    sqlflush</div><div class=\"line\">    sqlmigrate</div><div class=\"line\">    sqlsequencereset</div><div class=\"line\">    squashmigrations</div><div class=\"line\">    startapp</div><div class=\"line\">    startproject</div><div class=\"line\">    test</div><div class=\"line\">    testserver</div></pre></td></tr></table></figure>\n<p>OK,安装过程就是这么简单，接下来就是实际体验时刻了，下篇博文见。</p>\n","excerpt":"<h3 id=\"Django简介\"><a href=\"#Django简介\" class=\"headerlink\" title=\"Django简介\"></a>Django简介</h3><p>Django是一款开源的web框架，由python编写。采用了MVC的框架模式。Django最初是被用来开发用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站（CMS）,于2005年以BSD许可证发布。</p>","more":"<p>Django的设计之美：</p>\n<ul>\n<li>对象关系映射（ORM）:以Python类形式定义数据模型，ORM将模型和关系数据库连接起来，得到一个十分容易使用的数据库API,同时在Django中也可以使用原生SQL语句。</li>\n<li>URL路由：使用正则表达式匹配URL,可以设计任意的URL，没有框架的特定限定，十分灵活。</li>\n<li>模版系统：使用Django强大而可扩展的模版语言，可以分隔设计、内容和Python代码。具有可继承性。</li>\n<li>表单处理：可以方便的生成各种表单模型，实现表单的有效性检验。可以方便的从你定义的模型实例生成对应的表单。</li>\n<li>Cache系统：可以挂载内存缓冲或其它的框架实现超级缓冲。</li>\n<li>会话（session），用户登录与权限检查，快速开发用户会话功能。</li>\n<li>国际化：内置国际化系统，方便开发出多种语言的网站。</li>\n<li>自动化的管理界面：不需要你花大量的工作来创建人员管理和更新内容。Django自带一个Admin site，类似于内容管理系统。</li>\n</ul>\n<p>总的来说，Django是一个大而全的框架，你所需要的它都有。那么怎么来使用它呢？怎么去一步一步的学习使用它呢？从本篇博文开始，我就要开始探索Django框架了。</p>\n<h3 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h3><p>首先从安装开始，安装方式有两种：使用pip安装或源码安装。<br>pip安装很简单，在配置好python环境后，在命令提示符下或终端输入pip install django就行了。下面是我在自己的windowns电脑上的安装记录：<br><figure class=\"highlight powershell\"data-lang=\" powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\Users\\star-chen&gt; pip install django</div><div class=\"line\">Collecting django</div><div class=\"line\">  Downloading Django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span>-py2.py3-none-any.whl (<span class=\"number\">6.9</span>MB)</div><div class=\"line\">    <span class=\"number\">100</span>% |████████████████████████████████| <span class=\"number\">7.0</span>MB <span class=\"number\">149</span>kB/s</div><div class=\"line\">Collecting pytz (from django)</div><div class=\"line\">  Downloading pytz-<span class=\"number\">2017.2</span>-py2.py3-none-any.whl (<span class=\"number\">484</span>kB)</div><div class=\"line\">    <span class=\"number\">100</span>% |████████████████████████████████| <span class=\"number\">491</span>kB <span class=\"number\">377</span>kB/s</div><div class=\"line\">Installing collected packages: pytz, django</div><div class=\"line\">Successfully installed django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span> pytz-<span class=\"number\">2017.2</span></div><div class=\"line\">You are using pip version <span class=\"number\">8.1</span>.<span class=\"number\">2</span>, however version <span class=\"number\">9.0</span>.<span class=\"number\">1</span> is available.</div><div class=\"line\">You should consider upgrading via the <span class=\"string\">'python -m pip install --upgrade pip'</span> command.</div></pre></td></tr></table></figure></p>\n<p>源码安装：</p>\n<p>从github上的Django项目上下载相关的release压缩包<br><a href=\"https://github.com/django/django/releases，\">https://github.com/django/django/releases，</a><br>选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python选择你所需要的版本。这里我下载1.11.5版本的zip格式压缩包。将下载到的压缩包解压到任何目录，在该目录按住shift键再鼠标右击，打开命令提示符，输入python setup.py install即可。</p>\n<figure class=\"highlight powershell\"data-lang=\" powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS F:\\一些源码\\django-<span class=\"number\">1.11</span>.<span class=\"number\">5</span>&gt; python .\\setup.py install</div></pre></td></tr></table></figure>\n<p>为了日后使用方便，可以将Django的相关可执行文件添加到系统的可执行目录。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Python27\\Scripts</div></pre></td></tr></table></figure>\n<p>在我的机器上，没进行添加环境变量也可以正常调用django命令了，就省去这个步骤了。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS C:\\Users\\star-chen&gt; django-admin</div><div class=\"line\"></div><div class=\"line\">Type &apos;django-admin-script.py help &lt;subcommand&gt;&apos; for help on a specific subcommand.</div><div class=\"line\"></div><div class=\"line\">Available subcommands:</div><div class=\"line\"></div><div class=\"line\">[django]</div><div class=\"line\">    check</div><div class=\"line\">    compilemessages</div><div class=\"line\">    createcachetable</div><div class=\"line\">    dbshell</div><div class=\"line\">    diffsettings</div><div class=\"line\">    dumpdata</div><div class=\"line\">    flush</div><div class=\"line\">    inspectdb</div><div class=\"line\">    loaddata</div><div class=\"line\">    makemessages</div><div class=\"line\">    makemigrations</div><div class=\"line\">    migrate</div><div class=\"line\">    runserver</div><div class=\"line\">    sendtestemail</div><div class=\"line\">    shell</div><div class=\"line\">    showmigrations</div><div class=\"line\">    sqlflush</div><div class=\"line\">    sqlmigrate</div><div class=\"line\">    sqlsequencereset</div><div class=\"line\">    squashmigrations</div><div class=\"line\">    startapp</div><div class=\"line\">    startproject</div><div class=\"line\">    test</div><div class=\"line\">    testserver</div></pre></td></tr></table></figure>\n<p>OK,安装过程就是这么简单，接下来就是实际体验时刻了，下篇博文见。</p>"},{"title":"设计模式学习之工厂模式","date":"2017-05-12T06:28:16.000Z","_content":"\n继续设计模式的学习，接下来是工厂模式。\n\n### 工厂模式所要解决的问题\n\n如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。\n\n### 工厂模式的分类\n\n1. 简单工厂\n\n2. 工厂方法模式\n\n3. 抽象工厂模式\n\n<!-- more -->\n\n接下来分别说明工厂模式的以上三种的类型的内容和它们之间的区别。\n\n#### 简单工厂\n\n最开始我们要实例化一个对象的时候是根据需要直接去new一个来用就行了，例如我要购买小米手机:\n\n```java\npublic class XiaoMi2s{\n  \n  public XiaoMi2s{\n    System.out.println(\"create Xiaomi 2s\");\n  }\n  \n  public void sell(){\n        System.out.println(\"MI2s selled You need pay 1999￥\");\n  }\n}\npublic class XiaoMi5s{\n  \n  public XiaoMi5s{\n    System.out.println(\"create Xiaomi 5s\");\n  }\n  public void sell(){\n        System.out.println(\"MI5s selled 1999￥\");\n  }\n}\n\npublic class PhoneShop{\n  Phone phone;\n  public static void main(String[] args){\n    \n    buyPhone(\"Mi2s\");\n    \n  }\n  public void buyPhone(String model){\n    if(model.equals(\"MI2s\")){\n      phone = new new XiaoMi2s();\n      phone.sell();\n    }\n    if(model.equals(\"MI5s\")){\n      phone = new new XiaoMi5s();\n      phone.sell();\n    }\n    \n  }\n}\n\n```\n\n可以看到，如果我要购买不同型号的手机，手机店需要进行很多次的判断才能拿到我想要的手机并卖给我。这项就显得十分繁琐了。\n\n简单工厂模式可以解决这个问题，把创建对象的过程放到专门的工厂中去做，像这样：\n\n```java\npublic class SimplePhoneFactory{\n  public Phone createPhone(String model){\n    \n    Phone phone = null;\n    if(model.equals(\"MI2s\")){\n      phone = new new XiaoMi2s();\n      phone.sell();\n    }\n    if(model.equals(\"MI5s\")){\n      phone = new new XiaoMi5s();\n      phone.sell();\n    }\n    return phone;\n    \n  }\n}\n```\n\n简单工厂其实并不算是一种设计模式，反而比较像是一种编程习惯。这个简单工厂为需要的对象创建不同的“产品”。简单工厂也可以被定义为一个静态的方法，这样就不需要使用创建对象的方法来实例化对象，但是这样就不能通过继承来改变创建方法的行为。\n\n","source":"_posts/Factory-Notes.md","raw":"---\ntitle: 设计模式学习之工厂模式\n\ndate: 2017-5-12 14:28:16\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 工厂模式\n---\n\n继续设计模式的学习，接下来是工厂模式。\n\n### 工厂模式所要解决的问题\n\n如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。\n\n### 工厂模式的分类\n\n1. 简单工厂\n\n2. 工厂方法模式\n\n3. 抽象工厂模式\n\n<!-- more -->\n\n接下来分别说明工厂模式的以上三种的类型的内容和它们之间的区别。\n\n#### 简单工厂\n\n最开始我们要实例化一个对象的时候是根据需要直接去new一个来用就行了，例如我要购买小米手机:\n\n```java\npublic class XiaoMi2s{\n  \n  public XiaoMi2s{\n    System.out.println(\"create Xiaomi 2s\");\n  }\n  \n  public void sell(){\n        System.out.println(\"MI2s selled You need pay 1999￥\");\n  }\n}\npublic class XiaoMi5s{\n  \n  public XiaoMi5s{\n    System.out.println(\"create Xiaomi 5s\");\n  }\n  public void sell(){\n        System.out.println(\"MI5s selled 1999￥\");\n  }\n}\n\npublic class PhoneShop{\n  Phone phone;\n  public static void main(String[] args){\n    \n    buyPhone(\"Mi2s\");\n    \n  }\n  public void buyPhone(String model){\n    if(model.equals(\"MI2s\")){\n      phone = new new XiaoMi2s();\n      phone.sell();\n    }\n    if(model.equals(\"MI5s\")){\n      phone = new new XiaoMi5s();\n      phone.sell();\n    }\n    \n  }\n}\n\n```\n\n可以看到，如果我要购买不同型号的手机，手机店需要进行很多次的判断才能拿到我想要的手机并卖给我。这项就显得十分繁琐了。\n\n简单工厂模式可以解决这个问题，把创建对象的过程放到专门的工厂中去做，像这样：\n\n```java\npublic class SimplePhoneFactory{\n  public Phone createPhone(String model){\n    \n    Phone phone = null;\n    if(model.equals(\"MI2s\")){\n      phone = new new XiaoMi2s();\n      phone.sell();\n    }\n    if(model.equals(\"MI5s\")){\n      phone = new new XiaoMi5s();\n      phone.sell();\n    }\n    return phone;\n    \n  }\n}\n```\n\n简单工厂其实并不算是一种设计模式，反而比较像是一种编程习惯。这个简单工厂为需要的对象创建不同的“产品”。简单工厂也可以被定义为一个静态的方法，这样就不需要使用创建对象的方法来实例化对象，但是这样就不能通过继承来改变创建方法的行为。\n\n","slug":"Factory-Notes","published":1,"updated":"2017-10-10T03:15:07.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzg9001lgov58cp8ctvn","content":"<p>继续设计模式的学习，接下来是工厂模式。</p>\n<h3 id=\"工厂模式所要解决的问题\"><a href=\"#工厂模式所要解决的问题\" class=\"headerlink\" title=\"工厂模式所要解决的问题\"></a>工厂模式所要解决的问题</h3><p>如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。</p>\n<h3 id=\"工厂模式的分类\"><a href=\"#工厂模式的分类\" class=\"headerlink\" title=\"工厂模式的分类\"></a>工厂模式的分类</h3><ol>\n<li><p>简单工厂</p>\n</li>\n<li><p>工厂方法模式</p>\n</li>\n<li><p>抽象工厂模式</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<p>接下来分别说明工厂模式的以上三种的类型的内容和它们之间的区别。</p>\n<h4 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h4><p>最开始我们要实例化一个对象的时候是根据需要直接去new一个来用就行了，例如我要购买小米手机:</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMi2s</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> XiaoMi2s&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"create Xiaomi 2s\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"MI2s selled You need pay 1999￥\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMi5s</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> XiaoMi5s&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"create Xiaomi 5s\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"MI5s selled 1999￥\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneShop</span></span>&#123;</div><div class=\"line\">  Phone phone;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    buyPhone(<span class=\"string\">\"Mi2s\"</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyPhone</span><span class=\"params\">(String model)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI2s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi2s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI5s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi5s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，如果我要购买不同型号的手机，手机店需要进行很多次的判断才能拿到我想要的手机并卖给我。这项就显得十分繁琐了。</p>\n<p>简单工厂模式可以解决这个问题，把创建对象的过程放到专门的工厂中去做，像这样：</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePhoneFactory</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Phone <span class=\"title\">createPhone</span><span class=\"params\">(String model)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    Phone phone = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI2s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi2s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI5s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi5s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> phone;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单工厂其实并不算是一种设计模式，反而比较像是一种编程习惯。这个简单工厂为需要的对象创建不同的“产品”。简单工厂也可以被定义为一个静态的方法，这样就不需要使用创建对象的方法来实例化对象，但是这样就不能通过继承来改变创建方法的行为。</p>\n","excerpt":"<p>继续设计模式的学习，接下来是工厂模式。</p>\n<h3 id=\"工厂模式所要解决的问题\"><a href=\"#工厂模式所要解决的问题\" class=\"headerlink\" title=\"工厂模式所要解决的问题\"></a>工厂模式所要解决的问题</h3><p>如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。</p>\n<h3 id=\"工厂模式的分类\"><a href=\"#工厂模式的分类\" class=\"headerlink\" title=\"工厂模式的分类\"></a>工厂模式的分类</h3><ol>\n<li><p>简单工厂</p>\n</li>\n<li><p>工厂方法模式</p>\n</li>\n<li><p>抽象工厂模式</p>\n</li>\n</ol>","more":"<p>接下来分别说明工厂模式的以上三种的类型的内容和它们之间的区别。</p>\n<h4 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h4><p>最开始我们要实例化一个对象的时候是根据需要直接去new一个来用就行了，例如我要购买小米手机:</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMi2s</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> XiaoMi2s&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"create Xiaomi 2s\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"MI2s selled You need pay 1999￥\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XiaoMi5s</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> XiaoMi5s&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"create Xiaomi 5s\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sell</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"MI5s selled 1999￥\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhoneShop</span></span>&#123;</div><div class=\"line\">  Phone phone;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    buyPhone(<span class=\"string\">\"Mi2s\"</span>);</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">buyPhone</span><span class=\"params\">(String model)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI2s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi2s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI5s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi5s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以看到，如果我要购买不同型号的手机，手机店需要进行很多次的判断才能拿到我想要的手机并卖给我。这项就显得十分繁琐了。</p>\n<p>简单工厂模式可以解决这个问题，把创建对象的过程放到专门的工厂中去做，像这样：</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePhoneFactory</span></span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Phone <span class=\"title\">createPhone</span><span class=\"params\">(String model)</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    Phone phone = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI2s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi2s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(model.equals(<span class=\"string\">\"MI5s\"</span>))&#123;</div><div class=\"line\">      phone = <span class=\"keyword\">new</span> <span class=\"keyword\">new</span> XiaoMi5s();</div><div class=\"line\">      phone.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> phone;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单工厂其实并不算是一种设计模式，反而比较像是一种编程习惯。这个简单工厂为需要的对象创建不同的“产品”。简单工厂也可以被定义为一个静态的方法，这样就不需要使用创建对象的方法来实例化对象，但是这样就不能通过继承来改变创建方法的行为。</p>"},{"title":"动手学Docker系列---在操作系统上安装Docker","date":"2017-06-02T10:48:13.000Z","_content":"\n### What is Docker?\n\n  Docker是当前相当流行的一种应用容器引擎，通过Docker容器，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。Docker容器完全使用沙箱机制，相互之间不会有任何的接口，可以让应用得到高等级的隔离，相比于虚拟机，Docker容器更加轻量级，性能开销更低。\n\n### Docker的一些应用场景\n\n- web应用的自动化打包和发布；\n- 自动化测试和持续集成、发布；\n- 在服务性环境中部署和调整数据库或其他的后台应用；\n- 从头编译或者扩展现有的OpenShift或cloud Foundry平台来搭建自己的PaaS环境；\n\n### Docker所解决的问题\n\n- 更有序的组织\n- 更高的可移植性\n- 保护你的机器，提高安全性\n\n既然Docker容器有这么多的优点，那怎么才能使用上它呢？这篇文章就来记录一下怎么去安装Docker。\n\n<!-- more -->\n\n### 安装Docker\n\n我所使用的操作系统是Ubuntu 14.04 LTS\n\nDocker官方的安装说明地址： https://docs.docker.com/engine/installation/linux/ubuntu/  先仔细阅读一下官方的安装说明。\n\n> Recommended extra packages for Trusty 14.04\n>  Unless you have a strong reason not to, install the `linux-image-extra-*` packages, which allow Docker to use the `aufs` storage drivers.\n>\n\n看起来我使用的14.04还需要安装一下内核扩展，那安装一下先\n\n```bash\nxing@ubuntu-compile:~$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \nlinux-image-extra-3.19.0-33-generic 已经是最新的版本了。\nlinux-image-extra-3.19.0-33-generic 被设置为手动安装。\n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-3.19.0-25 linux-headers-3.19.0-25-generic\n  linux-image-3.19.0-25-generic linux-image-extra-3.19.0-25-generic\nUse 'apt-get autoremove' to remove them.\n将会安装下列额外的软件包：\n  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic\n  linux-image-generic\n建议安装的软件包：\n  fdutils linux-doc-3.13.0 linux-source-3.13.0 linux-tools\n  linux-headers-3.13.0-119-generic\n下列【新】软件包将被安装：\n  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic\n  linux-image-extra-virtual linux-image-generic\n升级了 0 个软件包，新安装了 4 个软件包，要卸载 0 个软件包，有 89 个软件包未被升级。\n需要下载 52.0 MB 的软件包。\n解压缩后会消耗掉 195 MB 的额外空间。\n您希望继续执行吗？ [Y/n] \n```\n\n官方网站上介绍了两种安装方式，一是从软件仓库安装，而是下载deb安装包，手动安装。\n\n- 从软件仓库安装\n\n```bash\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n```\n\n```bash\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n```bash\n$ sudo apt-key fingerprint 0EBFCD88\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n```\n\n```bash\n$ sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n```\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n- 下载deb包，手动安装\n\n浏览器打开  [https://download.docker.com/linux/ubuntu/dists/](https://download.docker.com/linux/ubuntu/dists/)  选择适合系统版本的deb包下载。\n\n我选择手动下载deb包进行安装。\n\n```bash\nxing@ubuntu-compile:~$ wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/stable/amd64/docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb\n```\n\n吐槽一句，下载的速度这是太慢了------------终于下载好了\n\n```bash\nxing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb \n[sudo] password for xing: \n正在选中未选择的软件包 docker-ce。\n(正在读取数据库 ... 系统当前共安装有 144928 个文件和目录。)\n正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...\n正在解包 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...\ndpkg: 依赖关系问题使得 docker-ce 的配置工作不能继续：\n docker-ce 依赖于 libltdl7 (>= 2.4.2)；然而：\n  未安装软件包 libltdl7。\n docker-ce 依赖于 libsystemd-journal0 (>= 201)；然而：\n  未安装软件包 libsystemd-journal0。\n\ndpkg: 处理软件包 docker-ce (--install)时出错：\n 依赖关系问题 - 仍未被配置\n正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...\n正在处理用于 ureadahead (0.100.0-16) 的触发器 ...\n在处理时有错误发生：\n docker-ce\n\n```\n\n好像出了点问题，需要依赖，那么安装一下依赖吧。\n\n```bash\nxing@ubuntu-compile:~$ sudo apt-get -f install\nxing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb \n(正在读取数据库 ... 系统当前共安装有 145148 个文件和目录。)\n正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...\ndocker stop/waiting\n正在将 docker-ce (17.03.1~ce-0~ubuntu-trusty) 解包到 (17.03.1~ce-0~ubuntu-trusty) 上 ...\n正在设置 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...\ndocker start/running, process 2629\n正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...\n正在处理用于 ureadahead (0.100.0-16) 的触发器 ...\n\n```\n\n这些安装好了！！加载一个Hello World镜像尝试一下\n\n### Docker Hello World\n\n```bash\nxing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world\nUnable to find image 'dockerinaction/hello_world:latest' locally\nlatest: Pulling from dockerinaction/hello_world\na3ed95caeb02: Pull complete \n1db09adb5ddd: Pull complete \nDigest: sha256:cfebf86139a3b21797765a3960e13dee000bcf332be0be529858fca840c00d7f\nStatus: Downloaded newer image for dockerinaction/hello_world:latest\nhello world\n\n```\n\n可以看到，docker是先检查本地是否有hello_world镜像，发现不存在，再去镜像市场拉取到本地，再进行运行的。最后已经打印出了hello world，说明我们的docker已经安装成功了！\n\n再来运行hello_world看看有什么不一样\n\n```bash\nxing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world\nhello world\n\n```\n\n直接打印出了hello world ，说明镜像已经存在，docker直接是运行的本地的镜像。\n\n-----------安装篇完\n\n参考资料：\n\n https://docs.docker.com/engine/installation/linux\n\n《Docker实战》\n\nhttp://www.runoob.com/docker/ubuntu-docker-install.html\n\nhttp://www.docker.org.cn/book/docker/what-is-docker-16.html","source":"_posts/DokerStudy-install.md","raw":"---\ntitle: 动手学Docker系列---在操作系统上安装Docker\ncategories:\n  - Linux\ntags:\n  - docker\ndate: 2017-06-02 18:48:13\n---\n\n### What is Docker?\n\n  Docker是当前相当流行的一种应用容器引擎，通过Docker容器，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。Docker容器完全使用沙箱机制，相互之间不会有任何的接口，可以让应用得到高等级的隔离，相比于虚拟机，Docker容器更加轻量级，性能开销更低。\n\n### Docker的一些应用场景\n\n- web应用的自动化打包和发布；\n- 自动化测试和持续集成、发布；\n- 在服务性环境中部署和调整数据库或其他的后台应用；\n- 从头编译或者扩展现有的OpenShift或cloud Foundry平台来搭建自己的PaaS环境；\n\n### Docker所解决的问题\n\n- 更有序的组织\n- 更高的可移植性\n- 保护你的机器，提高安全性\n\n既然Docker容器有这么多的优点，那怎么才能使用上它呢？这篇文章就来记录一下怎么去安装Docker。\n\n<!-- more -->\n\n### 安装Docker\n\n我所使用的操作系统是Ubuntu 14.04 LTS\n\nDocker官方的安装说明地址： https://docs.docker.com/engine/installation/linux/ubuntu/  先仔细阅读一下官方的安装说明。\n\n> Recommended extra packages for Trusty 14.04\n>  Unless you have a strong reason not to, install the `linux-image-extra-*` packages, which allow Docker to use the `aufs` storage drivers.\n>\n\n看起来我使用的14.04还需要安装一下内核扩展，那安装一下先\n\n```bash\nxing@ubuntu-compile:~$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual\n正在读取软件包列表... 完成\n正在分析软件包的依赖关系树       \n正在读取状态信息... 完成       \nlinux-image-extra-3.19.0-33-generic 已经是最新的版本了。\nlinux-image-extra-3.19.0-33-generic 被设置为手动安装。\n下列软件包是自动安装的并且现在不需要了：\n  linux-headers-3.19.0-25 linux-headers-3.19.0-25-generic\n  linux-image-3.19.0-25-generic linux-image-extra-3.19.0-25-generic\nUse 'apt-get autoremove' to remove them.\n将会安装下列额外的软件包：\n  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic\n  linux-image-generic\n建议安装的软件包：\n  fdutils linux-doc-3.13.0 linux-source-3.13.0 linux-tools\n  linux-headers-3.13.0-119-generic\n下列【新】软件包将被安装：\n  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic\n  linux-image-extra-virtual linux-image-generic\n升级了 0 个软件包，新安装了 4 个软件包，要卸载 0 个软件包，有 89 个软件包未被升级。\n需要下载 52.0 MB 的软件包。\n解压缩后会消耗掉 195 MB 的额外空间。\n您希望继续执行吗？ [Y/n] \n```\n\n官方网站上介绍了两种安装方式，一是从软件仓库安装，而是下载deb安装包，手动安装。\n\n- 从软件仓库安装\n\n```bash\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n```\n\n```bash\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n```bash\n$ sudo apt-key fingerprint 0EBFCD88\n\npub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22\n```\n\n```bash\n$ sudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n```\n\n```bash\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n- 下载deb包，手动安装\n\n浏览器打开  [https://download.docker.com/linux/ubuntu/dists/](https://download.docker.com/linux/ubuntu/dists/)  选择适合系统版本的deb包下载。\n\n我选择手动下载deb包进行安装。\n\n```bash\nxing@ubuntu-compile:~$ wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/stable/amd64/docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb\n```\n\n吐槽一句，下载的速度这是太慢了------------终于下载好了\n\n```bash\nxing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb \n[sudo] password for xing: \n正在选中未选择的软件包 docker-ce。\n(正在读取数据库 ... 系统当前共安装有 144928 个文件和目录。)\n正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...\n正在解包 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...\ndpkg: 依赖关系问题使得 docker-ce 的配置工作不能继续：\n docker-ce 依赖于 libltdl7 (>= 2.4.2)；然而：\n  未安装软件包 libltdl7。\n docker-ce 依赖于 libsystemd-journal0 (>= 201)；然而：\n  未安装软件包 libsystemd-journal0。\n\ndpkg: 处理软件包 docker-ce (--install)时出错：\n 依赖关系问题 - 仍未被配置\n正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...\n正在处理用于 ureadahead (0.100.0-16) 的触发器 ...\n在处理时有错误发生：\n docker-ce\n\n```\n\n好像出了点问题，需要依赖，那么安装一下依赖吧。\n\n```bash\nxing@ubuntu-compile:~$ sudo apt-get -f install\nxing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb \n(正在读取数据库 ... 系统当前共安装有 145148 个文件和目录。)\n正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...\ndocker stop/waiting\n正在将 docker-ce (17.03.1~ce-0~ubuntu-trusty) 解包到 (17.03.1~ce-0~ubuntu-trusty) 上 ...\n正在设置 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...\ndocker start/running, process 2629\n正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...\n正在处理用于 ureadahead (0.100.0-16) 的触发器 ...\n\n```\n\n这些安装好了！！加载一个Hello World镜像尝试一下\n\n### Docker Hello World\n\n```bash\nxing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world\nUnable to find image 'dockerinaction/hello_world:latest' locally\nlatest: Pulling from dockerinaction/hello_world\na3ed95caeb02: Pull complete \n1db09adb5ddd: Pull complete \nDigest: sha256:cfebf86139a3b21797765a3960e13dee000bcf332be0be529858fca840c00d7f\nStatus: Downloaded newer image for dockerinaction/hello_world:latest\nhello world\n\n```\n\n可以看到，docker是先检查本地是否有hello_world镜像，发现不存在，再去镜像市场拉取到本地，再进行运行的。最后已经打印出了hello world，说明我们的docker已经安装成功了！\n\n再来运行hello_world看看有什么不一样\n\n```bash\nxing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world\nhello world\n\n```\n\n直接打印出了hello world ，说明镜像已经存在，docker直接是运行的本地的镜像。\n\n-----------安装篇完\n\n参考资料：\n\n https://docs.docker.com/engine/installation/linux\n\n《Docker实战》\n\nhttp://www.runoob.com/docker/ubuntu-docker-install.html\n\nhttp://www.docker.org.cn/book/docker/what-is-docker-16.html","slug":"DokerStudy-install","published":1,"updated":"2017-10-10T03:15:07.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzgf001ogov5zgc6lill","content":"<h3 id=\"What-is-Docker\"><a href=\"#What-is-Docker\" class=\"headerlink\" title=\"What is Docker?\"></a>What is Docker?</h3><p>  Docker是当前相当流行的一种应用容器引擎，通过Docker容器，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。Docker容器完全使用沙箱机制，相互之间不会有任何的接口，可以让应用得到高等级的隔离，相比于虚拟机，Docker容器更加轻量级，性能开销更低。</p>\n<h3 id=\"Docker的一些应用场景\"><a href=\"#Docker的一些应用场景\" class=\"headerlink\" title=\"Docker的一些应用场景\"></a>Docker的一些应用场景</h3><ul>\n<li>web应用的自动化打包和发布；</li>\n<li>自动化测试和持续集成、发布；</li>\n<li>在服务性环境中部署和调整数据库或其他的后台应用；</li>\n<li>从头编译或者扩展现有的OpenShift或cloud Foundry平台来搭建自己的PaaS环境；</li>\n</ul>\n<h3 id=\"Docker所解决的问题\"><a href=\"#Docker所解决的问题\" class=\"headerlink\" title=\"Docker所解决的问题\"></a>Docker所解决的问题</h3><ul>\n<li>更有序的组织</li>\n<li>更高的可移植性</li>\n<li>保护你的机器，提高安全性</li>\n</ul>\n<p>既然Docker容器有这么多的优点，那怎么才能使用上它呢？这篇文章就来记录一下怎么去安装Docker。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>我所使用的操作系统是Ubuntu 14.04 LTS</p>\n<p>Docker官方的安装说明地址： <a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/linux/ubuntu/</a>  先仔细阅读一下官方的安装说明。</p>\n<blockquote>\n<p>Recommended extra packages for Trusty 14.04<br> Unless you have a strong reason not to, install the <code>linux-image-extra-*</code> packages, which allow Docker to use the <code>aufs</code> storage drivers.</p>\n</blockquote>\n<p>看起来我使用的14.04还需要安装一下内核扩展，那安装一下先</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class=\"line\">正在读取软件包列表... 完成</div><div class=\"line\">正在分析软件包的依赖关系树       </div><div class=\"line\">正在读取状态信息... 完成       </div><div class=\"line\">linux-image-extra-3.19.0-33-generic 已经是最新的版本了。</div><div class=\"line\">linux-image-extra-3.19.0-33-generic 被设置为手动安装。</div><div class=\"line\">下列软件包是自动安装的并且现在不需要了：</div><div class=\"line\">  linux-headers-3.19.0-25 linux-headers-3.19.0-25-generic</div><div class=\"line\">  linux-image-3.19.0-25-generic linux-image-extra-3.19.0-25-generic</div><div class=\"line\">Use <span class=\"string\">'apt-get autoremove'</span> to remove them.</div><div class=\"line\">将会安装下列额外的软件包：</div><div class=\"line\">  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic</div><div class=\"line\">  linux-image-generic</div><div class=\"line\">建议安装的软件包：</div><div class=\"line\">  fdutils linux-doc-3.13.0 linux-source-3.13.0 linux-tools</div><div class=\"line\">  linux-headers-3.13.0-119-generic</div><div class=\"line\">下列【新】软件包将被安装：</div><div class=\"line\">  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic</div><div class=\"line\">  linux-image-extra-virtual linux-image-generic</div><div class=\"line\">升级了 0 个软件包，新安装了 4 个软件包，要卸载 0 个软件包，有 89 个软件包未被升级。</div><div class=\"line\">需要下载 52.0 MB 的软件包。</div><div class=\"line\">解压缩后会消耗掉 195 MB 的额外空间。</div><div class=\"line\">您希望继续执行吗？ [Y/n]</div></pre></td></tr></table></figure>\n<p>官方网站上介绍了两种安装方式，一是从软件仓库安装，而是下载deb安装包，手动安装。</p>\n<ul>\n<li>从软件仓库安装</li>\n</ul>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install \\</div><div class=\"line\">    apt-transport-https \\</div><div class=\"line\">    ca-certificates \\</div><div class=\"line\">    curl \\</div><div class=\"line\">    software-properties-common</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</div><div class=\"line\"></div><div class=\"line\">pub   4096R/0EBFCD88 2017-02-22</div><div class=\"line\">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</div><div class=\"line\">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</div><div class=\"line\">sub   4096R/F273FCD8 2017-02-22</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository \\</div><div class=\"line\">   <span class=\"string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</span></div><div class=\"line\">   <span class=\"variable\">$(lsb_release -cs)</span> \\</div><div class=\"line\">   stable\"</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install docker-ce</div></pre></td></tr></table></figure>\n<ul>\n<li>下载deb包，手动安装</li>\n</ul>\n<p>浏览器打开  <a href=\"https://download.docker.com/linux/ubuntu/dists/\" target=\"_blank\" rel=\"external\">https://download.docker.com/linux/ubuntu/dists/</a>  选择适合系统版本的deb包下载。</p>\n<p>我选择手动下载deb包进行安装。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/stable/amd64/docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb</div></pre></td></tr></table></figure>\n<p>吐槽一句，下载的速度这是太慢了————终于下载好了</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb </div><div class=\"line\">[sudo] password <span class=\"keyword\">for</span> xing: </div><div class=\"line\">正在选中未选择的软件包 docker-ce。</div><div class=\"line\">(正在读取数据库 ... 系统当前共安装有 144928 个文件和目录。)</div><div class=\"line\">正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...</div><div class=\"line\">正在解包 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...</div><div class=\"line\">dpkg: 依赖关系问题使得 docker-ce 的配置工作不能继续：</div><div class=\"line\"> docker-ce 依赖于 libltdl7 (&gt;= 2.4.2)；然而：</div><div class=\"line\">  未安装软件包 libltdl7。</div><div class=\"line\"> docker-ce 依赖于 libsystemd-journal0 (&gt;= 201)；然而：</div><div class=\"line\">  未安装软件包 libsystemd-journal0。</div><div class=\"line\"></div><div class=\"line\">dpkg: 处理软件包 docker-ce (--install)时出错：</div><div class=\"line\"> 依赖关系问题 - 仍未被配置</div><div class=\"line\">正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...</div><div class=\"line\">正在处理用于 ureadahead (0.100.0-16) 的触发器 ...</div><div class=\"line\">在处理时有错误发生：</div><div class=\"line\"> docker-ce</div></pre></td></tr></table></figure>\n<p>好像出了点问题，需要依赖，那么安装一下依赖吧。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo apt-get <span class=\"_\">-f</span> install</div><div class=\"line\">xing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb </div><div class=\"line\">(正在读取数据库 ... 系统当前共安装有 145148 个文件和目录。)</div><div class=\"line\">正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...</div><div class=\"line\">docker stop/waiting</div><div class=\"line\">正在将 docker-ce (17.03.1~ce-0~ubuntu-trusty) 解包到 (17.03.1~ce-0~ubuntu-trusty) 上 ...</div><div class=\"line\">正在设置 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...</div><div class=\"line\">docker start/running, process 2629</div><div class=\"line\">正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...</div><div class=\"line\">正在处理用于 ureadahead (0.100.0-16) 的触发器 ...</div></pre></td></tr></table></figure>\n<p>这些安装好了！！加载一个Hello World镜像尝试一下</p>\n<h3 id=\"Docker-Hello-World\"><a href=\"#Docker-Hello-World\" class=\"headerlink\" title=\"Docker Hello World\"></a>Docker Hello World</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world</div><div class=\"line\">Unable to find image <span class=\"string\">'dockerinaction/hello_world:latest'</span> locally</div><div class=\"line\">latest: Pulling from dockerinaction/hello_world</div><div class=\"line\">a3ed95caeb02: Pull complete </div><div class=\"line\">1db09adb5ddd: Pull complete </div><div class=\"line\">Digest: sha256:cfebf86139a3b21797765a3960e13dee000bcf332be0be529858fca840c00d7f</div><div class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> dockerinaction/hello_world:latest</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>可以看到，docker是先检查本地是否有hello_world镜像，发现不存在，再去镜像市场拉取到本地，再进行运行的。最后已经打印出了hello world，说明我们的docker已经安装成功了！</p>\n<p>再来运行hello_world看看有什么不一样</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>直接打印出了hello world ，说明镜像已经存在，docker直接是运行的本地的镜像。</p>\n<p>———–安装篇完</p>\n<p>参考资料：</p>\n<p> <a href=\"https://docs.docker.com/engine/installation/linux\" target=\"_blank\" rel=\"external\">https://docs.docker.com/engine/installation/linux</a></p>\n<p>《Docker实战》</p>\n<p><a href=\"http://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/docker/ubuntu-docker-install.html</a></p>\n<p><a href=\"http://www.docker.org.cn/book/docker/what-is-docker-16.html\" target=\"_blank\" rel=\"external\">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></p>\n","excerpt":"<h3 id=\"What-is-Docker\"><a href=\"#What-is-Docker\" class=\"headerlink\" title=\"What is Docker?\"></a>What is Docker?</h3><p>  Docker是当前相当流行的一种应用容器引擎，通过Docker容器，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。Docker容器完全使用沙箱机制，相互之间不会有任何的接口，可以让应用得到高等级的隔离，相比于虚拟机，Docker容器更加轻量级，性能开销更低。</p>\n<h3 id=\"Docker的一些应用场景\"><a href=\"#Docker的一些应用场景\" class=\"headerlink\" title=\"Docker的一些应用场景\"></a>Docker的一些应用场景</h3><ul>\n<li>web应用的自动化打包和发布；</li>\n<li>自动化测试和持续集成、发布；</li>\n<li>在服务性环境中部署和调整数据库或其他的后台应用；</li>\n<li>从头编译或者扩展现有的OpenShift或cloud Foundry平台来搭建自己的PaaS环境；</li>\n</ul>\n<h3 id=\"Docker所解决的问题\"><a href=\"#Docker所解决的问题\" class=\"headerlink\" title=\"Docker所解决的问题\"></a>Docker所解决的问题</h3><ul>\n<li>更有序的组织</li>\n<li>更高的可移植性</li>\n<li>保护你的机器，提高安全性</li>\n</ul>\n<p>既然Docker容器有这么多的优点，那怎么才能使用上它呢？这篇文章就来记录一下怎么去安装Docker。</p>","more":"<h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>我所使用的操作系统是Ubuntu 14.04 LTS</p>\n<p>Docker官方的安装说明地址： <a href=\"https://docs.docker.com/engine/installation/linux/ubuntu/\">https://docs.docker.com/engine/installation/linux/ubuntu/</a>  先仔细阅读一下官方的安装说明。</p>\n<blockquote>\n<p>Recommended extra packages for Trusty 14.04<br> Unless you have a strong reason not to, install the <code>linux-image-extra-*</code> packages, which allow Docker to use the <code>aufs</code> storage drivers.</p>\n</blockquote>\n<p>看起来我使用的14.04还需要安装一下内核扩展，那安装一下先</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</div><div class=\"line\">正在读取软件包列表... 完成</div><div class=\"line\">正在分析软件包的依赖关系树       </div><div class=\"line\">正在读取状态信息... 完成       </div><div class=\"line\">linux-image-extra-3.19.0-33-generic 已经是最新的版本了。</div><div class=\"line\">linux-image-extra-3.19.0-33-generic 被设置为手动安装。</div><div class=\"line\">下列软件包是自动安装的并且现在不需要了：</div><div class=\"line\">  linux-headers-3.19.0-25 linux-headers-3.19.0-25-generic</div><div class=\"line\">  linux-image-3.19.0-25-generic linux-image-extra-3.19.0-25-generic</div><div class=\"line\">Use <span class=\"string\">'apt-get autoremove'</span> to remove them.</div><div class=\"line\">将会安装下列额外的软件包：</div><div class=\"line\">  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic</div><div class=\"line\">  linux-image-generic</div><div class=\"line\">建议安装的软件包：</div><div class=\"line\">  fdutils linux-doc-3.13.0 linux-source-3.13.0 linux-tools</div><div class=\"line\">  linux-headers-3.13.0-119-generic</div><div class=\"line\">下列【新】软件包将被安装：</div><div class=\"line\">  linux-image-3.13.0-119-generic linux-image-extra-3.13.0-119-generic</div><div class=\"line\">  linux-image-extra-virtual linux-image-generic</div><div class=\"line\">升级了 0 个软件包，新安装了 4 个软件包，要卸载 0 个软件包，有 89 个软件包未被升级。</div><div class=\"line\">需要下载 52.0 MB 的软件包。</div><div class=\"line\">解压缩后会消耗掉 195 MB 的额外空间。</div><div class=\"line\">您希望继续执行吗？ [Y/n]</div></pre></td></tr></table></figure>\n<p>官方网站上介绍了两种安装方式，一是从软件仓库安装，而是下载deb安装包，手动安装。</p>\n<ul>\n<li>从软件仓库安装</li>\n</ul>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install \\</div><div class=\"line\">    apt-transport-https \\</div><div class=\"line\">    ca-certificates \\</div><div class=\"line\">    curl \\</div><div class=\"line\">    software-properties-common</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-key fingerprint 0EBFCD88</div><div class=\"line\"></div><div class=\"line\">pub   4096R/0EBFCD88 2017-02-22</div><div class=\"line\">      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</div><div class=\"line\">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</div><div class=\"line\">sub   4096R/F273FCD8 2017-02-22</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo add-apt-repository \\</div><div class=\"line\">   <span class=\"string\">\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</div><div class=\"line\">   <span class=\"variable\">$(lsb_release -cs)</span> \\</div><div class=\"line\">   stable\"</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install docker-ce</div></pre></td></tr></table></figure>\n<ul>\n<li>下载deb包，手动安装</li>\n</ul>\n<p>浏览器打开  <a href=\"https://download.docker.com/linux/ubuntu/dists/\">https://download.docker.com/linux/ubuntu/dists/</a>  选择适合系统版本的deb包下载。</p>\n<p>我选择手动下载deb包进行安装。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ wget https://download.docker.com/linux/ubuntu/dists/trusty/pool/stable/amd64/docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb</div></pre></td></tr></table></figure>\n<p>吐槽一句，下载的速度这是太慢了————终于下载好了</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb </div><div class=\"line\">[sudo] password <span class=\"keyword\">for</span> xing: </div><div class=\"line\">正在选中未选择的软件包 docker-ce。</div><div class=\"line\">(正在读取数据库 ... 系统当前共安装有 144928 个文件和目录。)</div><div class=\"line\">正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...</div><div class=\"line\">正在解包 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...</div><div class=\"line\">dpkg: 依赖关系问题使得 docker-ce 的配置工作不能继续：</div><div class=\"line\"> docker-ce 依赖于 libltdl7 (&gt;= 2.4.2)；然而：</div><div class=\"line\">  未安装软件包 libltdl7。</div><div class=\"line\"> docker-ce 依赖于 libsystemd-journal0 (&gt;= 201)；然而：</div><div class=\"line\">  未安装软件包 libsystemd-journal0。</div><div class=\"line\"></div><div class=\"line\">dpkg: 处理软件包 docker-ce (--install)时出错：</div><div class=\"line\"> 依赖关系问题 - 仍未被配置</div><div class=\"line\">正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...</div><div class=\"line\">正在处理用于 ureadahead (0.100.0-16) 的触发器 ...</div><div class=\"line\">在处理时有错误发生：</div><div class=\"line\"> docker-ce</div></pre></td></tr></table></figure>\n<p>好像出了点问题，需要依赖，那么安装一下依赖吧。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo apt-get <span class=\"_\">-f</span> install</div><div class=\"line\">xing@ubuntu-compile:~$ sudo dpkg -i docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb </div><div class=\"line\">(正在读取数据库 ... 系统当前共安装有 145148 个文件和目录。)</div><div class=\"line\">正准备解包 docker-ce_17.03.1~ce-0~ubuntu-trusty_amd64.deb  ...</div><div class=\"line\">docker stop/waiting</div><div class=\"line\">正在将 docker-ce (17.03.1~ce-0~ubuntu-trusty) 解包到 (17.03.1~ce-0~ubuntu-trusty) 上 ...</div><div class=\"line\">正在设置 docker-ce (17.03.1~ce-0~ubuntu-trusty) ...</div><div class=\"line\">docker start/running, process 2629</div><div class=\"line\">正在处理用于 man-db (2.6.7.1-1ubuntu1) 的触发器 ...</div><div class=\"line\">正在处理用于 ureadahead (0.100.0-16) 的触发器 ...</div></pre></td></tr></table></figure>\n<p>这些安装好了！！加载一个Hello World镜像尝试一下</p>\n<h3 id=\"Docker-Hello-World\"><a href=\"#Docker-Hello-World\" class=\"headerlink\" title=\"Docker Hello World\"></a>Docker Hello World</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world</div><div class=\"line\">Unable to find image <span class=\"string\">'dockerinaction/hello_world:latest'</span> locally</div><div class=\"line\">latest: Pulling from dockerinaction/hello_world</div><div class=\"line\">a3ed95caeb02: Pull complete </div><div class=\"line\">1db09adb5ddd: Pull complete </div><div class=\"line\">Digest: sha256:cfebf86139a3b21797765a3960e13dee000bcf332be0be529858fca840c00d7f</div><div class=\"line\">Status: Downloaded newer image <span class=\"keyword\">for</span> dockerinaction/hello_world:latest</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>可以看到，docker是先检查本地是否有hello_world镜像，发现不存在，再去镜像市场拉取到本地，再进行运行的。最后已经打印出了hello world，说明我们的docker已经安装成功了！</p>\n<p>再来运行hello_world看看有什么不一样</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">xing@ubuntu-compile:~$ sudo docker run dockerinaction/hello_world</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>直接打印出了hello world ，说明镜像已经存在，docker直接是运行的本地的镜像。</p>\n<p>———–安装篇完</p>\n<p>参考资料：</p>\n<p> <a href=\"https://docs.docker.com/engine/installation/linux\">https://docs.docker.com/engine/installation/linux</a></p>\n<p>《Docker实战》</p>\n<p><a href=\"http://www.runoob.com/docker/ubuntu-docker-install.html\">http://www.runoob.com/docker/ubuntu-docker-install.html</a></p>\n<p><a href=\"http://www.docker.org.cn/book/docker/what-is-docker-16.html\">http://www.docker.org.cn/book/docker/what-is-docker-16.html</a></p>"},{"title":"在Ubuntu16.04上配置peda","date":"2016-11-20T11:25:18.000Z","_content":"# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","source":"_posts/GDB-peda.md","raw":"---\ntitle: 在Ubuntu16.04上配置peda\ndate: 2016-11-20 19:25:18\ncategories: Linux\ntags:\n- GDB\n- Linux\n- Debugger\n- peda\n---\n# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","slug":"GDB-peda","published":1,"updated":"2017-10-10T03:15:07.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzgn001sgov56btl622o","content":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>\n","excerpt":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>","more":"<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>"},{"title":"github配置ssh key","date":"2016-11-30T02:43:18.000Z","_content":"### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","source":"_posts/Github-Add-SSHKEY.md","raw":"---\ntitle: github配置ssh key\ndate: 2016-11-30 10:43:18\ncategories: Program\ntags:\n- github\n- ssh key\n---\n### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","slug":"Github-Add-SSHKEY","published":1,"updated":"2017-10-10T03:15:07.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzgt001ugov5mlcatvkx","content":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</span></div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</span></div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>\n","excerpt":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</span></div></pre></td></tr></table></figure></p>","more":"<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</span></div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>"},{"title":"常见排序算法之插入排序","date":"2017-05-17T15:41:35.000Z","_content":"\n由这篇博文开始，来回顾一下常见的排序算法。算法实现主要以Python语言为主。\n\n插入排序，对于少量的元素排序，它是一个有效的算法。插入排序的方式有点类似于打扑克牌的时候抓牌后，然后根据牌的大小插入到合适的位置。\n\n<!-- more -->\n\n### 插入排序的基本思想:\n\n每步将一个待排序的对象,按其排序码大小,插入到前面已经排好序的一组对象的适当位置上,直到对象全部插入为止。\n\n### 插入排序的工作过程的伪代码表示\n\n```python\nINSERTION-SORT(A)\n\tfor j = 2 to A.length\n\t\t#取当前位置元素作为待比较元素\n\t \tkey = A[j]\n\t\t#获取到需要比较的元素的下标\n\t\ti = j -1\n\t\t#进行比较，如果待比较元素比当前元素大，则将待比较元素和当前元素进行交换（从当前元素开始，逐个向后移动一个位置，为待比较元素腾出个位置来）\n\t\twhile i > 0 and A[i] > key\n\t\t\tA[i+1] = A[i]\n\t\t\ti = i -1\n\t\t\t#腾位置结束\n\t\t#将待比较的元素赋值给腾出来的位置，然后继续下一次循环，直到排序完成\n\t\tA[i+1] = key\n```\n\n### 插入排序的Python代码实现\n\n```python\n# -*- coding:utf-8 -*-\n\nA = [5,2,4,6,1,3]\n\ndef insert_sort(Array_A):\n    for j in range(1,len(Array_A)):\n        key = Array_A[j]\n        i = j - 1\n        while i >= 0 and Array_A[i] > key:\n            Array_A[i+1] = Array_A[i]\n            i = i -1\n        Array_A[i+1] = key\n        print '第%s次插入：' % (j),Array_A\n        \ninsert_sort(A)\nprint '插入排序结果：',A\n```\n\n运行结果：\n\n```python\n第1次插入： [2, 5, 4, 6, 1, 3]\n第2次插入： [2, 4, 5, 6, 1, 3]\n第3次插入： [2, 4, 5, 6, 1, 3]\n第4次插入： [1, 2, 4, 5, 6, 3]\n第5次插入： [1, 2, 3, 4, 5, 6]\n插入排序结果： [1, 2, 3, 4, 5, 6]\n```\n\n通过结果可以很清楚的看到每次排序过程。\n\n### 插入排序算法的分析\n\n1. 最好的情况下，排序前对象已经按照要求有序。比较次数：n-1;移动次数:0。对应的时间复杂度为O(n)\n2. 最坏的情况下，排序前对象为要求的顺序的反序。第i趟时第i各对象必须与前面i个对象都做排序码比较，并且每做一侧比较就要做一次数据移动。时间复杂度为O(n2)\n3. 如果记录是随机的，时间复杂度为O(n2)\n\n### 插入排序算法的特点\n\n1. 它是稳定排序，不改变相同元素原来的顺序\n2. 它是in-place排序，只需要O(1)的额外内存空间\n3. 它是在线排序，可以边接收数据边排序\n4. 它跟我们排扑克牌的方式相似\n5. 对小数据集是有效的","source":"_posts/InsertSort.md","raw":"---\ntitle: 常见排序算法之插入排序\ndate: 2017-05-17 23:41:35\ncategories:\n- Program\ntags:\n- 算法\n- 排序\n- 插入排序\n---\n\n由这篇博文开始，来回顾一下常见的排序算法。算法实现主要以Python语言为主。\n\n插入排序，对于少量的元素排序，它是一个有效的算法。插入排序的方式有点类似于打扑克牌的时候抓牌后，然后根据牌的大小插入到合适的位置。\n\n<!-- more -->\n\n### 插入排序的基本思想:\n\n每步将一个待排序的对象,按其排序码大小,插入到前面已经排好序的一组对象的适当位置上,直到对象全部插入为止。\n\n### 插入排序的工作过程的伪代码表示\n\n```python\nINSERTION-SORT(A)\n\tfor j = 2 to A.length\n\t\t#取当前位置元素作为待比较元素\n\t \tkey = A[j]\n\t\t#获取到需要比较的元素的下标\n\t\ti = j -1\n\t\t#进行比较，如果待比较元素比当前元素大，则将待比较元素和当前元素进行交换（从当前元素开始，逐个向后移动一个位置，为待比较元素腾出个位置来）\n\t\twhile i > 0 and A[i] > key\n\t\t\tA[i+1] = A[i]\n\t\t\ti = i -1\n\t\t\t#腾位置结束\n\t\t#将待比较的元素赋值给腾出来的位置，然后继续下一次循环，直到排序完成\n\t\tA[i+1] = key\n```\n\n### 插入排序的Python代码实现\n\n```python\n# -*- coding:utf-8 -*-\n\nA = [5,2,4,6,1,3]\n\ndef insert_sort(Array_A):\n    for j in range(1,len(Array_A)):\n        key = Array_A[j]\n        i = j - 1\n        while i >= 0 and Array_A[i] > key:\n            Array_A[i+1] = Array_A[i]\n            i = i -1\n        Array_A[i+1] = key\n        print '第%s次插入：' % (j),Array_A\n        \ninsert_sort(A)\nprint '插入排序结果：',A\n```\n\n运行结果：\n\n```python\n第1次插入： [2, 5, 4, 6, 1, 3]\n第2次插入： [2, 4, 5, 6, 1, 3]\n第3次插入： [2, 4, 5, 6, 1, 3]\n第4次插入： [1, 2, 4, 5, 6, 3]\n第5次插入： [1, 2, 3, 4, 5, 6]\n插入排序结果： [1, 2, 3, 4, 5, 6]\n```\n\n通过结果可以很清楚的看到每次排序过程。\n\n### 插入排序算法的分析\n\n1. 最好的情况下，排序前对象已经按照要求有序。比较次数：n-1;移动次数:0。对应的时间复杂度为O(n)\n2. 最坏的情况下，排序前对象为要求的顺序的反序。第i趟时第i各对象必须与前面i个对象都做排序码比较，并且每做一侧比较就要做一次数据移动。时间复杂度为O(n2)\n3. 如果记录是随机的，时间复杂度为O(n2)\n\n### 插入排序算法的特点\n\n1. 它是稳定排序，不改变相同元素原来的顺序\n2. 它是in-place排序，只需要O(1)的额外内存空间\n3. 它是在线排序，可以边接收数据边排序\n4. 它跟我们排扑克牌的方式相似\n5. 对小数据集是有效的","slug":"InsertSort","published":1,"updated":"2017-10-10T03:15:07.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzh8001xgov5hueqtn51","content":"<p>由这篇博文开始，来回顾一下常见的排序算法。算法实现主要以Python语言为主。</p>\n<p>插入排序，对于少量的元素排序，它是一个有效的算法。插入排序的方式有点类似于打扑克牌的时候抓牌后，然后根据牌的大小插入到合适的位置。</p>\n<a id=\"more\"></a>\n<h3 id=\"插入排序的基本思想\"><a href=\"#插入排序的基本思想\" class=\"headerlink\" title=\"插入排序的基本思想:\"></a>插入排序的基本思想:</h3><p>每步将一个待排序的对象,按其排序码大小,插入到前面已经排好序的一组对象的适当位置上,直到对象全部插入为止。</p>\n<h3 id=\"插入排序的工作过程的伪代码表示\"><a href=\"#插入排序的工作过程的伪代码表示\" class=\"headerlink\" title=\"插入排序的工作过程的伪代码表示\"></a>插入排序的工作过程的伪代码表示</h3><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERTION-SORT(A)</div><div class=\"line\">\t<span class=\"keyword\">for</span> j = <span class=\"number\">2</span> to A.length</div><div class=\"line\">\t\t<span class=\"comment\">#取当前位置元素作为待比较元素</span></div><div class=\"line\">\t \tkey = A[j]</div><div class=\"line\">\t\t<span class=\"comment\">#获取到需要比较的元素的下标</span></div><div class=\"line\">\t\ti = j <span class=\"number\">-1</span></div><div class=\"line\">\t\t<span class=\"comment\">#进行比较，如果待比较元素比当前元素大，则将待比较元素和当前元素进行交换（从当前元素开始，逐个向后移动一个位置，为待比较元素腾出个位置来）</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> A[i] &gt; key</div><div class=\"line\">\t\t\tA[i+<span class=\"number\">1</span>] = A[i]</div><div class=\"line\">\t\t\ti = i <span class=\"number\">-1</span></div><div class=\"line\">\t\t\t<span class=\"comment\">#腾位置结束</span></div><div class=\"line\">\t\t<span class=\"comment\">#将待比较的元素赋值给腾出来的位置，然后继续下一次循环，直到排序完成</span></div><div class=\"line\">\t\tA[i+<span class=\"number\">1</span>] = key</div></pre></td></tr></table></figure>\n<h3 id=\"插入排序的Python代码实现\"><a href=\"#插入排序的Python代码实现\" class=\"headerlink\" title=\"插入排序的Python代码实现\"></a>插入排序的Python代码实现</h3><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">A = [<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(Array_A)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(Array_A)):</div><div class=\"line\">        key = Array_A[j]</div><div class=\"line\">        i = j - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> Array_A[i] &gt; key:</div><div class=\"line\">            Array_A[i+<span class=\"number\">1</span>] = Array_A[i]</div><div class=\"line\">            i = i <span class=\"number\">-1</span></div><div class=\"line\">        Array_A[i+<span class=\"number\">1</span>] = key</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'第%s次插入：'</span> % (j),Array_A</div><div class=\"line\">        </div><div class=\"line\">insert_sort(A)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'插入排序结果：'</span>,A</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">第<span class=\"number\">1</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">2</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">3</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">4</span>次插入： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">5</span>次插入： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\">插入排序结果： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div></pre></td></tr></table></figure>\n<p>通过结果可以很清楚的看到每次排序过程。</p>\n<h3 id=\"插入排序算法的分析\"><a href=\"#插入排序算法的分析\" class=\"headerlink\" title=\"插入排序算法的分析\"></a>插入排序算法的分析</h3><ol>\n<li>最好的情况下，排序前对象已经按照要求有序。比较次数：n-1;移动次数:0。对应的时间复杂度为O(n)</li>\n<li>最坏的情况下，排序前对象为要求的顺序的反序。第i趟时第i各对象必须与前面i个对象都做排序码比较，并且每做一侧比较就要做一次数据移动。时间复杂度为O(n2)</li>\n<li>如果记录是随机的，时间复杂度为O(n2)</li>\n</ol>\n<h3 id=\"插入排序算法的特点\"><a href=\"#插入排序算法的特点\" class=\"headerlink\" title=\"插入排序算法的特点\"></a>插入排序算法的特点</h3><ol>\n<li>它是稳定排序，不改变相同元素原来的顺序</li>\n<li>它是in-place排序，只需要O(1)的额外内存空间</li>\n<li>它是在线排序，可以边接收数据边排序</li>\n<li>它跟我们排扑克牌的方式相似</li>\n<li>对小数据集是有效的</li>\n</ol>\n","excerpt":"<p>由这篇博文开始，来回顾一下常见的排序算法。算法实现主要以Python语言为主。</p>\n<p>插入排序，对于少量的元素排序，它是一个有效的算法。插入排序的方式有点类似于打扑克牌的时候抓牌后，然后根据牌的大小插入到合适的位置。</p>","more":"<h3 id=\"插入排序的基本思想\"><a href=\"#插入排序的基本思想\" class=\"headerlink\" title=\"插入排序的基本思想:\"></a>插入排序的基本思想:</h3><p>每步将一个待排序的对象,按其排序码大小,插入到前面已经排好序的一组对象的适当位置上,直到对象全部插入为止。</p>\n<h3 id=\"插入排序的工作过程的伪代码表示\"><a href=\"#插入排序的工作过程的伪代码表示\" class=\"headerlink\" title=\"插入排序的工作过程的伪代码表示\"></a>插入排序的工作过程的伪代码表示</h3><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSERTION-SORT(A)</div><div class=\"line\">\t<span class=\"keyword\">for</span> j = <span class=\"number\">2</span> to A.length</div><div class=\"line\">\t\t<span class=\"comment\">#取当前位置元素作为待比较元素</span></div><div class=\"line\">\t \tkey = A[j]</div><div class=\"line\">\t\t<span class=\"comment\">#获取到需要比较的元素的下标</span></div><div class=\"line\">\t\ti = j <span class=\"number\">-1</span></div><div class=\"line\">\t\t<span class=\"comment\">#进行比较，如果待比较元素比当前元素大，则将待比较元素和当前元素进行交换（从当前元素开始，逐个向后移动一个位置，为待比较元素腾出个位置来）</span></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> A[i] &gt; key</div><div class=\"line\">\t\t\tA[i+<span class=\"number\">1</span>] = A[i]</div><div class=\"line\">\t\t\ti = i <span class=\"number\">-1</span></div><div class=\"line\">\t\t\t<span class=\"comment\">#腾位置结束</span></div><div class=\"line\">\t\t<span class=\"comment\">#将待比较的元素赋值给腾出来的位置，然后继续下一次循环，直到排序完成</span></div><div class=\"line\">\t\tA[i+<span class=\"number\">1</span>] = key</div></pre></td></tr></table></figure>\n<h3 id=\"插入排序的Python代码实现\"><a href=\"#插入排序的Python代码实现\" class=\"headerlink\" title=\"插入排序的Python代码实现\"></a>插入排序的Python代码实现</h3><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\">A = [<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(Array_A)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,len(Array_A)):</div><div class=\"line\">        key = Array_A[j]</div><div class=\"line\">        i = j - <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> Array_A[i] &gt; key:</div><div class=\"line\">            Array_A[i+<span class=\"number\">1</span>] = Array_A[i]</div><div class=\"line\">            i = i <span class=\"number\">-1</span></div><div class=\"line\">        Array_A[i+<span class=\"number\">1</span>] = key</div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'第%s次插入：'</span> % (j),Array_A</div><div class=\"line\">        </div><div class=\"line\">insert_sort(A)</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'插入排序结果：'</span>,A</div></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">第<span class=\"number\">1</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">2</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">3</span>次插入： [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">4</span>次插入： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>]</div><div class=\"line\">第<span class=\"number\">5</span>次插入： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\">插入排序结果： [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div></pre></td></tr></table></figure>\n<p>通过结果可以很清楚的看到每次排序过程。</p>\n<h3 id=\"插入排序算法的分析\"><a href=\"#插入排序算法的分析\" class=\"headerlink\" title=\"插入排序算法的分析\"></a>插入排序算法的分析</h3><ol>\n<li>最好的情况下，排序前对象已经按照要求有序。比较次数：n-1;移动次数:0。对应的时间复杂度为O(n)</li>\n<li>最坏的情况下，排序前对象为要求的顺序的反序。第i趟时第i各对象必须与前面i个对象都做排序码比较，并且每做一侧比较就要做一次数据移动。时间复杂度为O(n2)</li>\n<li>如果记录是随机的，时间复杂度为O(n2)</li>\n</ol>\n<h3 id=\"插入排序算法的特点\"><a href=\"#插入排序算法的特点\" class=\"headerlink\" title=\"插入排序算法的特点\"></a>插入排序算法的特点</h3><ol>\n<li>它是稳定排序，不改变相同元素原来的顺序</li>\n<li>它是in-place排序，只需要O(1)的额外内存空间</li>\n<li>它是在线排序，可以边接收数据边排序</li>\n<li>它跟我们排扑克牌的方式相似</li>\n<li>对小数据集是有效的</li>\n</ol>"},{"title":"利用Github的webhook和tornado实现代码自动部署","date":"2016-12-04T02:39:31.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","source":"_posts/Github-Webhook.md","raw":"---\ntitle: 利用Github的webhook和tornado实现代码自动部署\ndate: 2016-12-04 10:39:31\ncategories:\n- Program\ntags:\n- Github\n- Webhook\n- 自动部署\n- code deploy\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","slug":"Github-Webhook","published":1,"updated":"2017-10-10T03:15:07.995Z","layout":"post","photos":[],"link":"","_id":"cj8lbpzhd0020gov550osah8h","content":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>\n","excerpt":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br>","more":"</p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>"},{"title":"Learn Markdown","date":"2016-07-22T14:29:18.000Z","_content":"# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","source":"_posts/Learn-Markdown.md","raw":"---\ntitle: Learn Markdown\ndate: 2016-07-22 22:29:18\ntags:\n- markdown\n- 入坑\n---\n# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","slug":"Learn-Markdown","published":1,"updated":"2017-10-10T03:15:07.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzhj0023gov5l4755fma","content":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br><a id=\"more\"></a></p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"external\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\" data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br>","more":"</p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\"data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Learn VIM","date":"2016-11-29T11:25:18.000Z","_content":"###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","source":"_posts/Learn_VIM.md","raw":"---\ntitle: Learn VIM\ndate: 2016-11-29 19:25:18\ncategories: Linux\ntags:\n- VIM\n- Linux\n- Edtor\n---\n###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","slug":"Learn_VIM","published":1,"updated":"2017-10-10T03:15:07.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzho0027gov5t0gawsqc","content":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br><a id=\"more\"></a><br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>\n","excerpt":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br>","more":"<br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>"},{"title":"Linux学习笔记之添加SWAP分区","date":"2017-05-23T14:53:19.000Z","_content":"\n这台博客所在的服务器只有740M内存，云服务器默认也是没有给SWAP分区的。刚刚我想更新一下服务器的软件包，但是报了这么一个错：\n\n```bash\n\nError downloading packages:\n  php70w-xml-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  libmount-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  grubby-8.28-21.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  httpd-tools-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  libtool-ltdl-2.4.2-22.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-intl-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  1:NetworkManager-team-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  util-linux-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  httpd-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  kernel-tools-3.10.0-514.16.1.el7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  1:NetworkManager-libnm-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-pdo-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-pecl-apcu-5.1.8-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  ntp-4.2.6p5-25.el7.centos.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  7:device-mapper-libs-1.02.135-1.el7_3.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n\n```\n\n<!-- more -->\n\n看来是内存不够了，看一下内存占用情况呢：\n\n```bash\n[root@vultr ~]# free -m\n              total        used        free      shared  buff/cache   available\nMem:            740         454         146          37         139         130\nSwap:             0           0           0\n```\n\n唉，空间确实不太充裕了，那就给它加个swap分区，让一些内存交换到硬盘上吧。\n\n#### dd分配出一块空间\n\n```bash\n[root@vultr ~]# dd if=/dev/zero of=/opt/swap bs=1024 count=1048576\n1048576+0 records in\n1048576+0 records out\n1073741824 bytes (1.1 GB) copied, 2.27196 s, 473 MB/s\n```\n\nbs=块的大小，单位bit,我这里给的1KB\n\ncount=块的数量，我这里给了1024*1024个，总计就是1G\n\n#### 将分配的空间格式化为SWAP格式\n\n```bash\n[root@vultr ~]# mkswap /opt/swap \nSetting up swapspace version 1, size = 1048572 KiB\nno label, UUID=f42645fc-5a4b-4cfd-99c5-caf6fa6070f7\n```\n\n可以看到已经为它分配了UUID。\n\n#### 将格式化好的空间挂载上\n\n```bash\n[root@vultr ~]# swapon /opt/swap \nswapon: /opt/swap: insecure permissions 0644, 0600 suggested.\n```\n\n咦，它提示说权限不太安全，那就chmod成0600吧。\n\n#### 开机自动挂载SWAP分区\n\n开机自动挂载的话，需要在/etc/fstab中添加挂载选项。\n\n```bash\n echo \"/opt/swap swap swap defaults  0 0\" >> /etc/fstab\n```\n\n好了，这样给服务器成功地加上了个SWAP分区了。再检查一下\n\n```bash\n[root@vultr ~]# free -m\n              total        used        free      shared  buff/cache   available\nMem:            740         454          62          37         222         117\nSwap:          1023           0        1023 \n```\n\nSwap分区已经不为0了，确认已经分配完成。","source":"_posts/Linux-Add-Swap.md","raw":"---\ntitle: Linux学习笔记之添加SWAP分区\ncategories:\n  - Linux\ntags:\n  - Linux\n  - SWAP\ndate: 2017-05-23 22:53:19\n---\n\n这台博客所在的服务器只有740M内存，云服务器默认也是没有给SWAP分区的。刚刚我想更新一下服务器的软件包，但是报了这么一个错：\n\n```bash\n\nError downloading packages:\n  php70w-xml-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  libmount-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  grubby-8.28-21.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  httpd-tools-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  libtool-ltdl-2.4.2-22.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-intl-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  1:NetworkManager-team-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  util-linux-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  httpd-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  kernel-tools-3.10.0-514.16.1.el7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  1:NetworkManager-libnm-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-pdo-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  php70w-pecl-apcu-5.1.8-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  ntp-4.2.6p5-25.el7.centos.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n  7:device-mapper-libs-1.02.135-1.el7_3.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory\n\n```\n\n<!-- more -->\n\n看来是内存不够了，看一下内存占用情况呢：\n\n```bash\n[root@vultr ~]# free -m\n              total        used        free      shared  buff/cache   available\nMem:            740         454         146          37         139         130\nSwap:             0           0           0\n```\n\n唉，空间确实不太充裕了，那就给它加个swap分区，让一些内存交换到硬盘上吧。\n\n#### dd分配出一块空间\n\n```bash\n[root@vultr ~]# dd if=/dev/zero of=/opt/swap bs=1024 count=1048576\n1048576+0 records in\n1048576+0 records out\n1073741824 bytes (1.1 GB) copied, 2.27196 s, 473 MB/s\n```\n\nbs=块的大小，单位bit,我这里给的1KB\n\ncount=块的数量，我这里给了1024*1024个，总计就是1G\n\n#### 将分配的空间格式化为SWAP格式\n\n```bash\n[root@vultr ~]# mkswap /opt/swap \nSetting up swapspace version 1, size = 1048572 KiB\nno label, UUID=f42645fc-5a4b-4cfd-99c5-caf6fa6070f7\n```\n\n可以看到已经为它分配了UUID。\n\n#### 将格式化好的空间挂载上\n\n```bash\n[root@vultr ~]# swapon /opt/swap \nswapon: /opt/swap: insecure permissions 0644, 0600 suggested.\n```\n\n咦，它提示说权限不太安全，那就chmod成0600吧。\n\n#### 开机自动挂载SWAP分区\n\n开机自动挂载的话，需要在/etc/fstab中添加挂载选项。\n\n```bash\n echo \"/opt/swap swap swap defaults  0 0\" >> /etc/fstab\n```\n\n好了，这样给服务器成功地加上了个SWAP分区了。再检查一下\n\n```bash\n[root@vultr ~]# free -m\n              total        used        free      shared  buff/cache   available\nMem:            740         454          62          37         222         117\nSwap:          1023           0        1023 \n```\n\nSwap分区已经不为0了，确认已经分配完成。","slug":"Linux-Add-Swap","published":1,"updated":"2017-10-10T03:15:07.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzhs002agov5gpomcuyk","content":"<p>这台博客所在的服务器只有740M内存，云服务器默认也是没有给SWAP分区的。刚刚我想更新一下服务器的软件包，但是报了这么一个错：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Error downloading packages:</div><div class=\"line\">  php70w-xml-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  libmount-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  grubby-8.28-21.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  httpd-tools-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  libtool-ltdl-2.4.2-22.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-intl-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  1:NetworkManager-team-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  util-linux-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  httpd-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  kernel-tools-3.10.0-514.16.1.el7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  1:NetworkManager-libnm-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-pdo-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-pecl-apcu-5.1.8-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  ntp-4.2.6p5-25.el7.centos.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  7:device-mapper-libs-1.02.135-1.el7_3.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>看来是内存不够了，看一下内存占用情况呢：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># free -m</span></div><div class=\"line\">              total        used        free      shared  buff/cache   available</div><div class=\"line\">Mem:            740         454         146          37         139         130</div><div class=\"line\">Swap:             0           0           0</div></pre></td></tr></table></figure>\n<p>唉，空间确实不太充裕了，那就给它加个swap分区，让一些内存交换到硬盘上吧。</p>\n<h4 id=\"dd分配出一块空间\"><a href=\"#dd分配出一块空间\" class=\"headerlink\" title=\"dd分配出一块空间\"></a>dd分配出一块空间</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># dd if=/dev/zero of=/opt/swap bs=1024 count=1048576</span></div><div class=\"line\">1048576+0 records <span class=\"keyword\">in</span></div><div class=\"line\">1048576+0 records out</div><div class=\"line\">1073741824 bytes (1.1 GB) copied, 2.27196 s, 473 MB/s</div></pre></td></tr></table></figure>\n<p>bs=块的大小，单位bit,我这里给的1KB</p>\n<p>count=块的数量，我这里给了1024*1024个，总计就是1G</p>\n<h4 id=\"将分配的空间格式化为SWAP格式\"><a href=\"#将分配的空间格式化为SWAP格式\" class=\"headerlink\" title=\"将分配的空间格式化为SWAP格式\"></a>将分配的空间格式化为SWAP格式</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mkswap /opt/swap </span></div><div class=\"line\">Setting up swapspace version 1, size = 1048572 KiB</div><div class=\"line\">no label, UUID=f42645<span class=\"built_in\">fc</span>-5a4b-4cfd-99c5-caf6fa6070f7</div></pre></td></tr></table></figure>\n<p>可以看到已经为它分配了UUID。</p>\n<h4 id=\"将格式化好的空间挂载上\"><a href=\"#将格式化好的空间挂载上\" class=\"headerlink\" title=\"将格式化好的空间挂载上\"></a>将格式化好的空间挂载上</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># swapon /opt/swap </span></div><div class=\"line\">swapon: /opt/swap: insecure permissions 0644, 0600 suggested.</div></pre></td></tr></table></figure>\n<p>咦，它提示说权限不太安全，那就chmod成0600吧。</p>\n<h4 id=\"开机自动挂载SWAP分区\"><a href=\"#开机自动挂载SWAP分区\" class=\"headerlink\" title=\"开机自动挂载SWAP分区\"></a>开机自动挂载SWAP分区</h4><p>开机自动挂载的话，需要在/etc/fstab中添加挂载选项。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/opt/swap swap swap defaults  0 0\"</span> &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>\n<p>好了，这样给服务器成功地加上了个SWAP分区了。再检查一下</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># free -m</span></div><div class=\"line\">              total        used        free      shared  buff/cache   available</div><div class=\"line\">Mem:            740         454          62          37         222         117</div><div class=\"line\">Swap:          1023           0        1023</div></pre></td></tr></table></figure>\n<p>Swap分区已经不为0了，确认已经分配完成。</p>\n","excerpt":"<p>这台博客所在的服务器只有740M内存，云服务器默认也是没有给SWAP分区的。刚刚我想更新一下服务器的软件包，但是报了这么一个错：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">Error downloading packages:</div><div class=\"line\">  php70w-xml-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  libmount-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  grubby-8.28-21.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  httpd-tools-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  libtool-ltdl-2.4.2-22.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-intl-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  1:NetworkManager-team-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  util-linux-2.23.2-33.el7_3.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  httpd-2.4.6-45.el7.centos.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  kernel-tools-3.10.0-514.16.1.el7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  1:NetworkManager-libnm-1.4.0-19.el7_3.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-pdo-7.0.19-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  php70w-pecl-apcu-5.1.8-1.w7.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  ntp-4.2.6p5-25.el7.centos.2.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div><div class=\"line\">  7:device-mapper-libs-1.02.135-1.el7_3.4.x86_64: [Errno 5] [Errno 12] Cannot allocate memory</div></pre></td></tr></table></figure>","more":"<p>看来是内存不够了，看一下内存占用情况呢：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># free -m</span></div><div class=\"line\">              total        used        free      shared  buff/cache   available</div><div class=\"line\">Mem:            740         454         146          37         139         130</div><div class=\"line\">Swap:             0           0           0</div></pre></td></tr></table></figure>\n<p>唉，空间确实不太充裕了，那就给它加个swap分区，让一些内存交换到硬盘上吧。</p>\n<h4 id=\"dd分配出一块空间\"><a href=\"#dd分配出一块空间\" class=\"headerlink\" title=\"dd分配出一块空间\"></a>dd分配出一块空间</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># dd if=/dev/zero of=/opt/swap bs=1024 count=1048576</span></div><div class=\"line\">1048576+0 records <span class=\"keyword\">in</span></div><div class=\"line\">1048576+0 records out</div><div class=\"line\">1073741824 bytes (1.1 GB) copied, 2.27196 s, 473 MB/s</div></pre></td></tr></table></figure>\n<p>bs=块的大小，单位bit,我这里给的1KB</p>\n<p>count=块的数量，我这里给了1024*1024个，总计就是1G</p>\n<h4 id=\"将分配的空间格式化为SWAP格式\"><a href=\"#将分配的空间格式化为SWAP格式\" class=\"headerlink\" title=\"将分配的空间格式化为SWAP格式\"></a>将分配的空间格式化为SWAP格式</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mkswap /opt/swap </span></div><div class=\"line\">Setting up swapspace version 1, size = 1048572 KiB</div><div class=\"line\">no label, UUID=f42645<span class=\"built_in\">fc</span>-5a4b-4cfd-99c5-caf6fa6070f7</div></pre></td></tr></table></figure>\n<p>可以看到已经为它分配了UUID。</p>\n<h4 id=\"将格式化好的空间挂载上\"><a href=\"#将格式化好的空间挂载上\" class=\"headerlink\" title=\"将格式化好的空间挂载上\"></a>将格式化好的空间挂载上</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># swapon /opt/swap </span></div><div class=\"line\">swapon: /opt/swap: insecure permissions 0644, 0600 suggested.</div></pre></td></tr></table></figure>\n<p>咦，它提示说权限不太安全，那就chmod成0600吧。</p>\n<h4 id=\"开机自动挂载SWAP分区\"><a href=\"#开机自动挂载SWAP分区\" class=\"headerlink\" title=\"开机自动挂载SWAP分区\"></a>开机自动挂载SWAP分区</h4><p>开机自动挂载的话，需要在/etc/fstab中添加挂载选项。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/opt/swap swap swap defaults  0 0\"</span> &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>\n<p>好了，这样给服务器成功地加上了个SWAP分区了。再检查一下</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># free -m</span></div><div class=\"line\">              total        used        free      shared  buff/cache   available</div><div class=\"line\">Mem:            740         454          62          37         222         117</div><div class=\"line\">Swap:          1023           0        1023</div></pre></td></tr></table></figure>\n<p>Swap分区已经不为0了，确认已经分配完成。</p>"},{"title":"Let's Encrypt && Nginx配置证书，实现https访问","date":"2016-12-15T07:01:36.000Z","_content":"\n### 0x1:Why?\n\n在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议\n\n> HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是*客户机*和一个计算机上运行的应用托管一个网站可以是*服务器*。该客户机提交一个HTTP *请求*消息发送到服务器。服务器，它提供*的资源*如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个*响应*消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。\n>\n> 网络浏览器是一个的例子*的用户代理*（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。\n>\n> 的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。\n>\n> HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。\n>\n> HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，*HTTP*和*HTTPS*。URI和超链接的HTML文档形成相互关联的超文本文档。\n>\n> HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，*等等*页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。\n\n-------引自wikipedia [维基百科.HTTP词条]( https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n\n<!-- more -->\n\n但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP.....）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。\n\n那什么又是HTTPS呢？  \n\n> HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的[HTTP](http://baike.baidu.com/view/9472.htm)通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  \n\n------引自百度百科 [百度百科.HTTPS词条](http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa)\n\n相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：\n\n1. 内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。\n2. 身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持\n3. 数据完整性。防止内容被第三方冒充或者篡改。\n\n###  0x2:How?\n\n要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl [Start ssl](https://www.startssl.com/)、Let's Encrypt [Let's Encrypt](https://letsencrypt.org/)等。我用的是Let's Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。[申请Let's encrypt证书](https://letsencrypt.org/getting-started/) 下面是我参考网上一哥们一篇博文[Jerry Qu 申请Let's Encrypt](https://imququ.com/post/letsencrypt-certificate.html)实际申请证书的具体过程如下：\n\n1. 创建帐号\n\n创建一个目录，例如 *ssl*，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件\n\n```bash\n#openssl genrsa 4096 > account.key\n```\n\n2. 创建CSR文件\n\n生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。\n\n```bash\n#openssl genrsa 4096 > domain.key\n#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可\n```\n\n3. 配置验证服务\n\nCA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let's Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。\n\n```bash\n#mkdir -p /var/blog/.well-known/acme-challenge //建立验证文件存放目录\n```\n\n4. 获取HTTPS证书\n\n先下载一个acme-tiny的脚本，保存在*ssl*目录：\n\n```bash\n#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR、验证目录，然后执行脚本：\n\n```bash\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ > ./signed.crt\n\n```\n\n如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。\n\n下载Let's Encrypt的中间证书，并和网站证书合并在一起:\n\n```bash\n#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n#cat signed.crt intermediate.pem > chained.pem\n```\n\n再把根证书和中间证书合并在一起：\n\n```bash\n#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n#cat intermediate.pem root.pem > full_chained.pem\n```\n\n5. 配置Nginx，开启https\n\n   ```bash\n   ssl_certificate     ~/ssl/chained.pem;\n   ssl_certificate_key ~/ssl/domain.key;\n   ```\n\n   ​\n\n   因为Let's Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  \n\n   ----后续，续期证书的脚本\n\n   ```bash\n   #!/bin/bash\n   openssl genrsa 4096 > account.key\n   openssl genrsa 4096 > domain,key\n   openssl req -new -sha256 -key domain.key -out domain.csr\n   python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/blog/.well-known/acme-challenge/ > ./signed.crt\n   wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n   cat signed.crt intermediate.pem > chained.pem\n   wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n   cat intermediate.pem root.pem > full_chained.pem\n\n   ```\n\n   ​\n\n### 0x3 That's All\n\n经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，*It's Encrypt!*  \n\n最后还是感谢一下Jerry Qu撰写的博客文章， [Jerry Qu](https://imququ.com/)","source":"_posts/Let-s-Encrypt.md","raw":"---\ntitle: Let's Encrypt && Nginx配置证书，实现https访问\ndate: 2016-12-15 15:01:36\ncategories:\n- Linux\ntags:\n- https\n- nginx\n---\n\n### 0x1:Why?\n\n在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议\n\n> HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是*客户机*和一个计算机上运行的应用托管一个网站可以是*服务器*。该客户机提交一个HTTP *请求*消息发送到服务器。服务器，它提供*的资源*如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个*响应*消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。\n>\n> 网络浏览器是一个的例子*的用户代理*（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。\n>\n> 的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。\n>\n> HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。\n>\n> HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，*HTTP*和*HTTPS*。URI和超链接的HTML文档形成相互关联的超文本文档。\n>\n> HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，*等等*页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。\n\n-------引自wikipedia [维基百科.HTTP词条]( https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n\n<!-- more -->\n\n但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP.....）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。\n\n那什么又是HTTPS呢？  \n\n> HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的[HTTP](http://baike.baidu.com/view/9472.htm)通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  \n\n------引自百度百科 [百度百科.HTTPS词条](http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa)\n\n相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：\n\n1. 内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。\n2. 身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持\n3. 数据完整性。防止内容被第三方冒充或者篡改。\n\n###  0x2:How?\n\n要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl [Start ssl](https://www.startssl.com/)、Let's Encrypt [Let's Encrypt](https://letsencrypt.org/)等。我用的是Let's Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。[申请Let's encrypt证书](https://letsencrypt.org/getting-started/) 下面是我参考网上一哥们一篇博文[Jerry Qu 申请Let's Encrypt](https://imququ.com/post/letsencrypt-certificate.html)实际申请证书的具体过程如下：\n\n1. 创建帐号\n\n创建一个目录，例如 *ssl*，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件\n\n```bash\n#openssl genrsa 4096 > account.key\n```\n\n2. 创建CSR文件\n\n生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。\n\n```bash\n#openssl genrsa 4096 > domain.key\n#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可\n```\n\n3. 配置验证服务\n\nCA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let's Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。\n\n```bash\n#mkdir -p /var/blog/.well-known/acme-challenge //建立验证文件存放目录\n```\n\n4. 获取HTTPS证书\n\n先下载一个acme-tiny的脚本，保存在*ssl*目录：\n\n```bash\n#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR、验证目录，然后执行脚本：\n\n```bash\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ > ./signed.crt\n\n```\n\n如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。\n\n下载Let's Encrypt的中间证书，并和网站证书合并在一起:\n\n```bash\n#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n#cat signed.crt intermediate.pem > chained.pem\n```\n\n再把根证书和中间证书合并在一起：\n\n```bash\n#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n#cat intermediate.pem root.pem > full_chained.pem\n```\n\n5. 配置Nginx，开启https\n\n   ```bash\n   ssl_certificate     ~/ssl/chained.pem;\n   ssl_certificate_key ~/ssl/domain.key;\n   ```\n\n   ​\n\n   因为Let's Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  \n\n   ----后续，续期证书的脚本\n\n   ```bash\n   #!/bin/bash\n   openssl genrsa 4096 > account.key\n   openssl genrsa 4096 > domain,key\n   openssl req -new -sha256 -key domain.key -out domain.csr\n   python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/blog/.well-known/acme-challenge/ > ./signed.crt\n   wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n   cat signed.crt intermediate.pem > chained.pem\n   wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n   cat intermediate.pem root.pem > full_chained.pem\n\n   ```\n\n   ​\n\n### 0x3 That's All\n\n经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，*It's Encrypt!*  \n\n最后还是感谢一下Jerry Qu撰写的博客文章， [Jerry Qu](https://imququ.com/)","slug":"Let-s-Encrypt","published":1,"updated":"2017-10-10T03:15:07.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzhw002cgov5nqaau021","content":"<h3 id=\"0x1-Why\"><a href=\"#0x1-Why\" class=\"headerlink\" title=\"0x1:Why?\"></a>0x1:Why?</h3><p>在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议</p>\n<blockquote>\n<p>HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是<em>客户机</em>和一个计算机上运行的应用托管一个网站可以是<em>服务器</em>。该客户机提交一个HTTP <em>请求</em>消息发送到服务器。服务器，它提供<em>的资源</em>如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个<em>响应</em>消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。</p>\n<p>网络浏览器是一个的例子<em>的用户代理</em>（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。</p>\n<p>的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。</p>\n<p>HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。</p>\n<p>HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，<em>HTTP</em>和<em>HTTPS</em>。URI和超链接的HTML文档形成相互关联的超文本文档。</p>\n<p>HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，<em>等等</em>页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。</p>\n</blockquote>\n<p>——-引自wikipedia <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"external\">维基百科.HTTP词条</a></p>\n<a id=\"more\"></a>\n<p>但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP…..）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。</p>\n<p>那什么又是HTTPS呢？  </p>\n<blockquote>\n<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的<a href=\"http://baike.baidu.com/view/9472.htm\" target=\"_blank\" rel=\"external\">HTTP</a>通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  </p>\n</blockquote>\n<p>——引自百度百科 <a href=\"http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa\" target=\"_blank\" rel=\"external\">百度百科.HTTPS词条</a></p>\n<p>相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：</p>\n<ol>\n<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li>\n<li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li>\n<li>数据完整性。防止内容被第三方冒充或者篡改。</li>\n</ol>\n<h3 id=\"0x2-How\"><a href=\"#0x2-How\" class=\"headerlink\" title=\"0x2:How?\"></a>0x2:How?</h3><p>要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl <a href=\"https://www.startssl.com/\" target=\"_blank\" rel=\"external\">Start ssl</a>、Let’s Encrypt <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a>等。我用的是Let’s Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。<a href=\"https://letsencrypt.org/getting-started/\" target=\"_blank\" rel=\"external\">申请Let’s encrypt证书</a> 下面是我参考网上一哥们一篇博文<a href=\"https://imququ.com/post/letsencrypt-certificate.html\" target=\"_blank\" rel=\"external\">Jerry Qu 申请Let’s Encrypt</a>实际申请证书的具体过程如下：</p>\n<ol>\n<li>创建帐号</li>\n</ol>\n<p>创建一个目录，例如 <em>ssl</em>，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; account.key</span></div></pre></td></tr></table></figure>\n<ol>\n<li>创建CSR文件</li>\n</ol>\n<p>生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; domain.key</span></div><div class=\"line\"><span class=\"comment\">#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可</span></div></pre></td></tr></table></figure>\n<ol>\n<li>配置验证服务</li>\n</ol>\n<p>CA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let’s Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mkdir -p /var/blog/.well-known/acme-challenge //建立验证文件存放目录</span></div></pre></td></tr></table></figure>\n<ol>\n<li>获取HTTPS证书</li>\n</ol>\n<p>先下载一个acme-tiny的脚本，保存在<em>ssl</em>目录：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span></div></pre></td></tr></table></figure>\n<p>指定账户私钥、CSR、验证目录，然后执行脚本：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ &gt; ./signed.crt</div></pre></td></tr></table></figure>\n<p>如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。</p>\n<p>下载Let’s Encrypt的中间证书，并和网站证书合并在一起:</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span></div><div class=\"line\"><span class=\"comment\">#cat signed.crt intermediate.pem &gt; chained.pem</span></div></pre></td></tr></table></figure>\n<p>再把根证书和中间证书合并在一起：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</span></div><div class=\"line\"><span class=\"comment\">#cat intermediate.pem root.pem &gt; full_chained.pem</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>配置Nginx，开启https</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_certificate     ~/ssl/chained.pem;</div><div class=\"line\">ssl_certificate_key ~/ssl/domain.key;</div></pre></td></tr></table></figure>\n<p>​</p>\n<p>因为Let’s Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  </p>\n<p>—-后续，续期证书的脚本</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">openssl genrsa 4096 &gt; account.key</div><div class=\"line\">openssl genrsa 4096 &gt; domain,key</div><div class=\"line\">openssl req -new -sha256 -key domain.key -out domain.csr</div><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/blog/.well-known/acme-challenge/ &gt; ./signed.crt</div><div class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</div><div class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</div><div class=\"line\">wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</div><div class=\"line\">cat intermediate.pem root.pem &gt; full_chained.pem</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"0x3-That’s-All\"><a href=\"#0x3-That’s-All\" class=\"headerlink\" title=\"0x3 That’s All\"></a>0x3 That’s All</h3><p>经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，<em>It’s Encrypt!</em>  </p>\n<p>最后还是感谢一下Jerry Qu撰写的博客文章， <a href=\"https://imququ.com/\" target=\"_blank\" rel=\"external\">Jerry Qu</a></p>\n","excerpt":"<h3 id=\"0x1-Why\"><a href=\"#0x1-Why\" class=\"headerlink\" title=\"0x1:Why?\"></a>0x1:Why?</h3><p>在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议</p>\n<blockquote>\n<p>HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是<em>客户机</em>和一个计算机上运行的应用托管一个网站可以是<em>服务器</em>。该客户机提交一个HTTP <em>请求</em>消息发送到服务器。服务器，它提供<em>的资源</em>如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个<em>响应</em>消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。</p>\n<p>网络浏览器是一个的例子<em>的用户代理</em>（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。</p>\n<p>的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。</p>\n<p>HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。</p>\n<p>HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，<em>HTTP</em>和<em>HTTPS</em>。URI和超链接的HTML文档形成相互关联的超文本文档。</p>\n<p>HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，<em>等等</em>页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。</p>\n</blockquote>\n<p>——-引自wikipedia <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">维基百科.HTTP词条</a></p>","more":"<p>但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP…..）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。</p>\n<p>那什么又是HTTPS呢？  </p>\n<blockquote>\n<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的<a href=\"http://baike.baidu.com/view/9472.htm\">HTTP</a>通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  </p>\n</blockquote>\n<p>——引自百度百科 <a href=\"http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa\">百度百科.HTTPS词条</a></p>\n<p>相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：</p>\n<ol>\n<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li>\n<li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li>\n<li>数据完整性。防止内容被第三方冒充或者篡改。</li>\n</ol>\n<h3 id=\"0x2-How\"><a href=\"#0x2-How\" class=\"headerlink\" title=\"0x2:How?\"></a>0x2:How?</h3><p>要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl <a href=\"https://www.startssl.com/\">Start ssl</a>、Let’s Encrypt <a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>等。我用的是Let’s Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。<a href=\"https://letsencrypt.org/getting-started/\">申请Let’s encrypt证书</a> 下面是我参考网上一哥们一篇博文<a href=\"https://imququ.com/post/letsencrypt-certificate.html\">Jerry Qu 申请Let’s Encrypt</a>实际申请证书的具体过程如下：</p>\n<ol>\n<li>创建帐号</li>\n</ol>\n<p>创建一个目录，例如 <em>ssl</em>，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; account.key</span></div></pre></td></tr></table></figure>\n<ol>\n<li>创建CSR文件</li>\n</ol>\n<p>生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; domain.key</span></div><div class=\"line\"><span class=\"comment\">#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可</span></div></pre></td></tr></table></figure>\n<ol>\n<li>配置验证服务</li>\n</ol>\n<p>CA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let’s Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mkdir -p /var/blog/.well-known/acme-challenge //建立验证文件存放目录</span></div></pre></td></tr></table></figure>\n<ol>\n<li>获取HTTPS证书</li>\n</ol>\n<p>先下载一个acme-tiny的脚本，保存在<em>ssl</em>目录：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span></div></pre></td></tr></table></figure>\n<p>指定账户私钥、CSR、验证目录，然后执行脚本：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ &gt; ./signed.crt</div></pre></td></tr></table></figure>\n<p>如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。</p>\n<p>下载Let’s Encrypt的中间证书，并和网站证书合并在一起:</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span></div><div class=\"line\"><span class=\"comment\">#cat signed.crt intermediate.pem &gt; chained.pem</span></div></pre></td></tr></table></figure>\n<p>再把根证书和中间证书合并在一起：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</span></div><div class=\"line\"><span class=\"comment\">#cat intermediate.pem root.pem &gt; full_chained.pem</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>配置Nginx，开启https</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_certificate     ~/ssl/chained.pem;</div><div class=\"line\">ssl_certificate_key ~/ssl/domain.key;</div></pre></td></tr></table></figure>\n<p>​</p>\n<p>因为Let’s Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  </p>\n<p>—-后续，续期证书的脚本</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\">openssl genrsa 4096 &gt; account.key</div><div class=\"line\">openssl genrsa 4096 &gt; domain,key</div><div class=\"line\">openssl req -new -sha256 -key domain.key -out domain.csr</div><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/blog/.well-known/acme-challenge/ &gt; ./signed.crt</div><div class=\"line\">wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</div><div class=\"line\">cat signed.crt intermediate.pem &gt; chained.pem</div><div class=\"line\">wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</div><div class=\"line\">cat intermediate.pem root.pem &gt; full_chained.pem</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"0x3-That’s-All\"><a href=\"#0x3-That’s-All\" class=\"headerlink\" title=\"0x3 That’s All\"></a>0x3 That’s All</h3><p>经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，<em>It’s Encrypt!</em>  </p>\n<p>最后还是感谢一下Jerry Qu撰写的博客文章， <a href=\"https://imququ.com/\">Jerry Qu</a></p>"},{"title":"DjangoRESTframework-序列化（Serializetion）","date":"2017-10-10T06:55:21.000Z","_content":"\n### DjangoRESTframework --------序列化（Serializetion）\n\n#### 简介\n\n这个教程将建立一个简单的Web API代码片段。通过这个例子将想你介绍众多的REST framework的特性，以及让你深入理解每个组件是怎么组合在一起运行的。\n\n那就开始吧！\n\n<!--more-->\n\n#### 建立一个新的环境\n\n载我们开始干活之前我们需要使用virtualenv建立一个新的环境，它能够确保我们的包的配置能够很好的和我们正在开发的其他项目保持很好的隔离。\n\n```shell\nvirtualenv env\nsource env/bin/activeate  #windows:env/scripts/activate.bat\n```\n\n之后，我们进入到virtualenv环境，我们安装我们需要的package包。\n\n```shell\npip install django\npip install djangorestframework\npip install pygments #这个用来实现代码高亮\n```\n\n小纸条：如果需要退出virtualenv环境，只需要输入deactivate即可。\n\n#### 开始编码\n\n现在可以开始编码了，在开始工作之前，首先建立一个新的工程先。\n\n```shell\ncd ~\ndjango-admin startproject tutorial\ncd tutorial\n```\n\n工程建立好之后，我们就可以创建一个新的app，我们将使用这个app来建立所需的Web API。\n\n```shell\npython manage.py startapp snippets\n```\n\n我们需要添加新的的snippets app，将rest_framework注册到INSTALLED_APPS。这些操作需要编辑tutorial/settings.py这个文件：\n\n```python\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n    'snippets.apps.SnippetsConfig',\n)\n```\n\n请注意，如果你使用Django的版本小于1.9，你需要将snippets.app.SnippetsConfig替换为snippets。Let's go on.\n\n#### 创建一个下一步工作所需的model\n\n为了这个教程能够继续下去，我们需要创建一个简单的Snippet model，它用来存储snippets的代码。编辑文件snippets/models.py。注意：添加注释是一个良好的编程习惯。\n\n```python\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted((item, item) for item in get_all_styles())\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n\n    class Meta:\n        ordering = ('created',)\n```\n\n我们也需要创建一个用于初始化迁移我们的model，同时在第一次需要同步数据库。\n\n```python\npython manage.py makemigrations snippets\npython manage.py migrate\n```\n\n#### 创建Serializer类\n\n要实现我们的Web API，第一件需要做的事情是提供一个可以序列化和反序列化的snippets实例，比如用json来表示。我们可以定义serializers，它和Django的forms非常类似。在snippets目录中新建一个名为serializers.py的文件，文件内容如下：\n\n```python\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\n\n\nclass SnippetSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField(required=False, allow_blank=True, max_length=100)\n    code = serializers.CharField(style={'base_template': 'textarea.html'})\n    linenos = serializers.BooleanField(required=False)\n    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')\n    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')\n\n    def create(self, validated_data):\n        \"\"\"\n        Create and return a new `Snippet` instance, given the validated data.\n        \"\"\"\n        return Snippet.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        Update and return an existing `Snippet` instance, given the validated data.\n        \"\"\"\n        instance.title = validated_data.get('title', instance.title)\n        instance.code = validated_data.get('code', instance.code)\n        instance.linenos = validated_data.get('linenos', instance.linenos)\n        instance.language = validated_data.get('language', instance.language)\n        instance.style = validated_data.get('style', instance.style)\n        instance.save()\n        return instance\n```\n\nserializer类的第一部分定义了需要序列化和反序列化的成员变量，create()方法和update()方法定义了如何在调用serializer.save()方法时如何创建和修改实例。\n\nserializer类和Django的form类非常类似，都包含了类似的数据有效性验证机制和丰富的方法，比如required，max_length,default。\n\n数据域的标志能够控制serializer如何在特定的情况下显示，比如当在html页面中渲染{'base_template': ‘textarea.html’}，以上的标签等价于在Django的form类中的widget=widget.Textarea。这个在控制如何展示可视化API的过程中非常有用。接下来的的教程中我们将会体会到。\n\n实际上我们可以使用ModelSerializer来节约时间，这个之后会用到，当然我们需要确保我们的serializer的定义是明确的。\n\n#### 使用Serializers\n\n在继续接下来的工作之前，我们需要进入到Django shell中。\n\n```shell\npython manage.py shell\n```\n\n好了，我们需要引入一些内容，并创建一些代码片段去处理它。\n\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\n\nsnippet = Snippet(code='foo = \"bar\"\\n')\nsnippet.save()\n\nsnippet = Snippet(code='print \"hello, world\"\\n')\nsnippet.save()\n```\n\n我们已经有了一些snippets实例，让我们看看将它们序列化之后的样子吧。\n\n```python\nserializer = SnippetSerializer(snippet)\nserializer.data\n# {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'}\n```\n\n这里，我们已经将model实例转换成了Python的原生数据类型，为了最终序列化结果，我们将数据转换成json格式。\n\n```python\ncontent = JSONRenderer().render(serializer.data)\ncontent\n# '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}'\n```\n\n反序列化也是类似的，首先我们将Python原生数据类型转换成一个stream\n\n```python\nfrom django.utils.six import BytesIO\n\nstream = BytesIO(content)\ndata = JSONParser().parse(stream)\n```\n\n然后我们将装换成原生数据类型的model实例重新序列化为一个Python object实例。\n\n```python\nserializer = SnippetSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])\nserializer.save()\n# <Snippet: Snippet object>\n```\n\n注意：这个API和Django forms非常类似。它们的相似性在我们开始写视图的时候将变得更加明显。\n\n我们也可以序列化查询的数据集，只需要在序列化方法中添加many=True参数即可。\n\n```python\nserializer = SnippetSerializer(Snippet.objects.all(), many=True)\nserializer.data\n# [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]\n```\n\n#### 使用ModelSerializers\n\n我们的SnippetSerializer类已经包含了Snippet这个model中的非常多的信息。它能够让我们的代码显得更加的简洁。\n\n同样的，Django也提供了form类和ModelForm类，REST framework提供了Serializer类和ModelSerializer类。\n\n接下来让我们用ModelSerializer类来重构一下我们的API，打开文件snippets/serializers.py，将SnippetSerializer类替换成下面的样子：\n\n```python\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')\n```\n\n一个好的serializer的特点就是你能够在serializer实例中检查所有的数据成员，如果要打印数据表现，使用Django shell  :python manage.py shell\n\n```python\nfrom snippets.serializers import SnippetSerializer\nserializer = SnippetSerializer()\nprint(repr(serializer))\n# SnippetSerializer():\n#    id = IntegerField(label='ID', read_only=True)\n#    title = CharField(allow_blank=True, max_length=100, required=False)\n#    code = CharField(style={'base_template': 'textarea.html'})\n#    linenos = BooleanField(required=False)\n#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...\n#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...\n```\n\n使用ModelSerializer类需要记住的重要的一点就是不要做特别的操作，它知识简单的创建一个序列化类：\n\n- 自动识别字段\n\n- 简单的实现默认的create()方法和update()方法。\n\n#### 使用Serializer来编写Django views\n\n让我们来尝试用新的serializer类来写一些API视图。这里，我们不会使用任何REST framework的其他特性，我们仅仅写点views来作为传统的Django views。编辑文件snippets/views.py，文件内容如下：\n\n```python\nfrom django.http import HttpResponse, JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n```\n\n访问我们的API的根路径能够列出当前存在的snippets或者创建一个新的snippets。\n\n```python\n@csrf_exempt\ndef snippet_list(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return JsonResponse(serializer.data, safe=False)\n\n    elif request.method == 'POST':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data, status=201)\n        return JsonResponse(serializer.errors, status=400)\n```\n\n注意，因为我们希望允许POST视图中的from表单，但是客户端不存在csrf token，我们需要添加注解csrf_exempt。这不是你平常需要做的，REST framework 的views能够控制敏感操作，这里的目的不是研究它。\n\n我们也需要一个view来确保snippet的独立性，并且用来获取、更新和删除snippet。\n\n```python\n@csrf_exempt\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return HttpResponse(status=404)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return JsonResponse(serializer.data)\n\n    elif request.method == 'PUT':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(snippet, data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data)\n        return JsonResponse(serializer.errors, status=400)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return HttpResponse(status=204)\n```\n\n最后，我们需要将这些view展示出来，创建一个文件snippets/urls.py:\n\n```python\nfrom django.conf.urls import url\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail),\n]\n```\n\n我们还需要编辑应用根路径下的urls.py文件，用以配置app所需的url\n\n```python\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('snippets.urls')),\n]\n```\n\n需要注意的是，这里还有一些小问题我们没有进行处理。如果我们发送的是json格式的数据，或者请求没有被适当的view处理，服务器将会反悔500“server error”错误。\n\n#### 测试我们的第一个Web API\n\n首先要开启测试服务器，先退出Django shell\n\n```python\nquit()\n```\n\n开启测试服务器：\n\n```python\npython manage.py runserver\n\nValidating models...\n\n0 errors found\nDjango version 1.11, using settings 'tutorial.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\n\n\n测试API我们可以使用curl或者httpie。httpie是使用python编写的工具，当然安装它也很简单：\n\n```shell\npip install httpie\n```\n\n如果pip安装不上的话，还可以上使用easy_intall尝试一下：\n\n```shell\neasy_install httpie\n```\n\n使用httppie测试结果如下：\n\n```python\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/\nHTTP/1.0 200 OK\nContent-Length: 354\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 06:46:43 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\n\n```\n\n\n\n当然，使用浏览器直接查看这个API也是可以的。浏览器的效果：\n\n![image](/blogimg/rest-ser-1.png)\n![image](/blogimg/rest-ser-2.png)\n\n翻译自：http://www.django-rest-framework.org/tutorial/1-serialization/","source":"_posts/DjangoRESTframework-serializetion.md","raw":"---\ntitle: DjangoRESTframework-序列化（Serializetion）\ncategories:\n  - Program\ntags:\n  - Django djangorestframework\ndate: 2017-10-10 14:55:21\n---\n\n### DjangoRESTframework --------序列化（Serializetion）\n\n#### 简介\n\n这个教程将建立一个简单的Web API代码片段。通过这个例子将想你介绍众多的REST framework的特性，以及让你深入理解每个组件是怎么组合在一起运行的。\n\n那就开始吧！\n\n<!--more-->\n\n#### 建立一个新的环境\n\n载我们开始干活之前我们需要使用virtualenv建立一个新的环境，它能够确保我们的包的配置能够很好的和我们正在开发的其他项目保持很好的隔离。\n\n```shell\nvirtualenv env\nsource env/bin/activeate  #windows:env/scripts/activate.bat\n```\n\n之后，我们进入到virtualenv环境，我们安装我们需要的package包。\n\n```shell\npip install django\npip install djangorestframework\npip install pygments #这个用来实现代码高亮\n```\n\n小纸条：如果需要退出virtualenv环境，只需要输入deactivate即可。\n\n#### 开始编码\n\n现在可以开始编码了，在开始工作之前，首先建立一个新的工程先。\n\n```shell\ncd ~\ndjango-admin startproject tutorial\ncd tutorial\n```\n\n工程建立好之后，我们就可以创建一个新的app，我们将使用这个app来建立所需的Web API。\n\n```shell\npython manage.py startapp snippets\n```\n\n我们需要添加新的的snippets app，将rest_framework注册到INSTALLED_APPS。这些操作需要编辑tutorial/settings.py这个文件：\n\n```python\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n    'snippets.apps.SnippetsConfig',\n)\n```\n\n请注意，如果你使用Django的版本小于1.9，你需要将snippets.app.SnippetsConfig替换为snippets。Let's go on.\n\n#### 创建一个下一步工作所需的model\n\n为了这个教程能够继续下去，我们需要创建一个简单的Snippet model，它用来存储snippets的代码。编辑文件snippets/models.py。注意：添加注释是一个良好的编程习惯。\n\n```python\nfrom django.db import models\nfrom pygments.lexers import get_all_lexers\nfrom pygments.styles import get_all_styles\n\nLEXERS = [item for item in get_all_lexers() if item[1]]\nLANGUAGE_CHOICES = sorted([(item[1][0], item[0]) for item in LEXERS])\nSTYLE_CHOICES = sorted((item, item) for item in get_all_styles())\n\n\nclass Snippet(models.Model):\n    created = models.DateTimeField(auto_now_add=True)\n    title = models.CharField(max_length=100, blank=True, default='')\n    code = models.TextField()\n    linenos = models.BooleanField(default=False)\n    language = models.CharField(choices=LANGUAGE_CHOICES, default='python', max_length=100)\n    style = models.CharField(choices=STYLE_CHOICES, default='friendly', max_length=100)\n\n    class Meta:\n        ordering = ('created',)\n```\n\n我们也需要创建一个用于初始化迁移我们的model，同时在第一次需要同步数据库。\n\n```python\npython manage.py makemigrations snippets\npython manage.py migrate\n```\n\n#### 创建Serializer类\n\n要实现我们的Web API，第一件需要做的事情是提供一个可以序列化和反序列化的snippets实例，比如用json来表示。我们可以定义serializers，它和Django的forms非常类似。在snippets目录中新建一个名为serializers.py的文件，文件内容如下：\n\n```python\nfrom rest_framework import serializers\nfrom snippets.models import Snippet, LANGUAGE_CHOICES, STYLE_CHOICES\n\n\nclass SnippetSerializer(serializers.Serializer):\n    id = serializers.IntegerField(read_only=True)\n    title = serializers.CharField(required=False, allow_blank=True, max_length=100)\n    code = serializers.CharField(style={'base_template': 'textarea.html'})\n    linenos = serializers.BooleanField(required=False)\n    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default='python')\n    style = serializers.ChoiceField(choices=STYLE_CHOICES, default='friendly')\n\n    def create(self, validated_data):\n        \"\"\"\n        Create and return a new `Snippet` instance, given the validated data.\n        \"\"\"\n        return Snippet.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        Update and return an existing `Snippet` instance, given the validated data.\n        \"\"\"\n        instance.title = validated_data.get('title', instance.title)\n        instance.code = validated_data.get('code', instance.code)\n        instance.linenos = validated_data.get('linenos', instance.linenos)\n        instance.language = validated_data.get('language', instance.language)\n        instance.style = validated_data.get('style', instance.style)\n        instance.save()\n        return instance\n```\n\nserializer类的第一部分定义了需要序列化和反序列化的成员变量，create()方法和update()方法定义了如何在调用serializer.save()方法时如何创建和修改实例。\n\nserializer类和Django的form类非常类似，都包含了类似的数据有效性验证机制和丰富的方法，比如required，max_length,default。\n\n数据域的标志能够控制serializer如何在特定的情况下显示，比如当在html页面中渲染{'base_template': ‘textarea.html’}，以上的标签等价于在Django的form类中的widget=widget.Textarea。这个在控制如何展示可视化API的过程中非常有用。接下来的的教程中我们将会体会到。\n\n实际上我们可以使用ModelSerializer来节约时间，这个之后会用到，当然我们需要确保我们的serializer的定义是明确的。\n\n#### 使用Serializers\n\n在继续接下来的工作之前，我们需要进入到Django shell中。\n\n```shell\npython manage.py shell\n```\n\n好了，我们需要引入一些内容，并创建一些代码片段去处理它。\n\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\n\nsnippet = Snippet(code='foo = \"bar\"\\n')\nsnippet.save()\n\nsnippet = Snippet(code='print \"hello, world\"\\n')\nsnippet.save()\n```\n\n我们已经有了一些snippets实例，让我们看看将它们序列化之后的样子吧。\n\n```python\nserializer = SnippetSerializer(snippet)\nserializer.data\n# {'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'}\n```\n\n这里，我们已经将model实例转换成了Python的原生数据类型，为了最终序列化结果，我们将数据转换成json格式。\n\n```python\ncontent = JSONRenderer().render(serializer.data)\ncontent\n# '{\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"}'\n```\n\n反序列化也是类似的，首先我们将Python原生数据类型转换成一个stream\n\n```python\nfrom django.utils.six import BytesIO\n\nstream = BytesIO(content)\ndata = JSONParser().parse(stream)\n```\n\n然后我们将装换成原生数据类型的model实例重新序列化为一个Python object实例。\n\n```python\nserializer = SnippetSerializer(data=data)\nserializer.is_valid()\n# True\nserializer.validated_data\n# OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])\nserializer.save()\n# <Snippet: Snippet object>\n```\n\n注意：这个API和Django forms非常类似。它们的相似性在我们开始写视图的时候将变得更加明显。\n\n我们也可以序列化查询的数据集，只需要在序列化方法中添加many=True参数即可。\n\n```python\nserializer = SnippetSerializer(Snippet.objects.all(), many=True)\nserializer.data\n# [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]\n```\n\n#### 使用ModelSerializers\n\n我们的SnippetSerializer类已经包含了Snippet这个model中的非常多的信息。它能够让我们的代码显得更加的简洁。\n\n同样的，Django也提供了form类和ModelForm类，REST framework提供了Serializer类和ModelSerializer类。\n\n接下来让我们用ModelSerializer类来重构一下我们的API，打开文件snippets/serializers.py，将SnippetSerializer类替换成下面的样子：\n\n```python\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')\n```\n\n一个好的serializer的特点就是你能够在serializer实例中检查所有的数据成员，如果要打印数据表现，使用Django shell  :python manage.py shell\n\n```python\nfrom snippets.serializers import SnippetSerializer\nserializer = SnippetSerializer()\nprint(repr(serializer))\n# SnippetSerializer():\n#    id = IntegerField(label='ID', read_only=True)\n#    title = CharField(allow_blank=True, max_length=100, required=False)\n#    code = CharField(style={'base_template': 'textarea.html'})\n#    linenos = BooleanField(required=False)\n#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...\n#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...\n```\n\n使用ModelSerializer类需要记住的重要的一点就是不要做特别的操作，它知识简单的创建一个序列化类：\n\n- 自动识别字段\n\n- 简单的实现默认的create()方法和update()方法。\n\n#### 使用Serializer来编写Django views\n\n让我们来尝试用新的serializer类来写一些API视图。这里，我们不会使用任何REST framework的其他特性，我们仅仅写点views来作为传统的Django views。编辑文件snippets/views.py，文件内容如下：\n\n```python\nfrom django.http import HttpResponse, JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework.renderers import JSONRenderer\nfrom rest_framework.parsers import JSONParser\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\n```\n\n访问我们的API的根路径能够列出当前存在的snippets或者创建一个新的snippets。\n\n```python\n@csrf_exempt\ndef snippet_list(request):\n    \"\"\"\n    List all code snippets, or create a new snippet.\n    \"\"\"\n    if request.method == 'GET':\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return JsonResponse(serializer.data, safe=False)\n\n    elif request.method == 'POST':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data, status=201)\n        return JsonResponse(serializer.errors, status=400)\n```\n\n注意，因为我们希望允许POST视图中的from表单，但是客户端不存在csrf token，我们需要添加注解csrf_exempt。这不是你平常需要做的，REST framework 的views能够控制敏感操作，这里的目的不是研究它。\n\n我们也需要一个view来确保snippet的独立性，并且用来获取、更新和删除snippet。\n\n```python\n@csrf_exempt\ndef snippet_detail(request, pk):\n    \"\"\"\n    Retrieve, update or delete a code snippet.\n    \"\"\"\n    try:\n        snippet = Snippet.objects.get(pk=pk)\n    except Snippet.DoesNotExist:\n        return HttpResponse(status=404)\n\n    if request.method == 'GET':\n        serializer = SnippetSerializer(snippet)\n        return JsonResponse(serializer.data)\n\n    elif request.method == 'PUT':\n        data = JSONParser().parse(request)\n        serializer = SnippetSerializer(snippet, data=data)\n        if serializer.is_valid():\n            serializer.save()\n            return JsonResponse(serializer.data)\n        return JsonResponse(serializer.errors, status=400)\n\n    elif request.method == 'DELETE':\n        snippet.delete()\n        return HttpResponse(status=204)\n```\n\n最后，我们需要将这些view展示出来，创建一个文件snippets/urls.py:\n\n```python\nfrom django.conf.urls import url\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.snippet_detail),\n]\n```\n\n我们还需要编辑应用根路径下的urls.py文件，用以配置app所需的url\n\n```python\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('snippets.urls')),\n]\n```\n\n需要注意的是，这里还有一些小问题我们没有进行处理。如果我们发送的是json格式的数据，或者请求没有被适当的view处理，服务器将会反悔500“server error”错误。\n\n#### 测试我们的第一个Web API\n\n首先要开启测试服务器，先退出Django shell\n\n```python\nquit()\n```\n\n开启测试服务器：\n\n```python\npython manage.py runserver\n\nValidating models...\n\n0 errors found\nDjango version 1.11, using settings 'tutorial.settings'\nDevelopment server is running at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\n\n\n测试API我们可以使用curl或者httpie。httpie是使用python编写的工具，当然安装它也很简单：\n\n```shell\npip install httpie\n```\n\n如果pip安装不上的话，还可以上使用easy_intall尝试一下：\n\n```shell\neasy_install httpie\n```\n\n使用httppie测试结果如下：\n\n```python\nPS E:\\Study\\Serializer_tutorial\\tutorial> http http://127.0.0.1:8000/snippets/\nHTTP/1.0 200 OK\nContent-Length: 354\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 06:46:43 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"code\": \"foo = \\\"bar\\\"\\n\",\n        \"id\": 1,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 2,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    },\n    {\n        \"code\": \"print \\\"hello, world\\n\\\"\",\n        \"id\": 3,\n        \"language\": \"python\",\n        \"linenos\": false,\n        \"style\": \"friendly\",\n        \"title\": \"\"\n    }\n]\n\n```\n\n\n\n当然，使用浏览器直接查看这个API也是可以的。浏览器的效果：\n\n![image](/blogimg/rest-ser-1.png)\n![image](/blogimg/rest-ser-2.png)\n\n翻译自：http://www.django-rest-framework.org/tutorial/1-serialization/","slug":"DjangoRESTframework-serializetion","published":1,"updated":"2017-10-10T06:57:20.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzhz002egov58k9nrkzo","content":"<h3 id=\"DjangoRESTframework-——–序列化（Serializetion）\"><a href=\"#DjangoRESTframework-——–序列化（Serializetion）\" class=\"headerlink\" title=\"DjangoRESTframework ——–序列化（Serializetion）\"></a>DjangoRESTframework ——–序列化（Serializetion）</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>这个教程将建立一个简单的Web API代码片段。通过这个例子将想你介绍众多的REST framework的特性，以及让你深入理解每个组件是怎么组合在一起运行的。</p>\n<p>那就开始吧！</p>\n<a id=\"more\"></a>\n<h4 id=\"建立一个新的环境\"><a href=\"#建立一个新的环境\" class=\"headerlink\" title=\"建立一个新的环境\"></a>建立一个新的环境</h4><p>载我们开始干活之前我们需要使用virtualenv建立一个新的环境，它能够确保我们的包的配置能够很好的和我们正在开发的其他项目保持很好的隔离。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv env</div><div class=\"line\">source env/bin/activeate  #windows:env/scripts/activate.bat</div></pre></td></tr></table></figure>\n<p>之后，我们进入到virtualenv环境，我们安装我们需要的package包。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django</div><div class=\"line\">pip install djangorestframework</div><div class=\"line\">pip install pygments #这个用来实现代码高亮</div></pre></td></tr></table></figure>\n<p>小纸条：如果需要退出virtualenv环境，只需要输入deactivate即可。</p>\n<h4 id=\"开始编码\"><a href=\"#开始编码\" class=\"headerlink\" title=\"开始编码\"></a>开始编码</h4><p>现在可以开始编码了，在开始工作之前，首先建立一个新的工程先。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~</div><div class=\"line\">django-admin startproject tutorial</div><div class=\"line\">cd tutorial</div></pre></td></tr></table></figure>\n<p>工程建立好之后，我们就可以创建一个新的app，我们将使用这个app来建立所需的Web API。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp snippets</div></pre></td></tr></table></figure>\n<p>我们需要添加新的的snippets app，将rest_framework注册到INSTALLED_APPS。这些操作需要编辑tutorial/settings.py这个文件：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">    <span class=\"string\">'snippets.apps.SnippetsConfig'</span>,</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>请注意，如果你使用Django的版本小于1.9，你需要将snippets.app.SnippetsConfig替换为snippets。Let’s go on.</p>\n<h4 id=\"创建一个下一步工作所需的model\"><a href=\"#创建一个下一步工作所需的model\" class=\"headerlink\" title=\"创建一个下一步工作所需的model\"></a>创建一个下一步工作所需的model</h4><p>为了这个教程能够继续下去，我们需要创建一个简单的Snippet model，它用来存储snippets的代码。编辑文件snippets/models.py。注意：添加注释是一个良好的编程习惯。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"><span class=\"keyword\">from</span> pygments.lexers <span class=\"keyword\">import</span> get_all_lexers</div><div class=\"line\"><span class=\"keyword\">from</span> pygments.styles <span class=\"keyword\">import</span> get_all_styles</div><div class=\"line\"></div><div class=\"line\">LEXERS = [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> get_all_lexers() <span class=\"keyword\">if</span> item[<span class=\"number\">1</span>]]</div><div class=\"line\">LANGUAGE_CHOICES = sorted([(item[<span class=\"number\">1</span>][<span class=\"number\">0</span>], item[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> LEXERS])</div><div class=\"line\">STYLE_CHOICES = sorted((item, item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> get_all_styles())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Snippet</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    created = models.DateTimeField(auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    code = models.TextField()</div><div class=\"line\">    linenos = models.BooleanField(default=<span class=\"keyword\">False</span>)</div><div class=\"line\">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class=\"string\">'python'</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    style = models.CharField(choices=STYLE_CHOICES, default=<span class=\"string\">'friendly'</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        ordering = (<span class=\"string\">'created'</span>,)</div></pre></td></tr></table></figure>\n<p>我们也需要创建一个用于初始化迁移我们的model，同时在第一次需要同步数据库。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py makemigrations snippets</div><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<h4 id=\"创建Serializer类\"><a href=\"#创建Serializer类\" class=\"headerlink\" title=\"创建Serializer类\"></a>创建Serializer类</h4><p>要实现我们的Web API，第一件需要做的事情是提供一个可以序列化和反序列化的snippets实例，比如用json来表示。我们可以定义serializers，它和Django的forms非常类似。在snippets目录中新建一个名为serializers.py的文件，文件内容如下：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.Serializer)</span>:</span></div><div class=\"line\">    id = serializers.IntegerField(read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = serializers.CharField(required=<span class=\"keyword\">False</span>, allow_blank=<span class=\"keyword\">True</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    code = serializers.CharField(style=&#123;<span class=\"string\">'base_template'</span>: <span class=\"string\">'textarea.html'</span>&#125;)</div><div class=\"line\">    linenos = serializers.BooleanField(required=<span class=\"keyword\">False</span>)</div><div class=\"line\">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class=\"string\">'python'</span>)</div><div class=\"line\">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class=\"string\">'friendly'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        Create and return a new `Snippet` instance, given the validated data.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">return</span> Snippet.objects.create(**validated_data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, instance, validated_data)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</span></div><div class=\"line\">        Update and return an existing `Snippet` instance, given the validated data.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        instance.title = validated_data.get(<span class=\"string\">'title'</span>, instance.title)</div><div class=\"line\">        instance.code = validated_data.get(<span class=\"string\">'code'</span>, instance.code)</div><div class=\"line\">        instance.linenos = validated_data.get(<span class=\"string\">'linenos'</span>, instance.linenos)</div><div class=\"line\">        instance.language = validated_data.get(<span class=\"string\">'language'</span>, instance.language)</div><div class=\"line\">        instance.style = validated_data.get(<span class=\"string\">'style'</span>, instance.style)</div><div class=\"line\">        instance.save()</div><div class=\"line\">        <span class=\"keyword\">return</span> instance</div></pre></td></tr></table></figure>\n<p>serializer类的第一部分定义了需要序列化和反序列化的成员变量，create()方法和update()方法定义了如何在调用serializer.save()方法时如何创建和修改实例。</p>\n<p>serializer类和Django的form类非常类似，都包含了类似的数据有效性验证机制和丰富的方法，比如required，max_length,default。</p>\n<p>数据域的标志能够控制serializer如何在特定的情况下显示，比如当在html页面中渲染{‘base_template’: ‘textarea.html’}，以上的标签等价于在Django的form类中的widget=widget.Textarea。这个在控制如何展示可视化API的过程中非常有用。接下来的的教程中我们将会体会到。</p>\n<p>实际上我们可以使用ModelSerializer来节约时间，这个之后会用到，当然我们需要确保我们的serializer的定义是明确的。</p>\n<h4 id=\"使用Serializers\"><a href=\"#使用Serializers\" class=\"headerlink\" title=\"使用Serializers\"></a>使用Serializers</h4><p>在继续接下来的工作之前，我们需要进入到Django shell中。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py shell</div></pre></td></tr></table></figure>\n<p>好了，我们需要引入一些内容，并创建一些代码片段去处理它。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.renderers <span class=\"keyword\">import</span> JSONRenderer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser</div><div class=\"line\"></div><div class=\"line\">snippet = Snippet(code=<span class=\"string\">'foo = \"bar\"\\n'</span>)</div><div class=\"line\">snippet.save()</div><div class=\"line\"></div><div class=\"line\">snippet = Snippet(code=<span class=\"string\">'print \"hello, world\"\\n'</span>)</div><div class=\"line\">snippet.save()</div></pre></td></tr></table></figure>\n<p>我们已经有了一些snippets实例，让我们看看将它们序列化之后的样子吧。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(snippet)</div><div class=\"line\">serializer.data</div><div class=\"line\"><span class=\"comment\"># &#123;'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'&#125;</span></div></pre></td></tr></table></figure>\n<p>这里，我们已经将model实例转换成了Python的原生数据类型，为了最终序列化结果，我们将数据转换成json格式。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">content = JSONRenderer().render(serializer.data)</div><div class=\"line\">content</div><div class=\"line\"><span class=\"comment\"># '&#123;\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>反序列化也是类似的，首先我们将Python原生数据类型转换成一个stream</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.utils.six <span class=\"keyword\">import</span> BytesIO</div><div class=\"line\"></div><div class=\"line\">stream = BytesIO(content)</div><div class=\"line\">data = JSONParser().parse(stream)</div></pre></td></tr></table></figure>\n<p>然后我们将装换成原生数据类型的model实例重新序列化为一个Python object实例。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(data=data)</div><div class=\"line\">serializer.is_valid()</div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\">serializer.validated_data</div><div class=\"line\"><span class=\"comment\"># OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])</span></div><div class=\"line\">serializer.save()</div><div class=\"line\"><span class=\"comment\"># &lt;Snippet: Snippet object&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：这个API和Django forms非常类似。它们的相似性在我们开始写视图的时候将变得更加明显。</p>\n<p>我们也可以序列化查询的数据集，只需要在序列化方法中添加many=True参数即可。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(Snippet.objects.all(), many=<span class=\"keyword\">True</span>)</div><div class=\"line\">serializer.data</div><div class=\"line\"><span class=\"comment\"># [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用ModelSerializers\"><a href=\"#使用ModelSerializers\" class=\"headerlink\" title=\"使用ModelSerializers\"></a>使用ModelSerializers</h4><p>我们的SnippetSerializer类已经包含了Snippet这个model中的非常多的信息。它能够让我们的代码显得更加的简洁。</p>\n<p>同样的，Django也提供了form类和ModelForm类，REST framework提供了Serializer类和ModelSerializer类。</p>\n<p>接下来让我们用ModelSerializer类来重构一下我们的API，打开文件snippets/serializers.py，将SnippetSerializer类替换成下面的样子：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Snippet</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'title'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'linenos'</span>, <span class=\"string\">'language'</span>, <span class=\"string\">'style'</span>)</div></pre></td></tr></table></figure>\n<p>一个好的serializer的特点就是你能够在serializer实例中检查所有的数据成员，如果要打印数据表现，使用Django shell  :python manage.py shell</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\">serializer = SnippetSerializer()</div><div class=\"line\">print(repr(serializer))</div><div class=\"line\"><span class=\"comment\"># SnippetSerializer():</span></div><div class=\"line\"><span class=\"comment\">#    id = IntegerField(label='ID', read_only=True)</span></div><div class=\"line\"><span class=\"comment\">#    title = CharField(allow_blank=True, max_length=100, required=False)</span></div><div class=\"line\"><span class=\"comment\">#    code = CharField(style=&#123;'base_template': 'textarea.html'&#125;)</span></div><div class=\"line\"><span class=\"comment\">#    linenos = BooleanField(required=False)</span></div><div class=\"line\"><span class=\"comment\">#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...</span></div><div class=\"line\"><span class=\"comment\">#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...</span></div></pre></td></tr></table></figure>\n<p>使用ModelSerializer类需要记住的重要的一点就是不要做特别的操作，它知识简单的创建一个序列化类：</p>\n<ul>\n<li><p>自动识别字段</p>\n</li>\n<li><p>简单的实现默认的create()方法和update()方法。</p>\n</li>\n</ul>\n<h4 id=\"使用Serializer来编写Django-views\"><a href=\"#使用Serializer来编写Django-views\" class=\"headerlink\" title=\"使用Serializer来编写Django views\"></a>使用Serializer来编写Django views</h4><p>让我们来尝试用新的serializer类来写一些API视图。这里，我们不会使用任何REST framework的其他特性，我们仅仅写点views来作为传统的Django views。编辑文件snippets/views.py，文件内容如下：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, JsonResponse</div><div class=\"line\"><span class=\"keyword\">from</span> django.views.decorators.csrf <span class=\"keyword\">import</span> csrf_exempt</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.renderers <span class=\"keyword\">import</span> JSONRenderer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div></pre></td></tr></table></figure>\n<p>访问我们的API的根路径能够列出当前存在的snippets或者创建一个新的snippets。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@csrf_exempt</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    List all code snippets, or create a new snippet.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        snippets = Snippet.objects.all()</div><div class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data, safe=<span class=\"keyword\">False</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        data = JSONParser().parse(request)</div><div class=\"line\">        serializer = SnippetSerializer(data=data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data, status=<span class=\"number\">201</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</div></pre></td></tr></table></figure>\n<p>注意，因为我们希望允许POST视图中的from表单，但是客户端不存在csrf token，我们需要添加注解csrf_exempt。这不是你平常需要做的，REST framework 的views能够控制敏感操作，这里的目的不是研究它。</p>\n<p>我们也需要一个view来确保snippet的独立性，并且用来获取、更新和删除snippet。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@csrf_exempt</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    Retrieve, update or delete a code snippet.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        snippet = Snippet.objects.get(pk=pk)</div><div class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</div><div class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">404</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</div><div class=\"line\">        data = JSONParser().parse(request)</div><div class=\"line\">        serializer = SnippetSerializer(snippet, data=data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</div><div class=\"line\">        snippet.delete()</div><div class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">204</span>)</div></pre></td></tr></table></figure>\n<p>最后，我们需要将这些view展示出来，创建一个文件snippets/urls.py:</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)/$'</span>, views.snippet_detail),</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>我们还需要编辑应用根路径下的urls.py文件，用以配置app所需的url</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(<span class=\"string\">'snippets.urls'</span>)),</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>需要注意的是，这里还有一些小问题我们没有进行处理。如果我们发送的是json格式的数据，或者请求没有被适当的view处理，服务器将会反悔500“server error”错误。</p>\n<h4 id=\"测试我们的第一个Web-API\"><a href=\"#测试我们的第一个Web-API\" class=\"headerlink\" title=\"测试我们的第一个Web API\"></a>测试我们的第一个Web API</h4><p>首先要开启测试服务器，先退出Django shell</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">quit()</div></pre></td></tr></table></figure>\n<p>开启测试服务器：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div><div class=\"line\"></div><div class=\"line\">Validating models...</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> errors found</div><div class=\"line\">Django version <span class=\"number\">1.11</span>, using settings <span class=\"string\">'tutorial.settings'</span></div><div class=\"line\">Development server <span class=\"keyword\">is</span> running at http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>/</div><div class=\"line\">Quit the server <span class=\"keyword\">with</span> CONTROL-C.</div></pre></td></tr></table></figure>\n<p>测试API我们可以使用curl或者httpie。httpie是使用python编写的工具，当然安装它也很简单：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install httpie</div></pre></td></tr></table></figure>\n<p>如果pip安装不上的话，还可以上使用easy_intall尝试一下：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">easy_install httpie</div></pre></td></tr></table></figure>\n<p>使用httppie测试结果如下：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>/snippets/</div><div class=\"line\">HTTP/<span class=\"number\">1.0</span> <span class=\"number\">200</span> OK</div><div class=\"line\">Content-Length: <span class=\"number\">354</span></div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, <span class=\"number\">10</span> Oct <span class=\"number\">2017</span> <span class=\"number\">06</span>:<span class=\"number\">46</span>:<span class=\"number\">43</span> GMT</div><div class=\"line\">Server: WSGIServer/<span class=\"number\">0.1</span> Python/<span class=\"number\">2.7</span><span class=\"number\">.13</span></div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>当然，使用浏览器直接查看这个API也是可以的。浏览器的效果：</p>\n<p><img src=\"/blogimg/rest-ser-1.png\" alt=\"image\"><br><img src=\"/blogimg/rest-ser-2.png\" alt=\"image\"></p>\n<p>翻译自：<a href=\"http://www.django-rest-framework.org/tutorial/1-serialization/\" target=\"_blank\" rel=\"external\">http://www.django-rest-framework.org/tutorial/1-serialization/</a></p>\n","excerpt":"<h3 id=\"DjangoRESTframework-——–序列化（Serializetion）\"><a href=\"#DjangoRESTframework-——–序列化（Serializetion）\" class=\"headerlink\" title=\"DjangoRESTframework ——–序列化（Serializetion）\"></a>DjangoRESTframework ——–序列化（Serializetion）</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>这个教程将建立一个简单的Web API代码片段。通过这个例子将想你介绍众多的REST framework的特性，以及让你深入理解每个组件是怎么组合在一起运行的。</p>\n<p>那就开始吧！</p>","more":"<h4 id=\"建立一个新的环境\"><a href=\"#建立一个新的环境\" class=\"headerlink\" title=\"建立一个新的环境\"></a>建立一个新的环境</h4><p>载我们开始干活之前我们需要使用virtualenv建立一个新的环境，它能够确保我们的包的配置能够很好的和我们正在开发的其他项目保持很好的隔离。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv env</div><div class=\"line\">source env/bin/activeate  #windows:env/scripts/activate.bat</div></pre></td></tr></table></figure>\n<p>之后，我们进入到virtualenv环境，我们安装我们需要的package包。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install django</div><div class=\"line\">pip install djangorestframework</div><div class=\"line\">pip install pygments #这个用来实现代码高亮</div></pre></td></tr></table></figure>\n<p>小纸条：如果需要退出virtualenv环境，只需要输入deactivate即可。</p>\n<h4 id=\"开始编码\"><a href=\"#开始编码\" class=\"headerlink\" title=\"开始编码\"></a>开始编码</h4><p>现在可以开始编码了，在开始工作之前，首先建立一个新的工程先。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~</div><div class=\"line\">django-admin startproject tutorial</div><div class=\"line\">cd tutorial</div></pre></td></tr></table></figure>\n<p>工程建立好之后，我们就可以创建一个新的app，我们将使用这个app来建立所需的Web API。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py startapp snippets</div></pre></td></tr></table></figure>\n<p>我们需要添加新的的snippets app，将rest_framework注册到INSTALLED_APPS。这些操作需要编辑tutorial/settings.py这个文件：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">    <span class=\"string\">'snippets.apps.SnippetsConfig'</span>,</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>请注意，如果你使用Django的版本小于1.9，你需要将snippets.app.SnippetsConfig替换为snippets。Let’s go on.</p>\n<h4 id=\"创建一个下一步工作所需的model\"><a href=\"#创建一个下一步工作所需的model\" class=\"headerlink\" title=\"创建一个下一步工作所需的model\"></a>创建一个下一步工作所需的model</h4><p>为了这个教程能够继续下去，我们需要创建一个简单的Snippet model，它用来存储snippets的代码。编辑文件snippets/models.py。注意：添加注释是一个良好的编程习惯。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"><span class=\"keyword\">from</span> pygments.lexers <span class=\"keyword\">import</span> get_all_lexers</div><div class=\"line\"><span class=\"keyword\">from</span> pygments.styles <span class=\"keyword\">import</span> get_all_styles</div><div class=\"line\"></div><div class=\"line\">LEXERS = [item <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> get_all_lexers() <span class=\"keyword\">if</span> item[<span class=\"number\">1</span>]]</div><div class=\"line\">LANGUAGE_CHOICES = sorted([(item[<span class=\"number\">1</span>][<span class=\"number\">0</span>], item[<span class=\"number\">0</span>]) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> LEXERS])</div><div class=\"line\">STYLE_CHOICES = sorted((item, item) <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> get_all_styles())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Snippet</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    created = models.DateTimeField(auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>, blank=<span class=\"keyword\">True</span>, default=<span class=\"string\">''</span>)</div><div class=\"line\">    code = models.TextField()</div><div class=\"line\">    linenos = models.BooleanField(default=<span class=\"keyword\">False</span>)</div><div class=\"line\">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class=\"string\">'python'</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    style = models.CharField(choices=STYLE_CHOICES, default=<span class=\"string\">'friendly'</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        ordering = (<span class=\"string\">'created'</span>,)</div></pre></td></tr></table></figure>\n<p>我们也需要创建一个用于初始化迁移我们的model，同时在第一次需要同步数据库。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py makemigrations snippets</div><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<h4 id=\"创建Serializer类\"><a href=\"#创建Serializer类\" class=\"headerlink\" title=\"创建Serializer类\"></a>创建Serializer类</h4><p>要实现我们的Web API，第一件需要做的事情是提供一个可以序列化和反序列化的snippets实例，比如用json来表示。我们可以定义serializers，它和Django的forms非常类似。在snippets目录中新建一个名为serializers.py的文件，文件内容如下：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.Serializer)</span>:</span></div><div class=\"line\">    id = serializers.IntegerField(read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\">    title = serializers.CharField(required=<span class=\"keyword\">False</span>, allow_blank=<span class=\"keyword\">True</span>, max_length=<span class=\"number\">100</span>)</div><div class=\"line\">    code = serializers.CharField(style=&#123;<span class=\"string\">'base_template'</span>: <span class=\"string\">'textarea.html'</span>&#125;)</div><div class=\"line\">    linenos = serializers.BooleanField(required=<span class=\"keyword\">False</span>)</div><div class=\"line\">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class=\"string\">'python'</span>)</div><div class=\"line\">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class=\"string\">'friendly'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        Create and return a new `Snippet` instance, given the validated data.</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> Snippet.objects.create(**validated_data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, instance, validated_data)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"</div><div class=\"line\">        Update and return an existing `Snippet` instance, given the validated data.</div><div class=\"line\">        \"\"\"</span></div><div class=\"line\">        instance.title = validated_data.get(<span class=\"string\">'title'</span>, instance.title)</div><div class=\"line\">        instance.code = validated_data.get(<span class=\"string\">'code'</span>, instance.code)</div><div class=\"line\">        instance.linenos = validated_data.get(<span class=\"string\">'linenos'</span>, instance.linenos)</div><div class=\"line\">        instance.language = validated_data.get(<span class=\"string\">'language'</span>, instance.language)</div><div class=\"line\">        instance.style = validated_data.get(<span class=\"string\">'style'</span>, instance.style)</div><div class=\"line\">        instance.save()</div><div class=\"line\">        <span class=\"keyword\">return</span> instance</div></pre></td></tr></table></figure>\n<p>serializer类的第一部分定义了需要序列化和反序列化的成员变量，create()方法和update()方法定义了如何在调用serializer.save()方法时如何创建和修改实例。</p>\n<p>serializer类和Django的form类非常类似，都包含了类似的数据有效性验证机制和丰富的方法，比如required，max_length,default。</p>\n<p>数据域的标志能够控制serializer如何在特定的情况下显示，比如当在html页面中渲染{‘base_template’: ‘textarea.html’}，以上的标签等价于在Django的form类中的widget=widget.Textarea。这个在控制如何展示可视化API的过程中非常有用。接下来的的教程中我们将会体会到。</p>\n<p>实际上我们可以使用ModelSerializer来节约时间，这个之后会用到，当然我们需要确保我们的serializer的定义是明确的。</p>\n<h4 id=\"使用Serializers\"><a href=\"#使用Serializers\" class=\"headerlink\" title=\"使用Serializers\"></a>使用Serializers</h4><p>在继续接下来的工作之前，我们需要进入到Django shell中。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py shell</div></pre></td></tr></table></figure>\n<p>好了，我们需要引入一些内容，并创建一些代码片段去处理它。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.renderers <span class=\"keyword\">import</span> JSONRenderer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser</div><div class=\"line\"></div><div class=\"line\">snippet = Snippet(code=<span class=\"string\">'foo = \"bar\"\\n'</span>)</div><div class=\"line\">snippet.save()</div><div class=\"line\"></div><div class=\"line\">snippet = Snippet(code=<span class=\"string\">'print \"hello, world\"\\n'</span>)</div><div class=\"line\">snippet.save()</div></pre></td></tr></table></figure>\n<p>我们已经有了一些snippets实例，让我们看看将它们序列化之后的样子吧。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(snippet)</div><div class=\"line\">serializer.data</div><div class=\"line\"><span class=\"comment\"># &#123;'id': 2, 'title': u'', 'code': u'print \"hello, world\"\\n', 'linenos': False, 'language': u'python', 'style': u'friendly'&#125;</span></div></pre></td></tr></table></figure>\n<p>这里，我们已经将model实例转换成了Python的原生数据类型，为了最终序列化结果，我们将数据转换成json格式。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">content = JSONRenderer().render(serializer.data)</div><div class=\"line\">content</div><div class=\"line\"><span class=\"comment\"># '&#123;\"id\": 2, \"title\": \"\", \"code\": \"print \\\\\"hello, world\\\\\"\\\\n\", \"linenos\": false, \"language\": \"python\", \"style\": \"friendly\"&#125;'</span></div></pre></td></tr></table></figure>\n<p>反序列化也是类似的，首先我们将Python原生数据类型转换成一个stream</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.utils.six <span class=\"keyword\">import</span> BytesIO</div><div class=\"line\"></div><div class=\"line\">stream = BytesIO(content)</div><div class=\"line\">data = JSONParser().parse(stream)</div></pre></td></tr></table></figure>\n<p>然后我们将装换成原生数据类型的model实例重新序列化为一个Python object实例。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(data=data)</div><div class=\"line\">serializer.is_valid()</div><div class=\"line\"><span class=\"comment\"># True</span></div><div class=\"line\">serializer.validated_data</div><div class=\"line\"><span class=\"comment\"># OrderedDict([('title', ''), ('code', 'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])</span></div><div class=\"line\">serializer.save()</div><div class=\"line\"><span class=\"comment\"># &lt;Snippet: Snippet object&gt;</span></div></pre></td></tr></table></figure>\n<p>注意：这个API和Django forms非常类似。它们的相似性在我们开始写视图的时候将变得更加明显。</p>\n<p>我们也可以序列化查询的数据集，只需要在序列化方法中添加many=True参数即可。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">serializer = SnippetSerializer(Snippet.objects.all(), many=<span class=\"keyword\">True</span>)</div><div class=\"line\">serializer.data</div><div class=\"line\"><span class=\"comment\"># [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = \"bar\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print \"hello, world\"\\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print \"hello, world\"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]</span></div></pre></td></tr></table></figure>\n<h4 id=\"使用ModelSerializers\"><a href=\"#使用ModelSerializers\" class=\"headerlink\" title=\"使用ModelSerializers\"></a>使用ModelSerializers</h4><p>我们的SnippetSerializer类已经包含了Snippet这个model中的非常多的信息。它能够让我们的代码显得更加的简洁。</p>\n<p>同样的，Django也提供了form类和ModelForm类，REST framework提供了Serializer类和ModelSerializer类。</p>\n<p>接下来让我们用ModelSerializer类来重构一下我们的API，打开文件snippets/serializers.py，将SnippetSerializer类替换成下面的样子：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Snippet</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'title'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'linenos'</span>, <span class=\"string\">'language'</span>, <span class=\"string\">'style'</span>)</div></pre></td></tr></table></figure>\n<p>一个好的serializer的特点就是你能够在serializer实例中检查所有的数据成员，如果要打印数据表现，使用Django shell  :python manage.py shell</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\">serializer = SnippetSerializer()</div><div class=\"line\">print(repr(serializer))</div><div class=\"line\"><span class=\"comment\"># SnippetSerializer():</span></div><div class=\"line\"><span class=\"comment\">#    id = IntegerField(label='ID', read_only=True)</span></div><div class=\"line\"><span class=\"comment\">#    title = CharField(allow_blank=True, max_length=100, required=False)</span></div><div class=\"line\"><span class=\"comment\">#    code = CharField(style=&#123;'base_template': 'textarea.html'&#125;)</span></div><div class=\"line\"><span class=\"comment\">#    linenos = BooleanField(required=False)</span></div><div class=\"line\"><span class=\"comment\">#    language = ChoiceField(choices=[('Clipper', 'FoxPro'), ('Cucumber', 'Gherkin'), ('RobotFramework', 'RobotFramework'), ('abap', 'ABAP'), ('ada', 'Ada')...</span></div><div class=\"line\"><span class=\"comment\">#    style = ChoiceField(choices=[('autumn', 'autumn'), ('borland', 'borland'), ('bw', 'bw'), ('colorful', 'colorful')...</span></div></pre></td></tr></table></figure>\n<p>使用ModelSerializer类需要记住的重要的一点就是不要做特别的操作，它知识简单的创建一个序列化类：</p>\n<ul>\n<li><p>自动识别字段</p>\n</li>\n<li><p>简单的实现默认的create()方法和update()方法。</p>\n</li>\n</ul>\n<h4 id=\"使用Serializer来编写Django-views\"><a href=\"#使用Serializer来编写Django-views\" class=\"headerlink\" title=\"使用Serializer来编写Django views\"></a>使用Serializer来编写Django views</h4><p>让我们来尝试用新的serializer类来写一些API视图。这里，我们不会使用任何REST framework的其他特性，我们仅仅写点views来作为传统的Django views。编辑文件snippets/views.py，文件内容如下：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse, JsonResponse</div><div class=\"line\"><span class=\"keyword\">from</span> django.views.decorators.csrf <span class=\"keyword\">import</span> csrf_exempt</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.renderers <span class=\"keyword\">import</span> JSONRenderer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.parsers <span class=\"keyword\">import</span> JSONParser</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div></pre></td></tr></table></figure>\n<p>访问我们的API的根路径能够列出当前存在的snippets或者创建一个新的snippets。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@csrf_exempt</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_list</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    List all code snippets, or create a new snippet.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        snippets = Snippet.objects.all()</div><div class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data, safe=<span class=\"keyword\">False</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'POST'</span>:</div><div class=\"line\">        data = JSONParser().parse(request)</div><div class=\"line\">        serializer = SnippetSerializer(data=data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data, status=<span class=\"number\">201</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</div></pre></td></tr></table></figure>\n<p>注意，因为我们希望允许POST视图中的from表单，但是客户端不存在csrf token，我们需要添加注解csrf_exempt。这不是你平常需要做的，REST framework 的views能够控制敏感操作，这里的目的不是研究它。</p>\n<p>我们也需要一个view来确保snippet的独立性，并且用来获取、更新和删除snippet。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@csrf_exempt</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">snippet_detail</span><span class=\"params\">(request, pk)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    Retrieve, update or delete a code snippet.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        snippet = Snippet.objects.get(pk=pk)</div><div class=\"line\">    <span class=\"keyword\">except</span> Snippet.DoesNotExist:</div><div class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">404</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'GET'</span>:</div><div class=\"line\">        serializer = SnippetSerializer(snippet)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'PUT'</span>:</div><div class=\"line\">        data = JSONParser().parse(request)</div><div class=\"line\">        serializer = SnippetSerializer(snippet, data=data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> JsonResponse(serializer.data)</div><div class=\"line\">        <span class=\"keyword\">return</span> JsonResponse(serializer.errors, status=<span class=\"number\">400</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">elif</span> request.method == <span class=\"string\">'DELETE'</span>:</div><div class=\"line\">        snippet.delete()</div><div class=\"line\">        <span class=\"keyword\">return</span> HttpResponse(status=<span class=\"number\">204</span>)</div></pre></td></tr></table></figure>\n<p>最后，我们需要将这些view展示出来，创建一个文件snippets/urls.py:</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)/$'</span>, views.snippet_detail),</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>我们还需要编辑应用根路径下的urls.py文件，用以配置app所需的url</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(<span class=\"string\">'snippets.urls'</span>)),</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>需要注意的是，这里还有一些小问题我们没有进行处理。如果我们发送的是json格式的数据，或者请求没有被适当的view处理，服务器将会反悔500“server error”错误。</p>\n<h4 id=\"测试我们的第一个Web-API\"><a href=\"#测试我们的第一个Web-API\" class=\"headerlink\" title=\"测试我们的第一个Web API\"></a>测试我们的第一个Web API</h4><p>首先要开启测试服务器，先退出Django shell</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">quit()</div></pre></td></tr></table></figure>\n<p>开启测试服务器：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div><div class=\"line\"></div><div class=\"line\">Validating models...</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">0</span> errors found</div><div class=\"line\">Django version <span class=\"number\">1.11</span>, using settings <span class=\"string\">'tutorial.settings'</span></div><div class=\"line\">Development server <span class=\"keyword\">is</span> running at http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>/</div><div class=\"line\">Quit the server <span class=\"keyword\">with</span> CONTROL-C.</div></pre></td></tr></table></figure>\n<p>测试API我们可以使用curl或者httpie。httpie是使用python编写的工具，当然安装它也很简单：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install httpie</div></pre></td></tr></table></figure>\n<p>如果pip安装不上的话，还可以上使用easy_intall尝试一下：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">easy_install httpie</div></pre></td></tr></table></figure>\n<p>使用httppie测试结果如下：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\Serializer_tutorial\\tutorial&gt; http http://<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8000</span>/snippets/</div><div class=\"line\">HTTP/<span class=\"number\">1.0</span> <span class=\"number\">200</span> OK</div><div class=\"line\">Content-Length: <span class=\"number\">354</span></div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, <span class=\"number\">10</span> Oct <span class=\"number\">2017</span> <span class=\"number\">06</span>:<span class=\"number\">46</span>:<span class=\"number\">43</span> GMT</div><div class=\"line\">Server: WSGIServer/<span class=\"number\">0.1</span> Python/<span class=\"number\">2.7</span><span class=\"number\">.13</span></div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"foo = \\\"bar\\\"\\n\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"code\"</span>: <span class=\"string\">\"print \\\"hello, world\\n\\\"\"</span>,</div><div class=\"line\">        <span class=\"string\">\"id\"</span>: <span class=\"number\">3</span>,</div><div class=\"line\">        <span class=\"string\">\"language\"</span>: <span class=\"string\">\"python\"</span>,</div><div class=\"line\">        <span class=\"string\">\"linenos\"</span>: false,</div><div class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"string\">\"friendly\"</span>,</div><div class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>当然，使用浏览器直接查看这个API也是可以的。浏览器的效果：</p>\n<p><img src=\"/blogimg/rest-ser-1.png\" alt=\"image\"><br><img src=\"/blogimg/rest-ser-2.png\" alt=\"image\"></p>\n<p>翻译自：<a href=\"http://www.django-rest-framework.org/tutorial/1-serialization/\">http://www.django-rest-framework.org/tutorial/1-serialization/</a></p>"},{"title":"DjangoRESTframework-快速开始","date":"2017-10-10T03:28:45.000Z","_content":"\n### DjangoRESTframework  快速开始\n\n我们将开始建立一个简单的API，让admin用户去查看和编辑系统中用户和用户组。\n\n<!--more-->\n\n#### 建立工程\n\n```shell\n# 为工程建立存储目录\nmkdir tutorial\ncd tutorial\n\n# 创建一个virtualenv，便于隔离我们的包的本地依赖\nvirtualenv env\nsource env/bin/activate  # 在windows环境使用命令 `env\\Scripts\\activate`\n\n# 在virtualenv中安装django和djangorestframework框架\npip install django\npip install djangorestframework\n\n# 建立一个新的project和一个新的app\ndjango-admin.py startproject tutorial .  # 注意结尾的 '.' 号\ncd tutorial\ndjango-admin.py startapp quickstart\ncd ..\n```\n\n工程的目录结构应该如下：\n\n```shell\n$ pwd\n<some path>/tutorial\n$ find .\n.\n./manage.py\n./tutorial\n./tutorial/__init__.py\n./tutorial/quickstart\n./tutorial/quickstart/__init__.py\n./tutorial/quickstart/admin.py\n./tutorial/quickstart/apps.py\n./tutorial/quickstart/migrations\n./tutorial/quickstart/migrations/__init__.py\n./tutorial/quickstart/models.py\n./tutorial/quickstart/tests.py\n./tutorial/quickstart/views.py\n./tutorial/settings.py\n./tutorial/urls.py\n./tutorial/wsgi.py\n```\n\n在引用外部模块的时候使用工程的命名空间来避免名称的冲突。接下来可以首先同步你的数据库：\n\n```shell\npython manage.py migrate\n```\n\n同时我们也需要建立和初始化admin用户，并设置 admin用户的密码为password123。稍后我们将在我们的实例应用中认证其他用户。\n\n```shell\npython manage.py createsuperuser\n```\n\n当你同步好数据库并初始化用户之后，打开工程的app目录（这里是quickstart），开始编码吧。\n\n#### 序列化器（Serializers）\n\n首先，我们需要定义一些序列化器（serializers），让我们创建一个新的模块（module），路径是tutorial/quickstart/serializers.py，这个将用来作为数据展示。\n\n```python\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'groups')\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ('url', 'name')\n```\n\n注意：这里我们继承关系的是HyperlinkedSerializers,你也可以使用主键或者其他众多的关系，但是hyperlinking是很好的RESTful设计。\n\n#### 视图（Views）\n\n我们最好再写点视图（views）吧，打开文件tutorial/quickstart/views.py，然后把下面的内容敲进去。\n\n```python\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import viewsets\nfrom tutorial.quickstart.serializers import UserSerializer, GroupSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n```\n\n比起写非常多的视图，我们将所有视图的许多共同行为（common behavior）放进了ViewSets类中。如果有需要，我们可以非常容易的将他们拆成单独的视图，但是使用viewsets可以保持良好的视图逻辑和简洁的代码。\n\n#### URL配置（URLs)\n\n接下来我们可以定义API的url路径了，文件是tutorial/urls.py\n\n```python\nfrom django.conf.urls import url, include\nfrom rest_framework import routers\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n```\n\n由于我们使用了viewsets代替了views，我们的API可以自动成成URL配置，只需要将viewsets注册到router class中即可。\n\n同样，如果我们需要对API的URL获得更多的控制，也可以使用传统的class-based视图，然后自己配置URL。\n\n最后，我们可以包含登录和登出视图来浏览我们的API。这是可选的，但是如果你的API需要登录认证和需要浏览API，这两个视图也非常有用。\n\n#### 设置（Settings）\n\n我们需要一点点全局设置，比如需要分页或者想让我们的API只能由admin用户使用，这些配置都需要在tutorial/settings.py中。\n\n```python\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n    ],\n    'PAGE_SIZE': 10\n}\n```\n\n好了，代码我们就写完了。\n\n#### 测试我们的API\n\n首先把测试服务器打开，让应用跑起来。\n\n```shell\npython manage.py runserver\n```\n\n服务开启正常后，我们就可以使用curl或者浏览器来测试api了。\n\n```shell\nPS E:\\Study\\tutorial\\tutorial> http -a admin:password123 http://127.0.0.1:8000/users/\nHTTP/1.0 200 OK\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 103\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 03:05:10 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"email\": \"admin@star-chen.com\",\n        \"groups\": [],\n        \"url\": \"http://127.0.0.1:8000/users/1/\",\n        \"username\": \"admin\"\n    }\n]\n```\n\n浏览器中是这个画风，当然你得先登录。\n\n![image](/blogimg/quick_start.png)\n\nok,成功运行。","source":"_posts/DjangoRESTframework-quickstart.md","raw":"---\ntitle: DjangoRESTframework-快速开始\ncategories:\n  - Program\ntags:\n  - python djangorestframework\ndate: 2017-10-10 11:28:45\n---\n\n### DjangoRESTframework  快速开始\n\n我们将开始建立一个简单的API，让admin用户去查看和编辑系统中用户和用户组。\n\n<!--more-->\n\n#### 建立工程\n\n```shell\n# 为工程建立存储目录\nmkdir tutorial\ncd tutorial\n\n# 创建一个virtualenv，便于隔离我们的包的本地依赖\nvirtualenv env\nsource env/bin/activate  # 在windows环境使用命令 `env\\Scripts\\activate`\n\n# 在virtualenv中安装django和djangorestframework框架\npip install django\npip install djangorestframework\n\n# 建立一个新的project和一个新的app\ndjango-admin.py startproject tutorial .  # 注意结尾的 '.' 号\ncd tutorial\ndjango-admin.py startapp quickstart\ncd ..\n```\n\n工程的目录结构应该如下：\n\n```shell\n$ pwd\n<some path>/tutorial\n$ find .\n.\n./manage.py\n./tutorial\n./tutorial/__init__.py\n./tutorial/quickstart\n./tutorial/quickstart/__init__.py\n./tutorial/quickstart/admin.py\n./tutorial/quickstart/apps.py\n./tutorial/quickstart/migrations\n./tutorial/quickstart/migrations/__init__.py\n./tutorial/quickstart/models.py\n./tutorial/quickstart/tests.py\n./tutorial/quickstart/views.py\n./tutorial/settings.py\n./tutorial/urls.py\n./tutorial/wsgi.py\n```\n\n在引用外部模块的时候使用工程的命名空间来避免名称的冲突。接下来可以首先同步你的数据库：\n\n```shell\npython manage.py migrate\n```\n\n同时我们也需要建立和初始化admin用户，并设置 admin用户的密码为password123。稍后我们将在我们的实例应用中认证其他用户。\n\n```shell\npython manage.py createsuperuser\n```\n\n当你同步好数据库并初始化用户之后，打开工程的app目录（这里是quickstart），开始编码吧。\n\n#### 序列化器（Serializers）\n\n首先，我们需要定义一些序列化器（serializers），让我们创建一个新的模块（module），路径是tutorial/quickstart/serializers.py，这个将用来作为数据展示。\n\n```python\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import serializers\n\n\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = User\n        fields = ('url', 'username', 'email', 'groups')\n\n\nclass GroupSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Group\n        fields = ('url', 'name')\n```\n\n注意：这里我们继承关系的是HyperlinkedSerializers,你也可以使用主键或者其他众多的关系，但是hyperlinking是很好的RESTful设计。\n\n#### 视图（Views）\n\n我们最好再写点视图（views）吧，打开文件tutorial/quickstart/views.py，然后把下面的内容敲进去。\n\n```python\nfrom django.contrib.auth.models import User, Group\nfrom rest_framework import viewsets\nfrom tutorial.quickstart.serializers import UserSerializer, GroupSerializer\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows users to be viewed or edited.\n    \"\"\"\n    queryset = User.objects.all().order_by('-date_joined')\n    serializer_class = UserSerializer\n\n\nclass GroupViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n```\n\n比起写非常多的视图，我们将所有视图的许多共同行为（common behavior）放进了ViewSets类中。如果有需要，我们可以非常容易的将他们拆成单独的视图，但是使用viewsets可以保持良好的视图逻辑和简洁的代码。\n\n#### URL配置（URLs)\n\n接下来我们可以定义API的url路径了，文件是tutorial/urls.py\n\n```python\nfrom django.conf.urls import url, include\nfrom rest_framework import routers\nfrom tutorial.quickstart import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'users', views.UserViewSet)\nrouter.register(r'groups', views.GroupViewSet)\n\n# Wire up our API using automatic URL routing.\n# Additionally, we include login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n]\n```\n\n由于我们使用了viewsets代替了views，我们的API可以自动成成URL配置，只需要将viewsets注册到router class中即可。\n\n同样，如果我们需要对API的URL获得更多的控制，也可以使用传统的class-based视图，然后自己配置URL。\n\n最后，我们可以包含登录和登出视图来浏览我们的API。这是可选的，但是如果你的API需要登录认证和需要浏览API，这两个视图也非常有用。\n\n#### 设置（Settings）\n\n我们需要一点点全局设置，比如需要分页或者想让我们的API只能由admin用户使用，这些配置都需要在tutorial/settings.py中。\n\n```python\nINSTALLED_APPS = (\n    ...\n    'rest_framework',\n)\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAdminUser',\n    ],\n    'PAGE_SIZE': 10\n}\n```\n\n好了，代码我们就写完了。\n\n#### 测试我们的API\n\n首先把测试服务器打开，让应用跑起来。\n\n```shell\npython manage.py runserver\n```\n\n服务开启正常后，我们就可以使用curl或者浏览器来测试api了。\n\n```shell\nPS E:\\Study\\tutorial\\tutorial> http -a admin:password123 http://127.0.0.1:8000/users/\nHTTP/1.0 200 OK\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 103\nContent-Type: application/json\nDate: Tue, 10 Oct 2017 03:05:10 GMT\nServer: WSGIServer/0.1 Python/2.7.13\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n[\n    {\n        \"email\": \"admin@star-chen.com\",\n        \"groups\": [],\n        \"url\": \"http://127.0.0.1:8000/users/1/\",\n        \"username\": \"admin\"\n    }\n]\n```\n\n浏览器中是这个画风，当然你得先登录。\n\n![image](/blogimg/quick_start.png)\n\nok,成功运行。","slug":"DjangoRESTframework-quickstart","published":1,"updated":"2017-10-10T03:33:15.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzi6002hgov5zr6s28xq","content":"<h3 id=\"DjangoRESTframework-快速开始\"><a href=\"#DjangoRESTframework-快速开始\" class=\"headerlink\" title=\"DjangoRESTframework  快速开始\"></a>DjangoRESTframework  快速开始</h3><p>我们将开始建立一个简单的API，让admin用户去查看和编辑系统中用户和用户组。</p>\n<a id=\"more\"></a>\n<h4 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 为工程建立存储目录</div><div class=\"line\">mkdir tutorial</div><div class=\"line\">cd tutorial</div><div class=\"line\"></div><div class=\"line\"># 创建一个virtualenv，便于隔离我们的包的本地依赖</div><div class=\"line\">virtualenv env</div><div class=\"line\">source env/bin/activate  # 在windows环境使用命令 `env\\Scripts\\activate`</div><div class=\"line\"></div><div class=\"line\"># 在virtualenv中安装django和djangorestframework框架</div><div class=\"line\">pip install django</div><div class=\"line\">pip install djangorestframework</div><div class=\"line\"></div><div class=\"line\"># 建立一个新的project和一个新的app</div><div class=\"line\">django-admin.py startproject tutorial .  # 注意结尾的 &apos;.&apos; 号</div><div class=\"line\">cd tutorial</div><div class=\"line\">django-admin.py startapp quickstart</div><div class=\"line\">cd ..</div></pre></td></tr></table></figure>\n<p>工程的目录结构应该如下：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pwd</div><div class=\"line\">&lt;some path&gt;/tutorial</div><div class=\"line\">$ find .</div><div class=\"line\">.</div><div class=\"line\">./manage.py</div><div class=\"line\">./tutorial</div><div class=\"line\">./tutorial/__init__.py</div><div class=\"line\">./tutorial/quickstart</div><div class=\"line\">./tutorial/quickstart/__init__.py</div><div class=\"line\">./tutorial/quickstart/admin.py</div><div class=\"line\">./tutorial/quickstart/apps.py</div><div class=\"line\">./tutorial/quickstart/migrations</div><div class=\"line\">./tutorial/quickstart/migrations/__init__.py</div><div class=\"line\">./tutorial/quickstart/models.py</div><div class=\"line\">./tutorial/quickstart/tests.py</div><div class=\"line\">./tutorial/quickstart/views.py</div><div class=\"line\">./tutorial/settings.py</div><div class=\"line\">./tutorial/urls.py</div><div class=\"line\">./tutorial/wsgi.py</div></pre></td></tr></table></figure>\n<p>在引用外部模块的时候使用工程的命名空间来避免名称的冲突。接下来可以首先同步你的数据库：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<p>同时我们也需要建立和初始化admin用户，并设置 admin用户的密码为password123。稍后我们将在我们的实例应用中认证其他用户。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>当你同步好数据库并初始化用户之后，打开工程的app目录（这里是quickstart），开始编码吧。</p>\n<h4 id=\"序列化器（Serializers）\"><a href=\"#序列化器（Serializers）\" class=\"headerlink\" title=\"序列化器（Serializers）\"></a>序列化器（Serializers）</h4><p>首先，我们需要定义一些序列化器（serializers），让我们创建一个新的模块（module），路径是tutorial/quickstart/serializers.py，这个将用来作为数据展示。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User, Group</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>, <span class=\"string\">'groups'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Group</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'name'</span>)</div></pre></td></tr></table></figure>\n<p>注意：这里我们继承关系的是HyperlinkedSerializers,你也可以使用主键或者其他众多的关系，但是hyperlinking是很好的RESTful设计。</p>\n<h4 id=\"视图（Views）\"><a href=\"#视图（Views）\" class=\"headerlink\" title=\"视图（Views）\"></a>视图（Views）</h4><p>我们最好再写点视图（views）吧，打开文件tutorial/quickstart/views.py，然后把下面的内容敲进去。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User, Group</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> viewsets</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.quickstart.serializers <span class=\"keyword\">import</span> UserSerializer, GroupSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    API endpoint that allows users to be viewed or edited.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    queryset = User.objects.all().order_by(<span class=\"string\">'-date_joined'</span>)</div><div class=\"line\">    serializer_class = UserSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    API endpoint that allows groups to be viewed or edited.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    queryset = Group.objects.all()</div><div class=\"line\">    serializer_class = GroupSerializer</div></pre></td></tr></table></figure>\n<p>比起写非常多的视图，我们将所有视图的许多共同行为（common behavior）放进了ViewSets类中。如果有需要，我们可以非常容易的将他们拆成单独的视图，但是使用viewsets可以保持良好的视图逻辑和简洁的代码。</p>\n<h4 id=\"URL配置（URLs\"><a href=\"#URL配置（URLs\" class=\"headerlink\" title=\"URL配置（URLs)\"></a>URL配置（URLs)</h4><p>接下来我们可以定义API的url路径了，文件是tutorial/urls.py</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.quickstart <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">router = routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, views.UserViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'groups'</span>, views.GroupViewSet)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Wire up our API using automatic URL routing.</span></div><div class=\"line\"><span class=\"comment\"># Additionally, we include login URLs for the browsable API.</span></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>))</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>由于我们使用了viewsets代替了views，我们的API可以自动成成URL配置，只需要将viewsets注册到router class中即可。</p>\n<p>同样，如果我们需要对API的URL获得更多的控制，也可以使用传统的class-based视图，然后自己配置URL。</p>\n<p>最后，我们可以包含登录和登出视图来浏览我们的API。这是可选的，但是如果你的API需要登录认证和需要浏览API，这两个视图也非常有用。</p>\n<h4 id=\"设置（Settings）\"><a href=\"#设置（Settings）\" class=\"headerlink\" title=\"设置（Settings）\"></a>设置（Settings）</h4><p>我们需要一点点全局设置，比如需要分页或者想让我们的API只能由admin用户使用，这些配置都需要在tutorial/settings.py中。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    <span class=\"string\">'DEFAULT_PERMISSION_CLASSES'</span>: [</div><div class=\"line\">        <span class=\"string\">'rest_framework.permissions.IsAdminUser'</span>,</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">'PAGE_SIZE'</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>好了，代码我们就写完了。</p>\n<h4 id=\"测试我们的API\"><a href=\"#测试我们的API\" class=\"headerlink\" title=\"测试我们的API\"></a>测试我们的API</h4><p>首先把测试服务器打开，让应用跑起来。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>服务开启正常后，我们就可以使用curl或者浏览器来测试api了。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\tutorial\\tutorial&gt; http -a admin:password123 http://127.0.0.1:8000/users/</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: GET, POST, HEAD, OPTIONS</div><div class=\"line\">Content-Length: 103</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 03:05:10 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;email&quot;: &quot;admin@star-chen.com&quot;,</div><div class=\"line\">        &quot;groups&quot;: [],</div><div class=\"line\">        &quot;url&quot;: &quot;http://127.0.0.1:8000/users/1/&quot;,</div><div class=\"line\">        &quot;username&quot;: &quot;admin&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>浏览器中是这个画风，当然你得先登录。</p>\n<p><img src=\"/blogimg/quick_start.png\" alt=\"image\"></p>\n<p>ok,成功运行。</p>\n","excerpt":"<h3 id=\"DjangoRESTframework-快速开始\"><a href=\"#DjangoRESTframework-快速开始\" class=\"headerlink\" title=\"DjangoRESTframework  快速开始\"></a>DjangoRESTframework  快速开始</h3><p>我们将开始建立一个简单的API，让admin用户去查看和编辑系统中用户和用户组。</p>","more":"<h4 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 为工程建立存储目录</div><div class=\"line\">mkdir tutorial</div><div class=\"line\">cd tutorial</div><div class=\"line\"></div><div class=\"line\"># 创建一个virtualenv，便于隔离我们的包的本地依赖</div><div class=\"line\">virtualenv env</div><div class=\"line\">source env/bin/activate  # 在windows环境使用命令 `env\\Scripts\\activate`</div><div class=\"line\"></div><div class=\"line\"># 在virtualenv中安装django和djangorestframework框架</div><div class=\"line\">pip install django</div><div class=\"line\">pip install djangorestframework</div><div class=\"line\"></div><div class=\"line\"># 建立一个新的project和一个新的app</div><div class=\"line\">django-admin.py startproject tutorial .  # 注意结尾的 &apos;.&apos; 号</div><div class=\"line\">cd tutorial</div><div class=\"line\">django-admin.py startapp quickstart</div><div class=\"line\">cd ..</div></pre></td></tr></table></figure>\n<p>工程的目录结构应该如下：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pwd</div><div class=\"line\">&lt;some path&gt;/tutorial</div><div class=\"line\">$ find .</div><div class=\"line\">.</div><div class=\"line\">./manage.py</div><div class=\"line\">./tutorial</div><div class=\"line\">./tutorial/__init__.py</div><div class=\"line\">./tutorial/quickstart</div><div class=\"line\">./tutorial/quickstart/__init__.py</div><div class=\"line\">./tutorial/quickstart/admin.py</div><div class=\"line\">./tutorial/quickstart/apps.py</div><div class=\"line\">./tutorial/quickstart/migrations</div><div class=\"line\">./tutorial/quickstart/migrations/__init__.py</div><div class=\"line\">./tutorial/quickstart/models.py</div><div class=\"line\">./tutorial/quickstart/tests.py</div><div class=\"line\">./tutorial/quickstart/views.py</div><div class=\"line\">./tutorial/settings.py</div><div class=\"line\">./tutorial/urls.py</div><div class=\"line\">./tutorial/wsgi.py</div></pre></td></tr></table></figure>\n<p>在引用外部模块的时候使用工程的命名空间来避免名称的冲突。接下来可以首先同步你的数据库：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<p>同时我们也需要建立和初始化admin用户，并设置 admin用户的密码为password123。稍后我们将在我们的实例应用中认证其他用户。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>当你同步好数据库并初始化用户之后，打开工程的app目录（这里是quickstart），开始编码吧。</p>\n<h4 id=\"序列化器（Serializers）\"><a href=\"#序列化器（Serializers）\" class=\"headerlink\" title=\"序列化器（Serializers）\"></a>序列化器（Serializers）</h4><p>首先，我们需要定义一些序列化器（serializers），让我们创建一个新的模块（module），路径是tutorial/quickstart/serializers.py，这个将用来作为数据展示。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User, Group</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'email'</span>, <span class=\"string\">'groups'</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Group</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'name'</span>)</div></pre></td></tr></table></figure>\n<p>注意：这里我们继承关系的是HyperlinkedSerializers,你也可以使用主键或者其他众多的关系，但是hyperlinking是很好的RESTful设计。</p>\n<h4 id=\"视图（Views）\"><a href=\"#视图（Views）\" class=\"headerlink\" title=\"视图（Views）\"></a>视图（Views）</h4><p>我们最好再写点视图（views）吧，打开文件tutorial/quickstart/views.py，然后把下面的内容敲进去。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User, Group</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> viewsets</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.quickstart.serializers <span class=\"keyword\">import</span> UserSerializer, GroupSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    API endpoint that allows users to be viewed or edited.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    queryset = User.objects.all().order_by(<span class=\"string\">'-date_joined'</span>)</div><div class=\"line\">    serializer_class = UserSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    API endpoint that allows groups to be viewed or edited.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    queryset = Group.objects.all()</div><div class=\"line\">    serializer_class = GroupSerializer</div></pre></td></tr></table></figure>\n<p>比起写非常多的视图，我们将所有视图的许多共同行为（common behavior）放进了ViewSets类中。如果有需要，我们可以非常容易的将他们拆成单独的视图，但是使用viewsets可以保持良好的视图逻辑和简洁的代码。</p>\n<h4 id=\"URL配置（URLs\"><a href=\"#URL配置（URLs\" class=\"headerlink\" title=\"URL配置（URLs)\"></a>URL配置（URLs)</h4><p>接下来我们可以定义API的url路径了，文件是tutorial/urls.py</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> routers</div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.quickstart <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">router = routers.DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, views.UserViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'groups'</span>, views.GroupViewSet)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Wire up our API using automatic URL routing.</span></div><div class=\"line\"><span class=\"comment\"># Additionally, we include login URLs for the browsable API.</span></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>))</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>由于我们使用了viewsets代替了views，我们的API可以自动成成URL配置，只需要将viewsets注册到router class中即可。</p>\n<p>同样，如果我们需要对API的URL获得更多的控制，也可以使用传统的class-based视图，然后自己配置URL。</p>\n<p>最后，我们可以包含登录和登出视图来浏览我们的API。这是可选的，但是如果你的API需要登录认证和需要浏览API，这两个视图也非常有用。</p>\n<h4 id=\"设置（Settings）\"><a href=\"#设置（Settings）\" class=\"headerlink\" title=\"设置（Settings）\"></a>设置（Settings）</h4><p>我们需要一点点全局设置，比如需要分页或者想让我们的API只能由admin用户使用，这些配置都需要在tutorial/settings.py中。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = (</div><div class=\"line\">    ...</div><div class=\"line\">    <span class=\"string\">'rest_framework'</span>,</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">    <span class=\"string\">'DEFAULT_PERMISSION_CLASSES'</span>: [</div><div class=\"line\">        <span class=\"string\">'rest_framework.permissions.IsAdminUser'</span>,</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">'PAGE_SIZE'</span>: <span class=\"number\">10</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>好了，代码我们就写完了。</p>\n<h4 id=\"测试我们的API\"><a href=\"#测试我们的API\" class=\"headerlink\" title=\"测试我们的API\"></a>测试我们的API</h4><p>首先把测试服务器打开，让应用跑起来。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>服务开启正常后，我们就可以使用curl或者浏览器来测试api了。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">PS E:\\Study\\tutorial\\tutorial&gt; http -a admin:password123 http://127.0.0.1:8000/users/</div><div class=\"line\">HTTP/1.0 200 OK</div><div class=\"line\">Allow: GET, POST, HEAD, OPTIONS</div><div class=\"line\">Content-Length: 103</div><div class=\"line\">Content-Type: application/json</div><div class=\"line\">Date: Tue, 10 Oct 2017 03:05:10 GMT</div><div class=\"line\">Server: WSGIServer/0.1 Python/2.7.13</div><div class=\"line\">Vary: Accept, Cookie</div><div class=\"line\">X-Frame-Options: SAMEORIGIN</div><div class=\"line\"></div><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        &quot;email&quot;: &quot;admin@star-chen.com&quot;,</div><div class=\"line\">        &quot;groups&quot;: [],</div><div class=\"line\">        &quot;url&quot;: &quot;http://127.0.0.1:8000/users/1/&quot;,</div><div class=\"line\">        &quot;username&quot;: &quot;admin&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>浏览器中是这个画风，当然你得先登录。</p>\n<p><img src=\"/blogimg/quick_start.png\" alt=\"image\"></p>\n<p>ok,成功运行。</p>"},{"title":"Linux学习笔记之文件权限","date":"2017-05-23T09:32:43.000Z","_content":"\n在Linux系统中，一切皆为文件。当然文件权限的管理也相对复杂一些了。 Linux继续沿用了Unix管理文件权限的办法，其允许用户和组基于每个文件和目录的一组安全性设置来访问文件。但是对于使用“ls”命令查看Linux系统上的文件、目录和设备的权限时，输出的信息也没有弄得十分清楚，特地又重新学习了一下，免得遗忘，还是做下笔记。\n\n<!-- more -->\n\n### 理解ls命令的输出\n\n```bash\n[root@vultr etc]# ls -la\ntotal 1660\ndrwxr-xr-x 85 root  root   4096 May 22 07:14 .\ndr-xr-xr-x 18 root  root   4096 Dec 16 14:24 ..\n-rw-r--r--  1 root  root     16 Nov 14  2016 adjtime\n-rw-r--r--  1 root  root   1518 Jun  7  2013 aliases\n-rw-r--r--  1 root  root  12288 Dec 27 09:14 aliases.db\ndrwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives\n-rw-r--r--  1 root  root     55 Nov  4  2016 asound.conf\ndrwxr-xr-x  2 root  root   4096 Dec 16 14:26 avahi\ndrwxr-xr-x  2 root  root   4096 May 22 07:31 bash_completion.d\n-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc\ndrwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d\n-rw-r--r--  1 root  root     38 Nov 29 18:12 centos-release\n-rw-r--r--  1 root  root     51 Nov 29 18:12 centos-release-upstream\n```\n\n上面是我查看/etc目录下的文件时的部分输出。其输出结果有七个字段，下面来具体解释一下具体含义：\n\n#### 第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\n\n这个字段的第一个字符代表的含义有以下几种情况：\n\n- -代表文件；例子：-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc，表示bashrc是一个文件\n- d代表目录；例子：drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d，表示binfmt.d是一个目录\n- l代表链接；例子：lrwxrwxrwx  1 root root          25 Jan  7 13:32 initctl -> /run/systemd/initctl/fifo，表示inictl是一个链接到/run/systemd/initctl/fifo的链接\n- c代表字符设备；例子：crw--w----  1 root tty       4,   6 Jan  7 13:32 tty6，表示tty6是一个字符设备\n- b代表块设备；例子：brw-rw----   1 root disk    253,   0 4月  13 19:25 vda，表示vda是一个块设备，它其实这台云服务器的硬盘。\n- s代表socket文件；例子：srwxrwxrwx   1 mysql mysql        0 4月  13 19:25 mysql.sock，mysql.sock就是一个socket文件。\n- p代表管道文件；\n\n之后的3组三字符的编码：rwxr-xr-x，表示了该文件的三重访问权限\n\n- r代表对象是可读的；\n- w代表对象是可写的；\n- x代表对象是可执行的;\n\n如果没有某种权限，在该权限的位置会出现单破折线。这3组权限分别对应3个安全级别：\n\n- 对象的属主，也就是文件的所有者；\n- 对象的属组，也就是文件所有者所在的用户组；\n- 系统其他用户；\n\n理论上就是这样子了，我们去找个实际的例子来分析一下：\n\n> 例子：drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives\n\n![image](/blogimg/ls_detail.png)\n\n但是有时候我们更改文件权限是由三位数字来表示的，例如\"chmod 755 file\"，这又是怎么回事呢？这里有一张表可以参考一下：\n\n![image](/blogimg/linux_umask.png)\n\n把权限类型弄明白了，然后学习一下怎么更改Linux的文件权限的命令吧。\n\nchmod:用于改变文件的权限，SUID,SGID,SBIT等等\n\n1. chmod命令的格式\n\n   > chmod options mode file\n\n   mode参数后边可以跟上八进制模式或符号模式来设置文件权限\n\n   ```bash\n   [root@VM_0_49_centos ~]# ls -la file_test #原本file_test的权限为644\n   -rw-r--r-- 1 root apache 0 5月  23 21:55 file_test\n   [root@VM_0_49_centos ~]# chmod 760 file_test \n   [root@VM_0_49_centos ~]# ls -la file_test #更改后为760\n   -rwxrw---- 1 root apache 0 5月  23 21:55 file_test\n   ```\n\nchmod还有另外一种表示方式，较为复杂一些，命令格式如下：\n> chmod [ugoa...][+-=][rwxXstugo...]\n\n这样虽然复杂一些，但是更容易理解不是吗？\n- u  代表用户\n- g  代表组\n- o  代表拥有者\n- a  代表上述所有\n\n接下来的符号表示你是想在现有权限的基础上增加权限（+），还是移除权限（-），还是将权限设置为后面的值（=）\n\n最后的符号代表你想赋予的权限。详细的有：\n\n- X  如果对象是目录或者它已经有执行权限，则赋予执行权限\n- s  运行时重新设置UID或GID\n- t  保留文件或目录\n- u  将权限设置为属主一样\n- g  将权限设置为跟属组一样\n- o  将权限设置为跟其他用户一样\n\n举个栗子：\n\n```bash\n$ chmod o+r newfile #给文件所有者加上读权限\n```\n\n#### 第二个字段表示该文件的链接数，包括硬链接和软链接\n\n创建软链接：ln -s\n\n创建硬链接：ln\n\n#### 第三个字段表示该文件的所有者\n\n文件所有者可以通过chown命令来更改。命令格式：\n\n```bash\n$  chown [OPTION]... [OWNER][:[GROUP]] FILE...\n```\n\n当然，chown也可以同时更改文件所属的组。-R参数可以递归的更改子目录和文件的所属关系，-h参数可以改变文件的所有符号链接文件的所属关系。\n\n#### 第四个字段表示该文件所在的用户组\n\n文件所属的用户组可通过chgrp来进行更改。命令格式：\n\n```bash\n$   chgrp [OPTION]... GROUP FILE...\n```\n\n#### 第五个字段表示该文件的文件大小，单位字节\n\n#### 第六个字段表示文件的修改时间\n\n#### 第七个字段表示文件名\n\n","source":"_posts/Linux-File-Priveleges.md","raw":"---\ntitle: Linux学习笔记之文件权限\ncategories:\n  - Linux\ntags:\n  - 文件权限\n  - 学习笔记\ndate: 2017-05-23 17:32:43\n---\n\n在Linux系统中，一切皆为文件。当然文件权限的管理也相对复杂一些了。 Linux继续沿用了Unix管理文件权限的办法，其允许用户和组基于每个文件和目录的一组安全性设置来访问文件。但是对于使用“ls”命令查看Linux系统上的文件、目录和设备的权限时，输出的信息也没有弄得十分清楚，特地又重新学习了一下，免得遗忘，还是做下笔记。\n\n<!-- more -->\n\n### 理解ls命令的输出\n\n```bash\n[root@vultr etc]# ls -la\ntotal 1660\ndrwxr-xr-x 85 root  root   4096 May 22 07:14 .\ndr-xr-xr-x 18 root  root   4096 Dec 16 14:24 ..\n-rw-r--r--  1 root  root     16 Nov 14  2016 adjtime\n-rw-r--r--  1 root  root   1518 Jun  7  2013 aliases\n-rw-r--r--  1 root  root  12288 Dec 27 09:14 aliases.db\ndrwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives\n-rw-r--r--  1 root  root     55 Nov  4  2016 asound.conf\ndrwxr-xr-x  2 root  root   4096 Dec 16 14:26 avahi\ndrwxr-xr-x  2 root  root   4096 May 22 07:31 bash_completion.d\n-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc\ndrwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d\n-rw-r--r--  1 root  root     38 Nov 29 18:12 centos-release\n-rw-r--r--  1 root  root     51 Nov 29 18:12 centos-release-upstream\n```\n\n上面是我查看/etc目录下的文件时的部分输出。其输出结果有七个字段，下面来具体解释一下具体含义：\n\n#### 第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\n\n这个字段的第一个字符代表的含义有以下几种情况：\n\n- -代表文件；例子：-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc，表示bashrc是一个文件\n- d代表目录；例子：drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d，表示binfmt.d是一个目录\n- l代表链接；例子：lrwxrwxrwx  1 root root          25 Jan  7 13:32 initctl -> /run/systemd/initctl/fifo，表示inictl是一个链接到/run/systemd/initctl/fifo的链接\n- c代表字符设备；例子：crw--w----  1 root tty       4,   6 Jan  7 13:32 tty6，表示tty6是一个字符设备\n- b代表块设备；例子：brw-rw----   1 root disk    253,   0 4月  13 19:25 vda，表示vda是一个块设备，它其实这台云服务器的硬盘。\n- s代表socket文件；例子：srwxrwxrwx   1 mysql mysql        0 4月  13 19:25 mysql.sock，mysql.sock就是一个socket文件。\n- p代表管道文件；\n\n之后的3组三字符的编码：rwxr-xr-x，表示了该文件的三重访问权限\n\n- r代表对象是可读的；\n- w代表对象是可写的；\n- x代表对象是可执行的;\n\n如果没有某种权限，在该权限的位置会出现单破折线。这3组权限分别对应3个安全级别：\n\n- 对象的属主，也就是文件的所有者；\n- 对象的属组，也就是文件所有者所在的用户组；\n- 系统其他用户；\n\n理论上就是这样子了，我们去找个实际的例子来分析一下：\n\n> 例子：drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives\n\n![image](/blogimg/ls_detail.png)\n\n但是有时候我们更改文件权限是由三位数字来表示的，例如\"chmod 755 file\"，这又是怎么回事呢？这里有一张表可以参考一下：\n\n![image](/blogimg/linux_umask.png)\n\n把权限类型弄明白了，然后学习一下怎么更改Linux的文件权限的命令吧。\n\nchmod:用于改变文件的权限，SUID,SGID,SBIT等等\n\n1. chmod命令的格式\n\n   > chmod options mode file\n\n   mode参数后边可以跟上八进制模式或符号模式来设置文件权限\n\n   ```bash\n   [root@VM_0_49_centos ~]# ls -la file_test #原本file_test的权限为644\n   -rw-r--r-- 1 root apache 0 5月  23 21:55 file_test\n   [root@VM_0_49_centos ~]# chmod 760 file_test \n   [root@VM_0_49_centos ~]# ls -la file_test #更改后为760\n   -rwxrw---- 1 root apache 0 5月  23 21:55 file_test\n   ```\n\nchmod还有另外一种表示方式，较为复杂一些，命令格式如下：\n> chmod [ugoa...][+-=][rwxXstugo...]\n\n这样虽然复杂一些，但是更容易理解不是吗？\n- u  代表用户\n- g  代表组\n- o  代表拥有者\n- a  代表上述所有\n\n接下来的符号表示你是想在现有权限的基础上增加权限（+），还是移除权限（-），还是将权限设置为后面的值（=）\n\n最后的符号代表你想赋予的权限。详细的有：\n\n- X  如果对象是目录或者它已经有执行权限，则赋予执行权限\n- s  运行时重新设置UID或GID\n- t  保留文件或目录\n- u  将权限设置为属主一样\n- g  将权限设置为跟属组一样\n- o  将权限设置为跟其他用户一样\n\n举个栗子：\n\n```bash\n$ chmod o+r newfile #给文件所有者加上读权限\n```\n\n#### 第二个字段表示该文件的链接数，包括硬链接和软链接\n\n创建软链接：ln -s\n\n创建硬链接：ln\n\n#### 第三个字段表示该文件的所有者\n\n文件所有者可以通过chown命令来更改。命令格式：\n\n```bash\n$  chown [OPTION]... [OWNER][:[GROUP]] FILE...\n```\n\n当然，chown也可以同时更改文件所属的组。-R参数可以递归的更改子目录和文件的所属关系，-h参数可以改变文件的所有符号链接文件的所属关系。\n\n#### 第四个字段表示该文件所在的用户组\n\n文件所属的用户组可通过chgrp来进行更改。命令格式：\n\n```bash\n$   chgrp [OPTION]... GROUP FILE...\n```\n\n#### 第五个字段表示该文件的文件大小，单位字节\n\n#### 第六个字段表示文件的修改时间\n\n#### 第七个字段表示文件名\n\n","slug":"Linux-File-Priveleges","published":1,"updated":"2017-10-10T03:15:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzi9002jgov5oknq8lz2","content":"<p>在Linux系统中，一切皆为文件。当然文件权限的管理也相对复杂一些了。 Linux继续沿用了Unix管理文件权限的办法，其允许用户和组基于每个文件和目录的一组安全性设置来访问文件。但是对于使用“ls”命令查看Linux系统上的文件、目录和设备的权限时，输出的信息也没有弄得十分清楚，特地又重新学习了一下，免得遗忘，还是做下笔记。</p>\n<a id=\"more\"></a>\n<h3 id=\"理解ls命令的输出\"><a href=\"#理解ls命令的输出\" class=\"headerlink\" title=\"理解ls命令的输出\"></a>理解ls命令的输出</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr etc]<span class=\"comment\"># ls -la</span></div><div class=\"line\">total 1660</div><div class=\"line\">drwxr-xr-x 85 root  root   4096 May 22 07:14 .</div><div class=\"line\">dr-xr-xr-x 18 root  root   4096 Dec 16 14:24 ..</div><div class=\"line\">-rw-r--r--  1 root  root     16 Nov 14  2016 adjtime</div><div class=\"line\">-rw-r--r--  1 root  root   1518 Jun  7  2013 aliases</div><div class=\"line\">-rw-r--r--  1 root  root  12288 Dec 27 09:14 aliases.db</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives</div><div class=\"line\">-rw-r--r--  1 root  root     55 Nov  4  2016 asound.conf</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Dec 16 14:26 avahi</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 May 22 07:31 bash_completion.d</div><div class=\"line\">-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d</div><div class=\"line\">-rw-r--r--  1 root  root     38 Nov 29 18:12 centos-release</div><div class=\"line\">-rw-r--r--  1 root  root     51 Nov 29 18:12 centos-release-upstream</div></pre></td></tr></table></figure>\n<p>上面是我查看/etc目录下的文件时的部分输出。其输出结果有七个字段，下面来具体解释一下具体含义：</p>\n<h4 id=\"第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\"><a href=\"#第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\" class=\"headerlink\" title=\"第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\"></a>第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。</h4><p>这个字段的第一个字符代表的含义有以下几种情况：</p>\n<ul>\n<li>-代表文件；例子：-rw-r–r–  1 root  root   2853 Nov  5  2016 bashrc，表示bashrc是一个文件</li>\n<li>d代表目录；例子：drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d，表示binfmt.d是一个目录</li>\n<li>l代表链接；例子：lrwxrwxrwx  1 root root          25 Jan  7 13:32 initctl -&gt; /run/systemd/initctl/fifo，表示inictl是一个链接到/run/systemd/initctl/fifo的链接</li>\n<li>c代表字符设备；例子：crw–w—-  1 root tty       4,   6 Jan  7 13:32 tty6，表示tty6是一个字符设备</li>\n<li>b代表块设备；例子：brw-rw—-   1 root disk    253,   0 4月  13 19:25 vda，表示vda是一个块设备，它其实这台云服务器的硬盘。</li>\n<li>s代表socket文件；例子：srwxrwxrwx   1 mysql mysql        0 4月  13 19:25 mysql.sock，mysql.sock就是一个socket文件。</li>\n<li>p代表管道文件；</li>\n</ul>\n<p>之后的3组三字符的编码：rwxr-xr-x，表示了该文件的三重访问权限</p>\n<ul>\n<li>r代表对象是可读的；</li>\n<li>w代表对象是可写的；</li>\n<li>x代表对象是可执行的;</li>\n</ul>\n<p>如果没有某种权限，在该权限的位置会出现单破折线。这3组权限分别对应3个安全级别：</p>\n<ul>\n<li>对象的属主，也就是文件的所有者；</li>\n<li>对象的属组，也就是文件所有者所在的用户组；</li>\n<li>系统其他用户；</li>\n</ul>\n<p>理论上就是这样子了，我们去找个实际的例子来分析一下：</p>\n<blockquote>\n<p>例子：drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives</p>\n</blockquote>\n<p><img src=\"/blogimg/ls_detail.png\" alt=\"image\"></p>\n<p>但是有时候我们更改文件权限是由三位数字来表示的，例如”chmod 755 file”，这又是怎么回事呢？这里有一张表可以参考一下：</p>\n<p><img src=\"/blogimg/linux_umask.png\" alt=\"image\"></p>\n<p>把权限类型弄明白了，然后学习一下怎么更改Linux的文件权限的命令吧。</p>\n<p>chmod:用于改变文件的权限，SUID,SGID,SBIT等等</p>\n<ol>\n<li><p>chmod命令的格式</p>\n<blockquote>\n<p>chmod options mode file</p>\n</blockquote>\n<p>mode参数后边可以跟上八进制模式或符号模式来设置文件权限</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># ls -la file_test #原本file_test的权限为644</span></div><div class=\"line\">-rw-r--r-- 1 root apache 0 5月  23 21:55 file_<span class=\"built_in\">test</span></div><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># chmod 760 file_test </span></div><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># ls -la file_test #更改后为760</span></div><div class=\"line\">-rwxrw---- 1 root apache 0 5月  23 21:55 file_<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>chmod还有另外一种表示方式，较为复杂一些，命令格式如下：</p>\n<blockquote>\n<p>chmod [ugoa…][+-=][rwxXstugo…]</p>\n</blockquote>\n<p>这样虽然复杂一些，但是更容易理解不是吗？</p>\n<ul>\n<li>u  代表用户</li>\n<li>g  代表组</li>\n<li>o  代表拥有者</li>\n<li>a  代表上述所有</li>\n</ul>\n<p>接下来的符号表示你是想在现有权限的基础上增加权限（+），还是移除权限（-），还是将权限设置为后面的值（=）</p>\n<p>最后的符号代表你想赋予的权限。详细的有：</p>\n<ul>\n<li>X  如果对象是目录或者它已经有执行权限，则赋予执行权限</li>\n<li>s  运行时重新设置UID或GID</li>\n<li>t  保留文件或目录</li>\n<li>u  将权限设置为属主一样</li>\n<li>g  将权限设置为跟属组一样</li>\n<li>o  将权限设置为跟其他用户一样</li>\n</ul>\n<p>举个栗子：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod o+r newfile <span class=\"comment\">#给文件所有者加上读权限</span></div></pre></td></tr></table></figure>\n<h4 id=\"第二个字段表示该文件的链接数，包括硬链接和软链接\"><a href=\"#第二个字段表示该文件的链接数，包括硬链接和软链接\" class=\"headerlink\" title=\"第二个字段表示该文件的链接数，包括硬链接和软链接\"></a>第二个字段表示该文件的链接数，包括硬链接和软链接</h4><p>创建软链接：ln -s</p>\n<p>创建硬链接：ln</p>\n<h4 id=\"第三个字段表示该文件的所有者\"><a href=\"#第三个字段表示该文件的所有者\" class=\"headerlink\" title=\"第三个字段表示该文件的所有者\"></a>第三个字段表示该文件的所有者</h4><p>文件所有者可以通过chown命令来更改。命令格式：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  chown [OPTION]... [OWNER][:[GROUP]] FILE...</div></pre></td></tr></table></figure>\n<p>当然，chown也可以同时更改文件所属的组。-R参数可以递归的更改子目录和文件的所属关系，-h参数可以改变文件的所有符号链接文件的所属关系。</p>\n<h4 id=\"第四个字段表示该文件所在的用户组\"><a href=\"#第四个字段表示该文件所在的用户组\" class=\"headerlink\" title=\"第四个字段表示该文件所在的用户组\"></a>第四个字段表示该文件所在的用户组</h4><p>文件所属的用户组可通过chgrp来进行更改。命令格式：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$   chgrp [OPTION]... GROUP FILE...</div></pre></td></tr></table></figure>\n<h4 id=\"第五个字段表示该文件的文件大小，单位字节\"><a href=\"#第五个字段表示该文件的文件大小，单位字节\" class=\"headerlink\" title=\"第五个字段表示该文件的文件大小，单位字节\"></a>第五个字段表示该文件的文件大小，单位字节</h4><h4 id=\"第六个字段表示文件的修改时间\"><a href=\"#第六个字段表示文件的修改时间\" class=\"headerlink\" title=\"第六个字段表示文件的修改时间\"></a>第六个字段表示文件的修改时间</h4><h4 id=\"第七个字段表示文件名\"><a href=\"#第七个字段表示文件名\" class=\"headerlink\" title=\"第七个字段表示文件名\"></a>第七个字段表示文件名</h4>","excerpt":"<p>在Linux系统中，一切皆为文件。当然文件权限的管理也相对复杂一些了。 Linux继续沿用了Unix管理文件权限的办法，其允许用户和组基于每个文件和目录的一组安全性设置来访问文件。但是对于使用“ls”命令查看Linux系统上的文件、目录和设备的权限时，输出的信息也没有弄得十分清楚，特地又重新学习了一下，免得遗忘，还是做下笔记。</p>","more":"<h3 id=\"理解ls命令的输出\"><a href=\"#理解ls命令的输出\" class=\"headerlink\" title=\"理解ls命令的输出\"></a>理解ls命令的输出</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr etc]<span class=\"comment\"># ls -la</span></div><div class=\"line\">total 1660</div><div class=\"line\">drwxr-xr-x 85 root  root   4096 May 22 07:14 .</div><div class=\"line\">dr-xr-xr-x 18 root  root   4096 Dec 16 14:24 ..</div><div class=\"line\">-rw-r--r--  1 root  root     16 Nov 14  2016 adjtime</div><div class=\"line\">-rw-r--r--  1 root  root   1518 Jun  7  2013 aliases</div><div class=\"line\">-rw-r--r--  1 root  root  12288 Dec 27 09:14 aliases.db</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives</div><div class=\"line\">-rw-r--r--  1 root  root     55 Nov  4  2016 asound.conf</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Dec 16 14:26 avahi</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 May 22 07:31 bash_completion.d</div><div class=\"line\">-rw-r--r--  1 root  root   2853 Nov  5  2016 bashrc</div><div class=\"line\">drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d</div><div class=\"line\">-rw-r--r--  1 root  root     38 Nov 29 18:12 centos-release</div><div class=\"line\">-rw-r--r--  1 root  root     51 Nov 29 18:12 centos-release-upstream</div></pre></td></tr></table></figure>\n<p>上面是我查看/etc目录下的文件时的部分输出。其输出结果有七个字段，下面来具体解释一下具体含义：</p>\n<h4 id=\"第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\"><a href=\"#第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\" class=\"headerlink\" title=\"第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。\"></a>第一个字段：drwxr-xr-x，这个字段描述的是文件和目录权限码。</h4><p>这个字段的第一个字符代表的含义有以下几种情况：</p>\n<ul>\n<li>-代表文件；例子：-rw-r–r–  1 root  root   2853 Nov  5  2016 bashrc，表示bashrc是一个文件</li>\n<li>d代表目录；例子：drwxr-xr-x  2 root  root   4096 Mar  3 03:23 binfmt.d，表示binfmt.d是一个目录</li>\n<li>l代表链接；例子：lrwxrwxrwx  1 root root          25 Jan  7 13:32 initctl -&gt; /run/systemd/initctl/fifo，表示inictl是一个链接到/run/systemd/initctl/fifo的链接</li>\n<li>c代表字符设备；例子：crw–w—-  1 root tty       4,   6 Jan  7 13:32 tty6，表示tty6是一个字符设备</li>\n<li>b代表块设备；例子：brw-rw—-   1 root disk    253,   0 4月  13 19:25 vda，表示vda是一个块设备，它其实这台云服务器的硬盘。</li>\n<li>s代表socket文件；例子：srwxrwxrwx   1 mysql mysql        0 4月  13 19:25 mysql.sock，mysql.sock就是一个socket文件。</li>\n<li>p代表管道文件；</li>\n</ul>\n<p>之后的3组三字符的编码：rwxr-xr-x，表示了该文件的三重访问权限</p>\n<ul>\n<li>r代表对象是可读的；</li>\n<li>w代表对象是可写的；</li>\n<li>x代表对象是可执行的;</li>\n</ul>\n<p>如果没有某种权限，在该权限的位置会出现单破折线。这3组权限分别对应3个安全级别：</p>\n<ul>\n<li>对象的属主，也就是文件的所有者；</li>\n<li>对象的属组，也就是文件所有者所在的用户组；</li>\n<li>系统其他用户；</li>\n</ul>\n<p>理论上就是这样子了，我们去找个实际的例子来分析一下：</p>\n<blockquote>\n<p>例子：drwxr-xr-x  2 root  root   4096 Mar 11 04:11 alternatives</p>\n</blockquote>\n<p><img src=\"/blogimg/ls_detail.png\" alt=\"image\"></p>\n<p>但是有时候我们更改文件权限是由三位数字来表示的，例如”chmod 755 file”，这又是怎么回事呢？这里有一张表可以参考一下：</p>\n<p><img src=\"/blogimg/linux_umask.png\" alt=\"image\"></p>\n<p>把权限类型弄明白了，然后学习一下怎么更改Linux的文件权限的命令吧。</p>\n<p>chmod:用于改变文件的权限，SUID,SGID,SBIT等等</p>\n<ol>\n<li><p>chmod命令的格式</p>\n<blockquote>\n<p>chmod options mode file</p>\n</blockquote>\n<p>mode参数后边可以跟上八进制模式或符号模式来设置文件权限</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># ls -la file_test #原本file_test的权限为644</span></div><div class=\"line\">-rw-r--r-- 1 root apache 0 5月  23 21:55 file_<span class=\"built_in\">test</span></div><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># chmod 760 file_test </span></div><div class=\"line\">[root@VM_0_49_centos ~]<span class=\"comment\"># ls -la file_test #更改后为760</span></div><div class=\"line\">-rwxrw---- 1 root apache 0 5月  23 21:55 file_<span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>chmod还有另外一种表示方式，较为复杂一些，命令格式如下：</p>\n<blockquote>\n<p>chmod [ugoa…][+-=][rwxXstugo…]</p>\n</blockquote>\n<p>这样虽然复杂一些，但是更容易理解不是吗？</p>\n<ul>\n<li>u  代表用户</li>\n<li>g  代表组</li>\n<li>o  代表拥有者</li>\n<li>a  代表上述所有</li>\n</ul>\n<p>接下来的符号表示你是想在现有权限的基础上增加权限（+），还是移除权限（-），还是将权限设置为后面的值（=）</p>\n<p>最后的符号代表你想赋予的权限。详细的有：</p>\n<ul>\n<li>X  如果对象是目录或者它已经有执行权限，则赋予执行权限</li>\n<li>s  运行时重新设置UID或GID</li>\n<li>t  保留文件或目录</li>\n<li>u  将权限设置为属主一样</li>\n<li>g  将权限设置为跟属组一样</li>\n<li>o  将权限设置为跟其他用户一样</li>\n</ul>\n<p>举个栗子：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod o+r newfile <span class=\"comment\">#给文件所有者加上读权限</span></div></pre></td></tr></table></figure>\n<h4 id=\"第二个字段表示该文件的链接数，包括硬链接和软链接\"><a href=\"#第二个字段表示该文件的链接数，包括硬链接和软链接\" class=\"headerlink\" title=\"第二个字段表示该文件的链接数，包括硬链接和软链接\"></a>第二个字段表示该文件的链接数，包括硬链接和软链接</h4><p>创建软链接：ln -s</p>\n<p>创建硬链接：ln</p>\n<h4 id=\"第三个字段表示该文件的所有者\"><a href=\"#第三个字段表示该文件的所有者\" class=\"headerlink\" title=\"第三个字段表示该文件的所有者\"></a>第三个字段表示该文件的所有者</h4><p>文件所有者可以通过chown命令来更改。命令格式：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$  chown [OPTION]... [OWNER][:[GROUP]] FILE...</div></pre></td></tr></table></figure>\n<p>当然，chown也可以同时更改文件所属的组。-R参数可以递归的更改子目录和文件的所属关系，-h参数可以改变文件的所有符号链接文件的所属关系。</p>\n<h4 id=\"第四个字段表示该文件所在的用户组\"><a href=\"#第四个字段表示该文件所在的用户组\" class=\"headerlink\" title=\"第四个字段表示该文件所在的用户组\"></a>第四个字段表示该文件所在的用户组</h4><p>文件所属的用户组可通过chgrp来进行更改。命令格式：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$   chgrp [OPTION]... GROUP FILE...</div></pre></td></tr></table></figure>\n<h4 id=\"第五个字段表示该文件的文件大小，单位字节\"><a href=\"#第五个字段表示该文件的文件大小，单位字节\" class=\"headerlink\" title=\"第五个字段表示该文件的文件大小，单位字节\"></a>第五个字段表示该文件的文件大小，单位字节</h4><h4 id=\"第六个字段表示文件的修改时间\"><a href=\"#第六个字段表示文件的修改时间\" class=\"headerlink\" title=\"第六个字段表示文件的修改时间\"></a>第六个字段表示文件的修改时间</h4><h4 id=\"第七个字段表示文件名\"><a href=\"#第七个字段表示文件名\" class=\"headerlink\" title=\"第七个字段表示文件名\"></a>第七个字段表示文件名</h4>"},{"title":"TPLINK系列路由器新版UI登录算法","date":"2017-06-02T08:18:32.000Z","_content":"\n因为某些原因需要用程序来向路由器提交宽带帐号和密码，进行拨号等操作。原本的TP系的路由器使用的是Basic认证，只要在http请求头中加上个Authtication头就可以通过认证了，某些型号也最多要求个Referer或者cookie，但是新版的UI登录的过程需要在浏览器端把密码加密后再发送到路由以获得一个token来通过认证。下面记录一下我的分析过程。\n\n<!-- more -->\n\n经过寻找，加密算法存在与jquery.js这个文件中（一直以为只是引用了jquery库，谁曾想关键代码都在这里边）。\n\n```javascript\n securityEncode: function(a, b, c) {\n            var e = \"\",\n            f, g, h, k, l = 187,\n            n = 187;\n            g = a.length;\n            h = b.length;\n            k = c.length;\n            f = g > h ? g: h;\n            for (var p = 0; p < f; p++) n = l = 187,\n            p >= g ? n = b.charCodeAt(p) : p >= h ? l = a.charCodeAt(p) : (l = a.charCodeAt(p), n = b.charCodeAt(p)),\n            e += c.charAt((l ^ n) % k);\n            return e\n        },\n        orgAuthPwd: function(a) {\n            return $.securityEncode(\"RDpbLfCPsJZ7fiv\", a, \"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\")\n        },\n```\n\n关键的加密过程的算法都在这里了。\n\n然后用C#重写一下：\n\n```c#\npublic  string securityEncode(string a, string b, string c)\n        {\n            string e = \"\";\n            int f, g, h, k, l = 187, n = 187;\n            g = a.Length;//短验证码的长度(固定为15)  \n            h = b.Length;//密码长度  \n            k = c.Length;//长验证码的长度(固定为255)  \n            if (g > h)//将短验证码字符串和密码字符串的长度进行比较  \n            {\n                f = g;\n            }\n            else\n            {\n                f = h;\n            }\n            //f取长的那个字符串的长度  \n            for (int p = 0; p < f; p++)\n            {\n                n = l = 187;\n                if (p >= g)\n                {\n                    n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  \n                }\n                else\n                {\n                    if (p >= h)\n                    {\n                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  \n                    }\n                    else\n                    {\n                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  \n                        n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  \n                    }\n                }\n                //每次计算出l和n的值之后对其取异或然后除以k(也就是除以255),  \n                //取长验证码中以0开始的第(l^n)%k位，然后拼接到字符串e的后面  \n                e += c.Substring((l ^ n) % k, 1);\n            }\n\n            return e;//返回加密后的密码  \n        }\n```\n\n利用C#模拟登录路由器：\n\n```c#\n public string Login886(string data,string url) {\n\n            string post_data = \"{\\\"method\\\":\\\"do\\\",\\\"login\\\":{\\\"password\\\":\\\"\"+data+\"\\\"}}\";\n            byte[] encode_data = System.Text.Encoding.UTF8.GetBytes(post_data);\n            \n\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n            request.Method = \"POST\";\n            request.ContentLength = encode_data.Length;\n            request.Headers.Add(\"Origin\", url);\n            request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36\";\n            request.ContentType = \"application/json; charset=UTF-8\";\n            request.Accept = \"application/json, text/javascript, */*; q=0.01\";\n            request.Headers.Add(\"X-Requested-With\", \"XMLHttpRequest\");\n            request.Referer = url;\n            request.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n            request.Headers.Add(\"Accept-Language\", \"zh-CN, zh; q=0.8,en; q=0.6,ja; q=0.4\");\n\n            //这句代码一定要加上，不然路由器不会响应登录请求\n            request.ServicePoint.Expect100Continue = false;\n            \n            Stream myRequestStream = request.GetRequestStream();\n           \n            myRequestStream.Write(encode_data, 0, encode_data.Length);\n            myRequestStream.Close();\n\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n\n            Stream myResponseStream = response.GetResponseStream();\n            StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n            string retString = myStreamReader.ReadToEnd();\n            myStreamReader.Close();\n            myResponseStream.Close();\n\n            return retString;\n           \n\n        }\n```\n\n完\n\n\n\n参考资料： http://blog.csdn.net/dev_here/article/details/51235324","source":"_posts/LoginNewTP.md","raw":"---\ntitle: TPLINK系列路由器新版UI登录算法\ncategories:\n  - Program\ntags:\n  - router\ndate: 2017-06-02 16:18:32\n---\n\n因为某些原因需要用程序来向路由器提交宽带帐号和密码，进行拨号等操作。原本的TP系的路由器使用的是Basic认证，只要在http请求头中加上个Authtication头就可以通过认证了，某些型号也最多要求个Referer或者cookie，但是新版的UI登录的过程需要在浏览器端把密码加密后再发送到路由以获得一个token来通过认证。下面记录一下我的分析过程。\n\n<!-- more -->\n\n经过寻找，加密算法存在与jquery.js这个文件中（一直以为只是引用了jquery库，谁曾想关键代码都在这里边）。\n\n```javascript\n securityEncode: function(a, b, c) {\n            var e = \"\",\n            f, g, h, k, l = 187,\n            n = 187;\n            g = a.length;\n            h = b.length;\n            k = c.length;\n            f = g > h ? g: h;\n            for (var p = 0; p < f; p++) n = l = 187,\n            p >= g ? n = b.charCodeAt(p) : p >= h ? l = a.charCodeAt(p) : (l = a.charCodeAt(p), n = b.charCodeAt(p)),\n            e += c.charAt((l ^ n) % k);\n            return e\n        },\n        orgAuthPwd: function(a) {\n            return $.securityEncode(\"RDpbLfCPsJZ7fiv\", a, \"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\")\n        },\n```\n\n关键的加密过程的算法都在这里了。\n\n然后用C#重写一下：\n\n```c#\npublic  string securityEncode(string a, string b, string c)\n        {\n            string e = \"\";\n            int f, g, h, k, l = 187, n = 187;\n            g = a.Length;//短验证码的长度(固定为15)  \n            h = b.Length;//密码长度  \n            k = c.Length;//长验证码的长度(固定为255)  \n            if (g > h)//将短验证码字符串和密码字符串的长度进行比较  \n            {\n                f = g;\n            }\n            else\n            {\n                f = h;\n            }\n            //f取长的那个字符串的长度  \n            for (int p = 0; p < f; p++)\n            {\n                n = l = 187;\n                if (p >= g)\n                {\n                    n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  \n                }\n                else\n                {\n                    if (p >= h)\n                    {\n                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  \n                    }\n                    else\n                    {\n                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  \n                        n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  \n                    }\n                }\n                //每次计算出l和n的值之后对其取异或然后除以k(也就是除以255),  \n                //取长验证码中以0开始的第(l^n)%k位，然后拼接到字符串e的后面  \n                e += c.Substring((l ^ n) % k, 1);\n            }\n\n            return e;//返回加密后的密码  \n        }\n```\n\n利用C#模拟登录路由器：\n\n```c#\n public string Login886(string data,string url) {\n\n            string post_data = \"{\\\"method\\\":\\\"do\\\",\\\"login\\\":{\\\"password\\\":\\\"\"+data+\"\\\"}}\";\n            byte[] encode_data = System.Text.Encoding.UTF8.GetBytes(post_data);\n            \n\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n            request.Method = \"POST\";\n            request.ContentLength = encode_data.Length;\n            request.Headers.Add(\"Origin\", url);\n            request.UserAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36\";\n            request.ContentType = \"application/json; charset=UTF-8\";\n            request.Accept = \"application/json, text/javascript, */*; q=0.01\";\n            request.Headers.Add(\"X-Requested-With\", \"XMLHttpRequest\");\n            request.Referer = url;\n            request.Headers.Add(\"Accept-Encoding\", \"gzip, deflate\");\n            request.Headers.Add(\"Accept-Language\", \"zh-CN, zh; q=0.8,en; q=0.6,ja; q=0.4\");\n\n            //这句代码一定要加上，不然路由器不会响应登录请求\n            request.ServicePoint.Expect100Continue = false;\n            \n            Stream myRequestStream = request.GetRequestStream();\n           \n            myRequestStream.Write(encode_data, 0, encode_data.Length);\n            myRequestStream.Close();\n\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n\n            Stream myResponseStream = response.GetResponseStream();\n            StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(\"utf-8\"));\n            string retString = myStreamReader.ReadToEnd();\n            myStreamReader.Close();\n            myResponseStream.Close();\n\n            return retString;\n           \n\n        }\n```\n\n完\n\n\n\n参考资料： http://blog.csdn.net/dev_here/article/details/51235324","slug":"LoginNewTP","published":1,"updated":"2017-10-10T03:15:08.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzic002mgov5jmmhfqmj","content":"<p>因为某些原因需要用程序来向路由器提交宽带帐号和密码，进行拨号等操作。原本的TP系的路由器使用的是Basic认证，只要在http请求头中加上个Authtication头就可以通过认证了，某些型号也最多要求个Referer或者cookie，但是新版的UI登录的过程需要在浏览器端把密码加密后再发送到路由以获得一个token来通过认证。下面记录一下我的分析过程。</p>\n<a id=\"more\"></a>\n<p>经过寻找，加密算法存在与jquery.js这个文件中（一直以为只是引用了jquery库，谁曾想关键代码都在这里边）。</p>\n<figure class=\"highlight javascript\" data-lang=\" javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">securityEncode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> e = <span class=\"string\">\"\"</span>,</div><div class=\"line\">           f, g, h, k, l = <span class=\"number\">187</span>,</div><div class=\"line\">           n = <span class=\"number\">187</span>;</div><div class=\"line\">           g = a.length;</div><div class=\"line\">           h = b.length;</div><div class=\"line\">           k = c.length;</div><div class=\"line\">           f = g &gt; h ? g: h;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>; p &lt; f; p++) n = l = <span class=\"number\">187</span>,</div><div class=\"line\">           p &gt;= g ? n = b.charCodeAt(p) : p &gt;= h ? l = a.charCodeAt(p) : (l = a.charCodeAt(p), n = b.charCodeAt(p)),</div><div class=\"line\">           e += c.charAt((l ^ n) % k);</div><div class=\"line\">           <span class=\"keyword\">return</span> e</div><div class=\"line\">       &#125;,</div><div class=\"line\">       orgAuthPwd: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> $.securityEncode(<span class=\"string\">\"RDpbLfCPsJZ7fiv\"</span>, a, <span class=\"string\">\"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"</span>)</div><div class=\"line\">       &#125;,</div></pre></td></tr></table></figure>\n<p>关键的加密过程的算法都在这里了。</p>\n<p>然后用C#重写一下：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public  string securityEncode(string a, string b, string c)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string e = &quot;&quot;;</div><div class=\"line\">            int f, g, h, k, l = 187, n = 187;</div><div class=\"line\">            g = a.Length;//短验证码的长度(固定为15)  </div><div class=\"line\">            h = b.Length;//密码长度  </div><div class=\"line\">            k = c.Length;//长验证码的长度(固定为255)  </div><div class=\"line\">            if (g &gt; h)//将短验证码字符串和密码字符串的长度进行比较  </div><div class=\"line\">            &#123;</div><div class=\"line\">                f = g;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else</div><div class=\"line\">            &#123;</div><div class=\"line\">                f = h;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //f取长的那个字符串的长度  </div><div class=\"line\">            for (int p = 0; p &lt; f; p++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                n = l = 187;</div><div class=\"line\">                if (p &gt;= g)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  </div><div class=\"line\">                &#125;</div><div class=\"line\">                else</div><div class=\"line\">                &#123;</div><div class=\"line\">                    if (p &gt;= h)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  </div><div class=\"line\">                        n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                //每次计算出l和n的值之后对其取异或然后除以k(也就是除以255),  </div><div class=\"line\">                //取长验证码中以0开始的第(l^n)%k位，然后拼接到字符串e的后面  </div><div class=\"line\">                e += c.Substring((l ^ n) % k, 1);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return e;//返回加密后的密码  </div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>利用C#模拟登录路由器：</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">public string Login886(string data,string url) &#123;</div><div class=\"line\"></div><div class=\"line\">           string post_data = &quot;&#123;\\&quot;method\\&quot;:\\&quot;do\\&quot;,\\&quot;login\\&quot;:&#123;\\&quot;password\\&quot;:\\&quot;&quot;+data+&quot;\\&quot;&#125;&#125;&quot;;</div><div class=\"line\">           byte[] encode_data = System.Text.Encoding.UTF8.GetBytes(post_data);</div><div class=\"line\">           </div><div class=\"line\"></div><div class=\"line\">           HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</div><div class=\"line\">           request.Method = &quot;POST&quot;;</div><div class=\"line\">           request.ContentLength = encode_data.Length;</div><div class=\"line\">           request.Headers.Add(&quot;Origin&quot;, url);</div><div class=\"line\">           request.UserAgent = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36&quot;;</div><div class=\"line\">           request.ContentType = &quot;application/json; charset=UTF-8&quot;;</div><div class=\"line\">           request.Accept = &quot;application/json, text/javascript, */*; q=0.01&quot;;</div><div class=\"line\">           request.Headers.Add(&quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot;);</div><div class=\"line\">           request.Referer = url;</div><div class=\"line\">           request.Headers.Add(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);</div><div class=\"line\">           request.Headers.Add(&quot;Accept-Language&quot;, &quot;zh-CN, zh; q=0.8,en; q=0.6,ja; q=0.4&quot;);</div><div class=\"line\"></div><div class=\"line\">           //这句代码一定要加上，不然路由器不会响应登录请求</div><div class=\"line\">           request.ServicePoint.Expect100Continue = false;</div><div class=\"line\">           </div><div class=\"line\">           Stream myRequestStream = request.GetRequestStream();</div><div class=\"line\">          </div><div class=\"line\">           myRequestStream.Write(encode_data, 0, encode_data.Length);</div><div class=\"line\">           myRequestStream.Close();</div><div class=\"line\"></div><div class=\"line\">           HttpWebResponse response = (HttpWebResponse)request.GetResponse();</div><div class=\"line\"></div><div class=\"line\">           Stream myResponseStream = response.GetResponseStream();</div><div class=\"line\">           StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(&quot;utf-8&quot;));</div><div class=\"line\">           string retString = myStreamReader.ReadToEnd();</div><div class=\"line\">           myStreamReader.Close();</div><div class=\"line\">           myResponseStream.Close();</div><div class=\"line\"></div><div class=\"line\">           return retString;</div><div class=\"line\">          </div><div class=\"line\"></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>完</p>\n<p>参考资料： <a href=\"http://blog.csdn.net/dev_here/article/details/51235324\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/dev_here/article/details/51235324</a></p>\n","excerpt":"<p>因为某些原因需要用程序来向路由器提交宽带帐号和密码，进行拨号等操作。原本的TP系的路由器使用的是Basic认证，只要在http请求头中加上个Authtication头就可以通过认证了，某些型号也最多要求个Referer或者cookie，但是新版的UI登录的过程需要在浏览器端把密码加密后再发送到路由以获得一个token来通过认证。下面记录一下我的分析过程。</p>","more":"<p>经过寻找，加密算法存在与jquery.js这个文件中（一直以为只是引用了jquery库，谁曾想关键代码都在这里边）。</p>\n<figure class=\"highlight javascript\"data-lang=\" javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">securityEncode: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">var</span> e = <span class=\"string\">\"\"</span>,</div><div class=\"line\">           f, g, h, k, l = <span class=\"number\">187</span>,</div><div class=\"line\">           n = <span class=\"number\">187</span>;</div><div class=\"line\">           g = a.length;</div><div class=\"line\">           h = b.length;</div><div class=\"line\">           k = c.length;</div><div class=\"line\">           f = g &gt; h ? g: h;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p = <span class=\"number\">0</span>; p &lt; f; p++) n = l = <span class=\"number\">187</span>,</div><div class=\"line\">           p &gt;= g ? n = b.charCodeAt(p) : p &gt;= h ? l = a.charCodeAt(p) : (l = a.charCodeAt(p), n = b.charCodeAt(p)),</div><div class=\"line\">           e += c.charAt((l ^ n) % k);</div><div class=\"line\">           <span class=\"keyword\">return</span> e</div><div class=\"line\">       &#125;,</div><div class=\"line\">       orgAuthPwd: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> $.securityEncode(<span class=\"string\">\"RDpbLfCPsJZ7fiv\"</span>, a, <span class=\"string\">\"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"</span>)</div><div class=\"line\">       &#125;,</div></pre></td></tr></table></figure>\n<p>关键的加密过程的算法都在这里了。</p>\n<p>然后用C#重写一下：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">public  string securityEncode(string a, string b, string c)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string e = &quot;&quot;;</div><div class=\"line\">            int f, g, h, k, l = 187, n = 187;</div><div class=\"line\">            g = a.Length;//短验证码的长度(固定为15)  </div><div class=\"line\">            h = b.Length;//密码长度  </div><div class=\"line\">            k = c.Length;//长验证码的长度(固定为255)  </div><div class=\"line\">            if (g &gt; h)//将短验证码字符串和密码字符串的长度进行比较  </div><div class=\"line\">            &#123;</div><div class=\"line\">                f = g;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else</div><div class=\"line\">            &#123;</div><div class=\"line\">                f = h;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //f取长的那个字符串的长度  </div><div class=\"line\">            for (int p = 0; p &lt; f; p++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                n = l = 187;</div><div class=\"line\">                if (p &gt;= g)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  </div><div class=\"line\">                &#125;</div><div class=\"line\">                else</div><div class=\"line\">                &#123;</div><div class=\"line\">                    if (p &gt;= h)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        l = a.Substring(p, 1).ToCharArray()[0];//l取短验证码中的以0开始的第p位字符  </div><div class=\"line\">                        n = b.Substring(p, 1).ToCharArray()[0];//n取密码中的以0开始的第p位字符  </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                //每次计算出l和n的值之后对其取异或然后除以k(也就是除以255),  </div><div class=\"line\">                //取长验证码中以0开始的第(l^n)%k位，然后拼接到字符串e的后面  </div><div class=\"line\">                e += c.Substring((l ^ n) % k, 1);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            return e;//返回加密后的密码  </div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>利用C#模拟登录路由器：</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">public string Login886(string data,string url) &#123;</div><div class=\"line\"></div><div class=\"line\">           string post_data = &quot;&#123;\\&quot;method\\&quot;:\\&quot;do\\&quot;,\\&quot;login\\&quot;:&#123;\\&quot;password\\&quot;:\\&quot;&quot;+data+&quot;\\&quot;&#125;&#125;&quot;;</div><div class=\"line\">           byte[] encode_data = System.Text.Encoding.UTF8.GetBytes(post_data);</div><div class=\"line\">           </div><div class=\"line\"></div><div class=\"line\">           HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);</div><div class=\"line\">           request.Method = &quot;POST&quot;;</div><div class=\"line\">           request.ContentLength = encode_data.Length;</div><div class=\"line\">           request.Headers.Add(&quot;Origin&quot;, url);</div><div class=\"line\">           request.UserAgent = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.96 Safari/537.36&quot;;</div><div class=\"line\">           request.ContentType = &quot;application/json; charset=UTF-8&quot;;</div><div class=\"line\">           request.Accept = &quot;application/json, text/javascript, */*; q=0.01&quot;;</div><div class=\"line\">           request.Headers.Add(&quot;X-Requested-With&quot;, &quot;XMLHttpRequest&quot;);</div><div class=\"line\">           request.Referer = url;</div><div class=\"line\">           request.Headers.Add(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;);</div><div class=\"line\">           request.Headers.Add(&quot;Accept-Language&quot;, &quot;zh-CN, zh; q=0.8,en; q=0.6,ja; q=0.4&quot;);</div><div class=\"line\"></div><div class=\"line\">           //这句代码一定要加上，不然路由器不会响应登录请求</div><div class=\"line\">           request.ServicePoint.Expect100Continue = false;</div><div class=\"line\">           </div><div class=\"line\">           Stream myRequestStream = request.GetRequestStream();</div><div class=\"line\">          </div><div class=\"line\">           myRequestStream.Write(encode_data, 0, encode_data.Length);</div><div class=\"line\">           myRequestStream.Close();</div><div class=\"line\"></div><div class=\"line\">           HttpWebResponse response = (HttpWebResponse)request.GetResponse();</div><div class=\"line\"></div><div class=\"line\">           Stream myResponseStream = response.GetResponseStream();</div><div class=\"line\">           StreamReader myStreamReader = new StreamReader(myResponseStream, Encoding.GetEncoding(&quot;utf-8&quot;));</div><div class=\"line\">           string retString = myStreamReader.ReadToEnd();</div><div class=\"line\">           myStreamReader.Close();</div><div class=\"line\">           myResponseStream.Close();</div><div class=\"line\"></div><div class=\"line\">           return retString;</div><div class=\"line\">          </div><div class=\"line\"></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n<p>完</p>\n<p>参考资料： <a href=\"http://blog.csdn.net/dev_here/article/details/51235324\">http://blog.csdn.net/dev_here/article/details/51235324</a></p>"},{"title":"设计模式学习之观察者模式","date":"2016-12-16T07:57:06.000Z","_content":"\n之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了....看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。\n\n<!-- more -->\n\n观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  \n\n> 观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。\n\n-----摘自《Head First设计模式》  \n\n那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。\n\n观察者模式的最基本的类图如下：  \n\n![image](/blogimg/ObserverUML.bmp)\n\n> Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除\n\n> Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用\n\n> ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者\n\n> ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知\n\n  接着来具体实现一下书上提供的气象站的例子：\n\n  Subject.java\n\n```java\n  public interface Subject{\n      public void registerObserver(Observer o); //注册观察者\n      public void removeObserver(Observer o); //移除观察者\n      public void notifyObservers(); //当有更新事件发生时，通知观察者\n  }\n```\n\n  Observer.java\n\n```java\n  public interface Observer{\n      public void update(float temp, float humidity, float pressure);\n      //所有的观察者都必须实现update()方法，以实现观察者接口\n  }\n```\n\n  WetherData.java\n\n```java\n  public class WetherData implements Subject { //需要实现Subject接口\n\n      private ArrayList observers; //用于存放注册的所有观察者对象\n      private float tempature;\n      private float humidity;\n      private float pressure;\n\n      public WetherData(){\n          observers = new ArrayList();\n      }\n      @Override\n      public void registerObserver(Observer o) {\n          this.observers.add(o);\n      }\n\n      @Override\n      public void removeObserver(Observer o) {\n              int i = observers.indexOf(o);\n              if(i > 0){\n                  observers.remove(i);\n              }\n      }\n\n      @Override\n      public void notifyObservers() {\n        /*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/\n          for(int i = 0; i < observers.size(); i++){\n              Observer observer=(Observer)observers.get(i);\n              observer.update(tempature, humidity, pressure);\n          }\n      }\n\n      public void measurementsChanged(){\n        //接收更新事件通知，然后告诉所有的注册的观察者\n          notifyObservers();\n      }\n\n      public void setMeasurements(float tempature, float humidity, float pressure){\n  \t\t//当有的气象观测数据到来，调用此方法\n          this.tempature = tempature;\n          this.humidity = humidity;\n          this.pressure = pressure;\n       \n          measurementsChanged(); //发出通知\n      }\n  }\n\n```\n\n  CurrentConditionDisplay.java\n\n```java\n  //这是气象数据显示的公告板，它实现了Observer接口，成为了观察者\n  public class CurrentConditionDisplay implements Observer, DisplayElement {\n\n      private float temprature;\n      private float humidity;\n      private Subject weatherData;\n\n      public CurrentConditionDisplay(Subject weatherData){\n\n          this.weatherData = weatherData;\n        //注册成为wetherData的观察者，随时准备接收新数据\n          weatherData.registerObserver(this);\n      }\n      @Override\n      public void update(float temp, float humidity, float pressure) {\n  \t\t\t//取得来自Subject的数据，并暂存起来用于稍后的显示\n              this.temprature = temp;\n              this.humidity = humidity;\n              display();\n      }\n\n      @Override\n      public void display() {\n        //显示数据\n          System.out.println(\"Current conditions:\" + temprature + \"F degree and\" + humidity + \"% humidity\");\n      }\n  }\n\n```\n\n  DisplayElement.java\n\n```java\n  public interface DisplayElement{\n      public void display();\n  }\n```\n\n  ObserverMain.java\n\n```java\n  public class ObserverMain {\n\n     public static void main(String[] args){\n\n         WetherData wetherData = new WetherData();\n\n  \tCurrentConditionDisplay currentConditionDisplay = new currentConditionDisplay(wetherData);\n\n         wetherData.setMeasurements(80,65,30.1f);\n         wetherData.setMeasurements(40,30,10.9f);\n         wetherData.setMeasurements(10,20,28.3f);\n\n     }\n\n  }\n```\n\n  编译，执行看下结果呢。\n\n  ```\n  F:/java ObserverMain\n  Current conditions:80.0F degree and65.0% humidity\n  Current conditions:40.0F degree and30.0% humidity\n  Current conditions:10.0F degree and20.0% humidity\n  ```\n\n  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。\n\n","source":"_posts/Observer-Notes.md","raw":"---\ntitle: 设计模式学习之观察者模式\ndate: 2016-12-16 15:57:06\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 观察者模式\n---\n\n之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了....看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。\n\n<!-- more -->\n\n观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  \n\n> 观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。\n\n-----摘自《Head First设计模式》  \n\n那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。\n\n观察者模式的最基本的类图如下：  \n\n![image](/blogimg/ObserverUML.bmp)\n\n> Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除\n\n> Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用\n\n> ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者\n\n> ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知\n\n  接着来具体实现一下书上提供的气象站的例子：\n\n  Subject.java\n\n```java\n  public interface Subject{\n      public void registerObserver(Observer o); //注册观察者\n      public void removeObserver(Observer o); //移除观察者\n      public void notifyObservers(); //当有更新事件发生时，通知观察者\n  }\n```\n\n  Observer.java\n\n```java\n  public interface Observer{\n      public void update(float temp, float humidity, float pressure);\n      //所有的观察者都必须实现update()方法，以实现观察者接口\n  }\n```\n\n  WetherData.java\n\n```java\n  public class WetherData implements Subject { //需要实现Subject接口\n\n      private ArrayList observers; //用于存放注册的所有观察者对象\n      private float tempature;\n      private float humidity;\n      private float pressure;\n\n      public WetherData(){\n          observers = new ArrayList();\n      }\n      @Override\n      public void registerObserver(Observer o) {\n          this.observers.add(o);\n      }\n\n      @Override\n      public void removeObserver(Observer o) {\n              int i = observers.indexOf(o);\n              if(i > 0){\n                  observers.remove(i);\n              }\n      }\n\n      @Override\n      public void notifyObservers() {\n        /*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/\n          for(int i = 0; i < observers.size(); i++){\n              Observer observer=(Observer)observers.get(i);\n              observer.update(tempature, humidity, pressure);\n          }\n      }\n\n      public void measurementsChanged(){\n        //接收更新事件通知，然后告诉所有的注册的观察者\n          notifyObservers();\n      }\n\n      public void setMeasurements(float tempature, float humidity, float pressure){\n  \t\t//当有的气象观测数据到来，调用此方法\n          this.tempature = tempature;\n          this.humidity = humidity;\n          this.pressure = pressure;\n       \n          measurementsChanged(); //发出通知\n      }\n  }\n\n```\n\n  CurrentConditionDisplay.java\n\n```java\n  //这是气象数据显示的公告板，它实现了Observer接口，成为了观察者\n  public class CurrentConditionDisplay implements Observer, DisplayElement {\n\n      private float temprature;\n      private float humidity;\n      private Subject weatherData;\n\n      public CurrentConditionDisplay(Subject weatherData){\n\n          this.weatherData = weatherData;\n        //注册成为wetherData的观察者，随时准备接收新数据\n          weatherData.registerObserver(this);\n      }\n      @Override\n      public void update(float temp, float humidity, float pressure) {\n  \t\t\t//取得来自Subject的数据，并暂存起来用于稍后的显示\n              this.temprature = temp;\n              this.humidity = humidity;\n              display();\n      }\n\n      @Override\n      public void display() {\n        //显示数据\n          System.out.println(\"Current conditions:\" + temprature + \"F degree and\" + humidity + \"% humidity\");\n      }\n  }\n\n```\n\n  DisplayElement.java\n\n```java\n  public interface DisplayElement{\n      public void display();\n  }\n```\n\n  ObserverMain.java\n\n```java\n  public class ObserverMain {\n\n     public static void main(String[] args){\n\n         WetherData wetherData = new WetherData();\n\n  \tCurrentConditionDisplay currentConditionDisplay = new currentConditionDisplay(wetherData);\n\n         wetherData.setMeasurements(80,65,30.1f);\n         wetherData.setMeasurements(40,30,10.9f);\n         wetherData.setMeasurements(10,20,28.3f);\n\n     }\n\n  }\n```\n\n  编译，执行看下结果呢。\n\n  ```\n  F:/java ObserverMain\n  Current conditions:80.0F degree and65.0% humidity\n  Current conditions:40.0F degree and30.0% humidity\n  Current conditions:10.0F degree and20.0% humidity\n  ```\n\n  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。\n\n","slug":"Observer-Notes","published":1,"updated":"2017-10-10T03:15:08.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpziy002ogov5s0xkr552","content":"<p>之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了….看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。</p>\n<a id=\"more\"></a>\n<p>观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  </p>\n<blockquote>\n<p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。</p>\n</blockquote>\n<p>—–摘自《Head First设计模式》  </p>\n<p>那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。</p>\n<p>观察者模式的最基本的类图如下：  </p>\n<p><img src=\"/blogimg/ObserverUML.bmp\" alt=\"image\"></p>\n<blockquote>\n<p>Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除</p>\n<p>Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用</p>\n<p>ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者</p>\n<p>ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知</p>\n</blockquote>\n<p>  接着来具体实现一下书上提供的气象站的例子：</p>\n<p>  Subject.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//注册观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//移除观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>; <span class=\"comment\">//当有更新事件发生时，通知观察者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Observer.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</div><div class=\"line\">    <span class=\"comment\">//所有的观察者都必须实现update()方法，以实现观察者接口</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  WetherData.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WetherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123; <span class=\"comment\">//需要实现Subject接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers; <span class=\"comment\">//用于存放注册的所有观察者对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> tempature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WetherData</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.add(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i = observers.indexOf(o);</div><div class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                observers.remove(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++)&#123;</div><div class=\"line\">            Observer observer=(Observer)observers.get(i);</div><div class=\"line\">            observer.update(tempature, humidity, pressure);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//接收更新事件通知，然后告诉所有的注册的观察者</span></div><div class=\"line\">        notifyObservers();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> tempature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当有的气象观测数据到来，调用此方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.tempature = tempature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</div><div class=\"line\">     </div><div class=\"line\">        measurementsChanged(); <span class=\"comment\">//发出通知</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  CurrentConditionDisplay.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是气象数据显示的公告板，它实现了Observer接口，成为了观察者</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temprature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionDisplay</span><span class=\"params\">(Subject weatherData)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</div><div class=\"line\">      <span class=\"comment\">//注册成为wetherData的观察者，随时准备接收新数据</span></div><div class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//取得来自Subject的数据，并暂存起来用于稍后的显示</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.temprature = temp;</div><div class=\"line\">            <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">            display();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//显示数据</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions:\"</span> + temprature + <span class=\"string\">\"F degree and\"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  DisplayElement.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  ObserverMain.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">       WetherData wetherData = <span class=\"keyword\">new</span> WetherData();</div><div class=\"line\"></div><div class=\"line\">\tCurrentConditionDisplay currentConditionDisplay = <span class=\"keyword\">new</span> currentConditionDisplay(wetherData);</div><div class=\"line\"></div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">80</span>,<span class=\"number\">65</span>,<span class=\"number\">30.1f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">10.9f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">28.3f</span>);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  编译，执行看下结果呢。</p>\n  <figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:/java ObserverMain</div><div class=\"line\">Current conditions:80.0F degree and65.0% humidity</div><div class=\"line\">Current conditions:40.0F degree and30.0% humidity</div><div class=\"line\">Current conditions:10.0F degree and20.0% humidity</div></pre></td></tr></table></figure>\n<p>  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。</p>\n","excerpt":"<p>之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了….看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。</p>","more":"<p>观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  </p>\n<blockquote>\n<p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。</p>\n</blockquote>\n<p>—–摘自《Head First设计模式》  </p>\n<p>那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。</p>\n<p>观察者模式的最基本的类图如下：  </p>\n<p><img src=\"/blogimg/ObserverUML.bmp\" alt=\"image\"></p>\n<blockquote>\n<p>Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除</p>\n<p>Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用</p>\n<p>ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者</p>\n<p>ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知</p>\n</blockquote>\n<p>  接着来具体实现一下书上提供的气象站的例子：</p>\n<p>  Subject.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//注册观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//移除观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>; <span class=\"comment\">//当有更新事件发生时，通知观察者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Observer.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</div><div class=\"line\">    <span class=\"comment\">//所有的观察者都必须实现update()方法，以实现观察者接口</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  WetherData.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WetherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123; <span class=\"comment\">//需要实现Subject接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers; <span class=\"comment\">//用于存放注册的所有观察者对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> tempature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WetherData</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.add(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i = observers.indexOf(o);</div><div class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                observers.remove(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++)&#123;</div><div class=\"line\">            Observer observer=(Observer)observers.get(i);</div><div class=\"line\">            observer.update(tempature, humidity, pressure);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//接收更新事件通知，然后告诉所有的注册的观察者</span></div><div class=\"line\">        notifyObservers();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> tempature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当有的气象观测数据到来，调用此方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.tempature = tempature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</div><div class=\"line\">     </div><div class=\"line\">        measurementsChanged(); <span class=\"comment\">//发出通知</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  CurrentConditionDisplay.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是气象数据显示的公告板，它实现了Observer接口，成为了观察者</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temprature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionDisplay</span><span class=\"params\">(Subject weatherData)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</div><div class=\"line\">      <span class=\"comment\">//注册成为wetherData的观察者，随时准备接收新数据</span></div><div class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//取得来自Subject的数据，并暂存起来用于稍后的显示</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.temprature = temp;</div><div class=\"line\">            <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">            display();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//显示数据</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions:\"</span> + temprature + <span class=\"string\">\"F degree and\"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  DisplayElement.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  ObserverMain.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">       WetherData wetherData = <span class=\"keyword\">new</span> WetherData();</div><div class=\"line\"></div><div class=\"line\">\tCurrentConditionDisplay currentConditionDisplay = <span class=\"keyword\">new</span> currentConditionDisplay(wetherData);</div><div class=\"line\"></div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">80</span>,<span class=\"number\">65</span>,<span class=\"number\">30.1f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">10.9f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">28.3f</span>);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  编译，执行看下结果呢。</p>\n  <figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:/java ObserverMain</div><div class=\"line\">Current conditions:80.0F degree and65.0% humidity</div><div class=\"line\">Current conditions:40.0F degree and30.0% humidity</div><div class=\"line\">Current conditions:10.0F degree and20.0% humidity</div></pre></td></tr></table></figure>\n<p>  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。</p>"},{"title":"MariaDB创建新用户、新数据库并允许特定用户远程访问","date":"2017-03-11T05:43:00.000Z","_content":"\n### 创建新的可远程访问的数据库用户\n```bash\nMariaDB [(none)]> create user 'user'@'%' identified by 'pass';\n```\n### 创建新的数据库\n```bash\nMariaDB [(none)]> create database newdb;\n\n```\n### 把新创建的数据库授权给新创建的用户\n```bash\nMariaDB [(none)]> grant all privileges on newdb.* to 'user'@'%';\nMariaDB [(none)]> flush privileges;\n```\n","source":"_posts/MariaDB-Create-Remote.md","raw":"---\ntitle: MariaDB创建新用户、新数据库并允许特定用户远程访问\ndate: 2017.3.11 13:43\ncategories: Linux\ntags:\n- MariaDB\n- New DB\n- Remote\n---\n\n### 创建新的可远程访问的数据库用户\n```bash\nMariaDB [(none)]> create user 'user'@'%' identified by 'pass';\n```\n### 创建新的数据库\n```bash\nMariaDB [(none)]> create database newdb;\n\n```\n### 把新创建的数据库授权给新创建的用户\n```bash\nMariaDB [(none)]> grant all privileges on newdb.* to 'user'@'%';\nMariaDB [(none)]> flush privileges;\n```\n","slug":"MariaDB-Create-Remote","published":1,"updated":"2017-10-10T03:15:08.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzj2002qgov5xq6dutgv","content":"<h3 id=\"创建新的可远程访问的数据库用户\"><a href=\"#创建新的可远程访问的数据库用户\" class=\"headerlink\" title=\"创建新的可远程访问的数据库用户\"></a>创建新的可远程访问的数据库用户</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create user <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'pass'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建新的数据库\"><a href=\"#创建新的数据库\" class=\"headerlink\" title=\"创建新的数据库\"></a>创建新的数据库</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create database newdb;</div></pre></td></tr></table></figure>\n<h3 id=\"把新创建的数据库授权给新创建的用户\"><a href=\"#把新创建的数据库授权给新创建的用户\" class=\"headerlink\" title=\"把新创建的数据库授权给新创建的用户\"></a>把新创建的数据库授权给新创建的用户</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; grant all privileges on newdb.* to <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">MariaDB [(none)]&gt; flush privileges;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"创建新的可远程访问的数据库用户\"><a href=\"#创建新的可远程访问的数据库用户\" class=\"headerlink\" title=\"创建新的可远程访问的数据库用户\"></a>创建新的可远程访问的数据库用户</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create user <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'pass'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建新的数据库\"><a href=\"#创建新的数据库\" class=\"headerlink\" title=\"创建新的数据库\"></a>创建新的数据库</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create database newdb;</div></pre></td></tr></table></figure>\n<h3 id=\"把新创建的数据库授权给新创建的用户\"><a href=\"#把新创建的数据库授权给新创建的用户\" class=\"headerlink\" title=\"把新创建的数据库授权给新创建的用户\"></a>把新创建的数据库授权给新创建的用户</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; grant all privileges on newdb.* to <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">MariaDB [(none)]&gt; flush privileges;</div></pre></td></tr></table></figure>\n"},{"title":"搭建OpenWRT编译开发环境","date":"2016-11-28T11:25:18.000Z","_content":"本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","source":"_posts/OpenWRT-BuildEnvironMent.md","raw":"---\ntitle:  搭建OpenWRT编译开发环境 \ndate: 2016-11-28 19:25:18\ncategories: Linux\ntags:\n- Linux\n- openwrt\n- enviroment\n---\n本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","slug":"OpenWRT-BuildEnvironMent","published":1,"updated":"2017-10-10T03:15:08.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzj5002ugov5i5t0ne07","content":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作<a id=\"more\"></a>\nLet’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\" target=\"_blank\" rel=\"external\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>\n","excerpt":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作","more":"Let’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>"},{"title":"OpenWrt软件开发-----软件包HelloWorld的构建","date":"2017-09-09T07:24:56.000Z","_content":"\nOpenWrt提供了方便的机制来让用用户可以l扩充和实现自己所需的功能。这篇博文就说明一下怎么构建一个能够安装在OpenWrt上ipk包的过程。\n\n<!--more-->\n\n1.文件目录\n\n\n\thelloworld/\n\t├── Makefile  #Makefile 必不可少\n\t└── src #源码目录\n\t\t├── Hello.c #程序源码\n\t\t└── Makefile #编译源码的Makefile\n\n2.文件内容\n\nsrc/Hello.c\n\n```c\n#include <stdio.h>\n#include <unistd.h>\nint main(void)\n{\n     printf(\"Hell! Dear OpenWrt!\\n\\n\");\n     return 0;\n}\n```\n\nsrc/Makefile\n\n```makefile\n# build Hello executable when user executes \"make\"\nHello:Hello.o\n\t$(CC) $(LDFLAGS) Hello.o -o Hello\nHello.o:Hello.c\n\t$(CC) $(CFLAGS) -c Hello.c\n#remove object files and executable when user executes \"make clean\"\nclean:\n\trm *.o Hello\n\n```\n\n构建OpenWrt软件包最主要的内容都包括在Makefile中了，首先看一下Makefile的内容。\n\nMakefile\n\n```makefile\n##############################################\n# OpenWrtMakefile for HelloWorld program\n#\n#\n# Most ofthe variables used here are defined in\n# theinclude directives below. We just need to\n# specifya basic description of the package,\n# whereto build our program, where to find\n# thesource files, and where to install the\n# compiled program on the router.\n#\n# Be verycareful of spacing in this file.\n# Indentsshould be tabs, not spaces, and\n# thereshould be no trailing whitespace in\n# linesthat are not commented.\n#\n##############################################\ninclude $(TOPDIR)/rules.mk \n# Nameand release number of this package\nPKG_NAME:=Hello #软件包的名称，编译的时候可以看到，安装，卸载所用到的名称\nPKG_RELEASE:=1 #软件包的版本\n# Thisspecifies the directory where we're going to build the program.\n# Theroot build directory, $(BUILD_DIR), is by default the build_mipsel\n#directory in your OpenWrt SDK directory\nPKG_BUILD_DIR:= $(BUILD_DIR)/$(PKG_NAME)  #源码所在的目录\ninclude $(INCLUDE_DIR)/package.mk\n# Specifypackage information for this program.\n# Thevariables defined here should be self explanatory.\n# If youare running Kamikaze, delete the DESCRIPTION\n#variable below and uncomment the Kamikaze define\n# directivefor the description below\ndefine Package/$(PKG_NAME)  #这里是定义在make menuconfig的时候，该软件包出现的位置\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=HelloOpenwrt-- Start to build software on your router!\nendef\n# Specifywhat needs to be done to prepare for building the package.\n# In ourcase, we need to copy the source files to the build directory.\n# This isNOT the default. The default uses thePKG_SOURCE_URL and the\n#PKG_SOURCE which is not defined here to download the source from the web.\n# Inorder to just build a simple program that we have just written, it is\n# mucheasier to do it this way.\ndefine Build/Prepare\n\tmkdir -p $(PKG_BUILD_DIR)\n\t$(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n# We donot need to define Build/Configure or Build/Compile directives\n# Thedefaults are appropriate for compiling a simple program such as this one\n# Specifywhere and how to install the program. Since we only have one file,\n# thehelloworld executable, install it by copying it to the /bin directory on\n# therouter. The $(1) variable represents the root directory on the router running\n#OpenWrt. The $(INSTALL_DIR) variable contains a command to prepare the install\n#directory if it does not already exist. Likewise $(INSTALL_BIN) contains the\n# commandto copy the binary file from its current location (in our case the build\n#directory) to the install directory.\ndefine Package/$(PKG_NAME)/install  #定义软件包安装行为\n\t$(INSTALL_DIR) $(1)/bin #需要安装的目录，这里必须先指定，不然编译的会报找不到目录的错误\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/Hello $(1)/bin/\nendef\n# Thisline executes the necessary commands to compile our program.\n# Theabove define directives specify all the information needed, but this\n# linecalls BuildPackage which in turn actually uses this information to\n# build apackage.\n\n$(eval $(call BuildPackage,$(PKG_NAME))) #正式开始执行编译\n\n```\n\n代码编写完成后，就可以把软件包放到OpenWrt源码的Package目录或者OpenWrt SDk的Package目录中去，执行make，就可以生成ipk软件包了。","source":"_posts/OpenWrt-HelloWorl.md","raw":"---\ntitle: OpenWrt软件开发-----软件包HelloWorld的构建\ncategories:\n  - Linux\ntags:\n  - OpenWrt\ndate: 2017-09-09 15:24:56\n---\n\nOpenWrt提供了方便的机制来让用用户可以l扩充和实现自己所需的功能。这篇博文就说明一下怎么构建一个能够安装在OpenWrt上ipk包的过程。\n\n<!--more-->\n\n1.文件目录\n\n\n\thelloworld/\n\t├── Makefile  #Makefile 必不可少\n\t└── src #源码目录\n\t\t├── Hello.c #程序源码\n\t\t└── Makefile #编译源码的Makefile\n\n2.文件内容\n\nsrc/Hello.c\n\n```c\n#include <stdio.h>\n#include <unistd.h>\nint main(void)\n{\n     printf(\"Hell! Dear OpenWrt!\\n\\n\");\n     return 0;\n}\n```\n\nsrc/Makefile\n\n```makefile\n# build Hello executable when user executes \"make\"\nHello:Hello.o\n\t$(CC) $(LDFLAGS) Hello.o -o Hello\nHello.o:Hello.c\n\t$(CC) $(CFLAGS) -c Hello.c\n#remove object files and executable when user executes \"make clean\"\nclean:\n\trm *.o Hello\n\n```\n\n构建OpenWrt软件包最主要的内容都包括在Makefile中了，首先看一下Makefile的内容。\n\nMakefile\n\n```makefile\n##############################################\n# OpenWrtMakefile for HelloWorld program\n#\n#\n# Most ofthe variables used here are defined in\n# theinclude directives below. We just need to\n# specifya basic description of the package,\n# whereto build our program, where to find\n# thesource files, and where to install the\n# compiled program on the router.\n#\n# Be verycareful of spacing in this file.\n# Indentsshould be tabs, not spaces, and\n# thereshould be no trailing whitespace in\n# linesthat are not commented.\n#\n##############################################\ninclude $(TOPDIR)/rules.mk \n# Nameand release number of this package\nPKG_NAME:=Hello #软件包的名称，编译的时候可以看到，安装，卸载所用到的名称\nPKG_RELEASE:=1 #软件包的版本\n# Thisspecifies the directory where we're going to build the program.\n# Theroot build directory, $(BUILD_DIR), is by default the build_mipsel\n#directory in your OpenWrt SDK directory\nPKG_BUILD_DIR:= $(BUILD_DIR)/$(PKG_NAME)  #源码所在的目录\ninclude $(INCLUDE_DIR)/package.mk\n# Specifypackage information for this program.\n# Thevariables defined here should be self explanatory.\n# If youare running Kamikaze, delete the DESCRIPTION\n#variable below and uncomment the Kamikaze define\n# directivefor the description below\ndefine Package/$(PKG_NAME)  #这里是定义在make menuconfig的时候，该软件包出现的位置\n\tSECTION:=utils\n\tCATEGORY:=Utilities\n\tTITLE:=HelloOpenwrt-- Start to build software on your router!\nendef\n# Specifywhat needs to be done to prepare for building the package.\n# In ourcase, we need to copy the source files to the build directory.\n# This isNOT the default. The default uses thePKG_SOURCE_URL and the\n#PKG_SOURCE which is not defined here to download the source from the web.\n# Inorder to just build a simple program that we have just written, it is\n# mucheasier to do it this way.\ndefine Build/Prepare\n\tmkdir -p $(PKG_BUILD_DIR)\n\t$(CP) ./src/* $(PKG_BUILD_DIR)/\nendef\n# We donot need to define Build/Configure or Build/Compile directives\n# Thedefaults are appropriate for compiling a simple program such as this one\n# Specifywhere and how to install the program. Since we only have one file,\n# thehelloworld executable, install it by copying it to the /bin directory on\n# therouter. The $(1) variable represents the root directory on the router running\n#OpenWrt. The $(INSTALL_DIR) variable contains a command to prepare the install\n#directory if it does not already exist. Likewise $(INSTALL_BIN) contains the\n# commandto copy the binary file from its current location (in our case the build\n#directory) to the install directory.\ndefine Package/$(PKG_NAME)/install  #定义软件包安装行为\n\t$(INSTALL_DIR) $(1)/bin #需要安装的目录，这里必须先指定，不然编译的会报找不到目录的错误\n\t$(INSTALL_BIN) $(PKG_BUILD_DIR)/Hello $(1)/bin/\nendef\n# Thisline executes the necessary commands to compile our program.\n# Theabove define directives specify all the information needed, but this\n# linecalls BuildPackage which in turn actually uses this information to\n# build apackage.\n\n$(eval $(call BuildPackage,$(PKG_NAME))) #正式开始执行编译\n\n```\n\n代码编写完成后，就可以把软件包放到OpenWrt源码的Package目录或者OpenWrt SDk的Package目录中去，执行make，就可以生成ipk软件包了。","slug":"OpenWrt-HelloWorl","published":1,"updated":"2017-10-10T03:15:08.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzj8002xgov5zjl5zx29","content":"<p>OpenWrt提供了方便的机制来让用用户可以l扩充和实现自己所需的功能。这篇博文就说明一下怎么构建一个能够安装在OpenWrt上ipk包的过程。</p>\n<a id=\"more\"></a>\n<p>1.文件目录</p>\n<pre><code>helloworld/\n├── Makefile  #Makefile 必不可少\n└── src #源码目录\n    ├── Hello.c #程序源码\n    └── Makefile #编译源码的Makefile\n</code></pre><p>2.文件内容</p>\n<p>src/Hello.c</p>\n<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hell! Dear OpenWrt!\\n\\n\"</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>src/Makefile</p>\n<figure class=\"highlight makefile\" data-lang=\" makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># build Hello executable when user executes \"make\"</span></div><div class=\"line\">Hello:Hello.o</div><div class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(LDFLAGS)</span> Hello.o -o Hello</div><div class=\"line\">Hello.o:Hello.c</div><div class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c Hello.c</div><div class=\"line\"><span class=\"comment\">#remove object files and executable when user executes \"make clean\"</span></div><div class=\"line\"><span class=\"section\">clean:</span></div><div class=\"line\">\trm *.o Hello</div></pre></td></tr></table></figure>\n<p>构建OpenWrt软件包最主要的内容都包括在Makefile中了，首先看一下Makefile的内容。</p>\n<p>Makefile</p>\n<figure class=\"highlight makefile\" data-lang=\" makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##############################################</span></div><div class=\"line\"><span class=\"comment\"># OpenWrtMakefile for HelloWorld program</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Most ofthe variables used here are defined in</span></div><div class=\"line\"><span class=\"comment\"># theinclude directives below. We just need to</span></div><div class=\"line\"><span class=\"comment\"># specifya basic description of the package,</span></div><div class=\"line\"><span class=\"comment\"># whereto build our program, where to find</span></div><div class=\"line\"><span class=\"comment\"># thesource files, and where to install the</span></div><div class=\"line\"><span class=\"comment\"># compiled program on the router.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Be verycareful of spacing in this file.</span></div><div class=\"line\"><span class=\"comment\"># Indentsshould be tabs, not spaces, and</span></div><div class=\"line\"><span class=\"comment\"># thereshould be no trailing whitespace in</span></div><div class=\"line\"><span class=\"comment\"># linesthat are not commented.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">##############################################</span></div><div class=\"line\">include $(TOPDIR)/rules.mk </div><div class=\"line\"><span class=\"comment\"># Nameand release number of this package</span></div><div class=\"line\">PKG_NAME:=Hello #软件包的名称，编译的时候可以看到，安装，卸载所用到的名称</div><div class=\"line\">PKG_RELEASE:=1 #软件包的版本</div><div class=\"line\"><span class=\"comment\"># Thisspecifies the directory where we're going to build the program.</span></div><div class=\"line\"><span class=\"comment\"># Theroot build directory, $(BUILD_DIR), is by default the build_mipsel</span></div><div class=\"line\"><span class=\"comment\">#directory in your OpenWrt SDK directory</span></div><div class=\"line\">PKG_BUILD_DIR:= <span class=\"variable\">$(BUILD_DIR)</span>/<span class=\"variable\">$(PKG_NAME)</span>  #源码所在的目录</div><div class=\"line\">include $(INCLUDE_DIR)/package.mk</div><div class=\"line\"><span class=\"comment\"># Specifypackage information for this program.</span></div><div class=\"line\"><span class=\"comment\"># Thevariables defined here should be self explanatory.</span></div><div class=\"line\"><span class=\"comment\"># If youare running Kamikaze, delete the DESCRIPTION</span></div><div class=\"line\"><span class=\"comment\">#variable below and uncomment the Kamikaze define</span></div><div class=\"line\"><span class=\"comment\"># directivefor the description below</span></div><div class=\"line\">define Package/$(PKG_NAME)  <span class=\"comment\">#这里是定义在make menuconfig的时候，该软件包出现的位置</span></div><div class=\"line\">\tSECTION:=utils</div><div class=\"line\">\tCATEGORY:=Utilities</div><div class=\"line\">\tTITLE:=HelloOpenwrt-- Start to build software on your router!</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># Specifywhat needs to be done to prepare for building the package.</span></div><div class=\"line\"><span class=\"comment\"># In ourcase, we need to copy the source files to the build directory.</span></div><div class=\"line\"><span class=\"comment\"># This isNOT the default. The default uses thePKG_SOURCE_URL and the</span></div><div class=\"line\"><span class=\"comment\">#PKG_SOURCE which is not defined here to download the source from the web.</span></div><div class=\"line\"><span class=\"comment\"># Inorder to just build a simple program that we have just written, it is</span></div><div class=\"line\"><span class=\"comment\"># mucheasier to do it this way.</span></div><div class=\"line\">define Build/Prepare</div><div class=\"line\">\tmkdir -p <span class=\"variable\">$(PKG_BUILD_DIR)</span></div><div class=\"line\">\t<span class=\"variable\">$(CP)</span> ./src/* <span class=\"variable\">$(PKG_BUILD_DIR)</span>/</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># We donot need to define Build/Configure or Build/Compile directives</span></div><div class=\"line\"><span class=\"comment\"># Thedefaults are appropriate for compiling a simple program such as this one</span></div><div class=\"line\"><span class=\"comment\"># Specifywhere and how to install the program. Since we only have one file,</span></div><div class=\"line\"><span class=\"comment\"># thehelloworld executable, install it by copying it to the /bin directory on</span></div><div class=\"line\"><span class=\"comment\"># therouter. The $(1) variable represents the root directory on the router running</span></div><div class=\"line\"><span class=\"comment\">#OpenWrt. The $(INSTALL_DIR) variable contains a command to prepare the install</span></div><div class=\"line\"><span class=\"comment\">#directory if it does not already exist. Likewise $(INSTALL_BIN) contains the</span></div><div class=\"line\"><span class=\"comment\"># commandto copy the binary file from its current location (in our case the build</span></div><div class=\"line\"><span class=\"comment\">#directory) to the install directory.</span></div><div class=\"line\">define Package/$(PKG_NAME)/install  <span class=\"comment\">#定义软件包安装行为</span></div><div class=\"line\">\t<span class=\"variable\">$(INSTALL_DIR)</span> <span class=\"variable\">$(1)</span>/bin #需要安装的目录，这里必须先指定，不然编译的会报找不到目录的错误</div><div class=\"line\">\t<span class=\"variable\">$(INSTALL_BIN)</span> <span class=\"variable\">$(PKG_BUILD_DIR)</span>/Hello <span class=\"variable\">$(1)</span>/bin/</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># Thisline executes the necessary commands to compile our program.</span></div><div class=\"line\"><span class=\"comment\"># Theabove define directives specify all the information needed, but this</span></div><div class=\"line\"><span class=\"comment\"># linecalls BuildPackage which in turn actually uses this information to</span></div><div class=\"line\"><span class=\"comment\"># build apackage.</span></div><div class=\"line\"></div><div class=\"line\">$(eval $(call BuildPackage,$(PKG_NAME))) <span class=\"comment\">#正式开始执行编译</span></div></pre></td></tr></table></figure>\n<p>代码编写完成后，就可以把软件包放到OpenWrt源码的Package目录或者OpenWrt SDk的Package目录中去，执行make，就可以生成ipk软件包了。</p>\n","excerpt":"<p>OpenWrt提供了方便的机制来让用用户可以l扩充和实现自己所需的功能。这篇博文就说明一下怎么构建一个能够安装在OpenWrt上ipk包的过程。</p>","more":"<p>1.文件目录</p>\n<pre><code>helloworld/\n├── Makefile  #Makefile 必不可少\n└── src #源码目录\n    ├── Hello.c #程序源码\n    └── Makefile #编译源码的Makefile\n</code></pre><p>2.文件内容</p>\n<p>src/Hello.c</p>\n<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hell! Dear OpenWrt!\\n\\n\"</span>);</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>src/Makefile</p>\n<figure class=\"highlight makefile\"data-lang=\" makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># build Hello executable when user executes \"make\"</span></div><div class=\"line\">Hello:Hello.o</div><div class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(LDFLAGS)</span> Hello.o -o Hello</div><div class=\"line\">Hello.o:Hello.c</div><div class=\"line\">\t<span class=\"variable\">$(CC)</span> <span class=\"variable\">$(CFLAGS)</span> -c Hello.c</div><div class=\"line\"><span class=\"comment\">#remove object files and executable when user executes \"make clean\"</span></div><div class=\"line\"><span class=\"section\">clean:</span></div><div class=\"line\">\trm *.o Hello</div></pre></td></tr></table></figure>\n<p>构建OpenWrt软件包最主要的内容都包括在Makefile中了，首先看一下Makefile的内容。</p>\n<p>Makefile</p>\n<figure class=\"highlight makefile\"data-lang=\" makefile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##############################################</span></div><div class=\"line\"><span class=\"comment\"># OpenWrtMakefile for HelloWorld program</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Most ofthe variables used here are defined in</span></div><div class=\"line\"><span class=\"comment\"># theinclude directives below. We just need to</span></div><div class=\"line\"><span class=\"comment\"># specifya basic description of the package,</span></div><div class=\"line\"><span class=\"comment\"># whereto build our program, where to find</span></div><div class=\"line\"><span class=\"comment\"># thesource files, and where to install the</span></div><div class=\"line\"><span class=\"comment\"># compiled program on the router.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Be verycareful of spacing in this file.</span></div><div class=\"line\"><span class=\"comment\"># Indentsshould be tabs, not spaces, and</span></div><div class=\"line\"><span class=\"comment\"># thereshould be no trailing whitespace in</span></div><div class=\"line\"><span class=\"comment\"># linesthat are not commented.</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\">##############################################</span></div><div class=\"line\">include $(TOPDIR)/rules.mk </div><div class=\"line\"><span class=\"comment\"># Nameand release number of this package</span></div><div class=\"line\">PKG_NAME:=Hello #软件包的名称，编译的时候可以看到，安装，卸载所用到的名称</div><div class=\"line\">PKG_RELEASE:=1 #软件包的版本</div><div class=\"line\"><span class=\"comment\"># Thisspecifies the directory where we're going to build the program.</span></div><div class=\"line\"><span class=\"comment\"># Theroot build directory, $(BUILD_DIR), is by default the build_mipsel</span></div><div class=\"line\"><span class=\"comment\">#directory in your OpenWrt SDK directory</span></div><div class=\"line\">PKG_BUILD_DIR:= <span class=\"variable\">$(BUILD_DIR)</span>/<span class=\"variable\">$(PKG_NAME)</span>  #源码所在的目录</div><div class=\"line\">include $(INCLUDE_DIR)/package.mk</div><div class=\"line\"><span class=\"comment\"># Specifypackage information for this program.</span></div><div class=\"line\"><span class=\"comment\"># Thevariables defined here should be self explanatory.</span></div><div class=\"line\"><span class=\"comment\"># If youare running Kamikaze, delete the DESCRIPTION</span></div><div class=\"line\"><span class=\"comment\">#variable below and uncomment the Kamikaze define</span></div><div class=\"line\"><span class=\"comment\"># directivefor the description below</span></div><div class=\"line\">define Package/$(PKG_NAME)  <span class=\"comment\">#这里是定义在make menuconfig的时候，该软件包出现的位置</span></div><div class=\"line\">\tSECTION:=utils</div><div class=\"line\">\tCATEGORY:=Utilities</div><div class=\"line\">\tTITLE:=HelloOpenwrt-- Start to build software on your router!</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># Specifywhat needs to be done to prepare for building the package.</span></div><div class=\"line\"><span class=\"comment\"># In ourcase, we need to copy the source files to the build directory.</span></div><div class=\"line\"><span class=\"comment\"># This isNOT the default. The default uses thePKG_SOURCE_URL and the</span></div><div class=\"line\"><span class=\"comment\">#PKG_SOURCE which is not defined here to download the source from the web.</span></div><div class=\"line\"><span class=\"comment\"># Inorder to just build a simple program that we have just written, it is</span></div><div class=\"line\"><span class=\"comment\"># mucheasier to do it this way.</span></div><div class=\"line\">define Build/Prepare</div><div class=\"line\">\tmkdir -p <span class=\"variable\">$(PKG_BUILD_DIR)</span></div><div class=\"line\">\t<span class=\"variable\">$(CP)</span> ./src/* <span class=\"variable\">$(PKG_BUILD_DIR)</span>/</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># We donot need to define Build/Configure or Build/Compile directives</span></div><div class=\"line\"><span class=\"comment\"># Thedefaults are appropriate for compiling a simple program such as this one</span></div><div class=\"line\"><span class=\"comment\"># Specifywhere and how to install the program. Since we only have one file,</span></div><div class=\"line\"><span class=\"comment\"># thehelloworld executable, install it by copying it to the /bin directory on</span></div><div class=\"line\"><span class=\"comment\"># therouter. The $(1) variable represents the root directory on the router running</span></div><div class=\"line\"><span class=\"comment\">#OpenWrt. The $(INSTALL_DIR) variable contains a command to prepare the install</span></div><div class=\"line\"><span class=\"comment\">#directory if it does not already exist. Likewise $(INSTALL_BIN) contains the</span></div><div class=\"line\"><span class=\"comment\"># commandto copy the binary file from its current location (in our case the build</span></div><div class=\"line\"><span class=\"comment\">#directory) to the install directory.</span></div><div class=\"line\">define Package/$(PKG_NAME)/install  <span class=\"comment\">#定义软件包安装行为</span></div><div class=\"line\">\t<span class=\"variable\">$(INSTALL_DIR)</span> <span class=\"variable\">$(1)</span>/bin #需要安装的目录，这里必须先指定，不然编译的会报找不到目录的错误</div><div class=\"line\">\t<span class=\"variable\">$(INSTALL_BIN)</span> <span class=\"variable\">$(PKG_BUILD_DIR)</span>/Hello <span class=\"variable\">$(1)</span>/bin/</div><div class=\"line\">endef</div><div class=\"line\"><span class=\"comment\"># Thisline executes the necessary commands to compile our program.</span></div><div class=\"line\"><span class=\"comment\"># Theabove define directives specify all the information needed, but this</span></div><div class=\"line\"><span class=\"comment\"># linecalls BuildPackage which in turn actually uses this information to</span></div><div class=\"line\"><span class=\"comment\"># build apackage.</span></div><div class=\"line\"></div><div class=\"line\">$(eval $(call BuildPackage,$(PKG_NAME))) <span class=\"comment\">#正式开始执行编译</span></div></pre></td></tr></table></figure>\n<p>代码编写完成后，就可以把软件包放到OpenWrt源码的Package目录或者OpenWrt SDk的Package目录中去，执行make，就可以生成ipk软件包了。</p>"},{"title":"pwnable练习之fd","date":"2016-11-27T11:25:18.000Z","_content":"fd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","source":"_posts/Pwnable-fd.md","raw":"---\ntitle:  pwnable练习之fd \ndate: 2016-11-27 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\nfd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","slug":"Pwnable-fd","published":1,"updated":"2017-10-10T03:15:08.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzjf0031gov5ms8ihe84","content":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br><a id=\"more\"></a><br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>\n","excerpt":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br>","more":"<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>"},{"title":"修改OpenSSH源码，记录爆破SSH端口的密码","date":"2017-05-22T06:56:04.000Z","_content":"\n### 起因\n\n自从用上了VPS,爆破ssh端口的小黑们就一刻也没挺过，虽然我仍然使用的密码登录，自认为自己设置的密码还是足够的强健，但是还是想记录一下他们爆破所用的字典。搜索了几种方式，例如可以使用蜜罐，更改openssh源码等方式来记录爆破字典。为了省事，我采用了修改源码的方式来进行记录。\n\n<!-- more -->\n\n### 步骤1  搭建编译环境\n\n我所使用的环境是CentOS 7,需要安装openssl-devel和pam-devel\n\n```bash\nroot@vultr:yum install openssl-devel pam-devel\n```\n\n卸载原有系统自带的openssh-server\n\n```bash\n#查看系统中安装的所有openssh有关的软件包\n[root@vultr]# rpm -qa | grep openssh\nopenssh-clients-6.6.1p1-33.el7_3.x86_64\nopenssh-6.6.1p1-33.el7_3.x86_64\nopenssh-server-6.6.1p1-33.el7_3.x86_64\n#卸载openssh和openssh-server\n[root@vultr openssh-6.6p1]# yum remove openssh-server openssh\n#删除原有的ssh配置文件\n[root@vultr openssh-6.6p1]# rm -f /etc/ssh/*\n```\n\nOK,执行上以上操作后，准备工作就算完成了。\n\n### 步骤2 下载openssh的源码，并解压\n\n```bash\nroot@vultr#wget https://mirrors.evowise.com/pub/OpenBSD/OpenSSH/portable/openssh-6.6p1.tar.gz\nroot@vultr#tar -zxvf openssh-6.6p1.tar.gz\n```\n\n### 步骤3 修改源码，使之能记录登录密码\n\n需要修改的源码文件为  \n> auth2-passwd.c\n> 修改后的源码内容如下：\n```c\n#include \"hostfile.h\"\n#include \"auth.h\"\n#include \"buffer.h\"\n#ifdef GSSAPI\n#include \"ssh-gss.h\"\n#endif\n#include \"monitor_wrap.h\"\n#include \"servconf.h\"\n\n/* import */\nextern ServerOptions options;\n\nstatic int\nuserauth_passwd(Authctxt *authctxt)\n{\n\n\n\n\tchar *password, *newpass;\n\tint authenticated = 0;\n\tint change;\n\tu_int len, newlen;\n\n\tchange = packet_get_char();\n\tpassword = packet_get_string(&len);\n  \n\t//加上这行，就可以将登录用户名，密码添加到日志中\n\tlogit(\"user=%s,pass=%s\",authctxt->user,password);\n\t\n\tif (change) {\n\t\t/* discard new password from packet */\n\t\tnewpass = packet_get_string(&newlen);\n\t\texplicit_bzero(newpass, newlen);\n\t\tfree(newpass);\n\t}\n\tpacket_check_eom();\n\n\tif (change)\n\t\tlogit(\"password change not supported\");\n\telse if (PRIVSEP(auth_password(authctxt, password)) == 1)\n\t\tauthenticated = 1;\n\texplicit_bzero(password, len);\n\tfree(password);\n\treturn authenticated;\n}\n\nAuthmethod method_passwd = {\n\t\"password\",\n\tuserauth_passwd,\n\t&options.password_authentication\n};\n```\n\n\n\n### 步骤3 设置编译参数，并进行编译安装\n\n```bash\n#运行configure,并生成makefile\n[root@vultr openssh-6.6p1]#./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-md5-passwords\n#编译并安装\n[root@vultr openssh-6.6p1]# make && make install\n\n```\n\n### 步骤4 添加服务，设置开机启动\n\n```bash\n#将启动脚本复制到/etc/init.d\n[root@vultr openssh-6.6p1]# cp contrib/redhat/sshd.init /etc/init.d/sshd\n#使ssh开机启动\n[root@vultr openssh-6.6p1]# systemctl enable sshd\nsshd.service is not a native service, redirecting to /sbin/chkconfig.\nExecuting /sbin/chkconfig sshd on\n\n```\n\n之后把服务器重启一下，记录到的日志内容在：\n\n> /var/log/messages\n\n中。把日志处理一下，就可以搜集一波黑客的爆破字典拉。我们来看看效果如何\n\n![image](/blogimg/openssh-code.png)\n\n可以从日志中已经有黑客的爆破密码记录了。嗯，自己送上门来的字典，为什么不收着呢？\n\n2017.5.23  新增\n\n为了提取出日志中的用户名和密码，顺手写了个python脚本来进行处理：\n\n```python\n# -*- coding:utf-8 -*-\nimport re\n\npattern = re.compile(r'user=(.*),pass=(.*) ')\n\nf = open(\"m.data\")\ndic_file = open(\"ssh_dic.txt\",\"w+\")\ntmp= f.readline()\nwhile tmp:\n    match = re.findall(pattern,tmp)\n    if match:\n        user = match[0][0]\n        passwd = match[0][1]\n        #print user,passwd\n        dic_file.writelines(\"%s %s\\r\\n\"%(user,passwd))\n        \n    tmp = f.readline()\n    \nf.close()\ndic_file.close()\n\n```\n\n记录了一天，获得的一小部分成果：\n\n```tex\nroot 1291\nroot tomcat14\nroot mamo\nroot jocelyn\nroot jobs123\nroot joachim\nroot adminka\nroot d1gital\nroot barramundi\nroot dammit\nroot lubis\nroot i81b4u81\nroot jmi@123\nroot jira321\nroot jira123\nroot nokia\nroot damas\nroot liltunechi\nadmin admin\nadmin default\nadmin letmein\nroot hoffmann\nroot technotron\nroot tartaro\nroot jingyun\nroot jillian\nroot jignesh\nroot merengue\nroot lucas\nroot miguel\nroot eurotrade\nroot yudi\nroot merovingian\nroot bazin\nroot spider\nroot royal\nroot jiayuan\nroot jiamima\nroot jhon123\nroot 1597534682\nroot cintakamu\nroot derparol\nroot all4you\nroot sun126\nroot lennartz\nroot jhon!@#\nroot jhengyu\nroot jessica\nroot abcd123$\nroot qq2008\nroot 0003\nroot zzic\nroot surya22\nroot aze123\nroot carota\nroot millcreek\nroot mecate\nroot jenkins\nroot jenk1ns\nroot jenifer\nroot rushed\nroot laliaku\nroot moneytalk\nroot lawless\n.\n.\n.\n```\n\n","source":"_posts/SSH-LOG-USER.md","raw":"---\ntitle: 修改OpenSSH源码，记录爆破SSH端口的密码\ncategories:\n  - Linux\ntags:\n  - ssh\n  - 暴力破解\n  - 记录  \ndate: 2017-05-22 14:56:04\n---\n\n### 起因\n\n自从用上了VPS,爆破ssh端口的小黑们就一刻也没挺过，虽然我仍然使用的密码登录，自认为自己设置的密码还是足够的强健，但是还是想记录一下他们爆破所用的字典。搜索了几种方式，例如可以使用蜜罐，更改openssh源码等方式来记录爆破字典。为了省事，我采用了修改源码的方式来进行记录。\n\n<!-- more -->\n\n### 步骤1  搭建编译环境\n\n我所使用的环境是CentOS 7,需要安装openssl-devel和pam-devel\n\n```bash\nroot@vultr:yum install openssl-devel pam-devel\n```\n\n卸载原有系统自带的openssh-server\n\n```bash\n#查看系统中安装的所有openssh有关的软件包\n[root@vultr]# rpm -qa | grep openssh\nopenssh-clients-6.6.1p1-33.el7_3.x86_64\nopenssh-6.6.1p1-33.el7_3.x86_64\nopenssh-server-6.6.1p1-33.el7_3.x86_64\n#卸载openssh和openssh-server\n[root@vultr openssh-6.6p1]# yum remove openssh-server openssh\n#删除原有的ssh配置文件\n[root@vultr openssh-6.6p1]# rm -f /etc/ssh/*\n```\n\nOK,执行上以上操作后，准备工作就算完成了。\n\n### 步骤2 下载openssh的源码，并解压\n\n```bash\nroot@vultr#wget https://mirrors.evowise.com/pub/OpenBSD/OpenSSH/portable/openssh-6.6p1.tar.gz\nroot@vultr#tar -zxvf openssh-6.6p1.tar.gz\n```\n\n### 步骤3 修改源码，使之能记录登录密码\n\n需要修改的源码文件为  \n> auth2-passwd.c\n> 修改后的源码内容如下：\n```c\n#include \"hostfile.h\"\n#include \"auth.h\"\n#include \"buffer.h\"\n#ifdef GSSAPI\n#include \"ssh-gss.h\"\n#endif\n#include \"monitor_wrap.h\"\n#include \"servconf.h\"\n\n/* import */\nextern ServerOptions options;\n\nstatic int\nuserauth_passwd(Authctxt *authctxt)\n{\n\n\n\n\tchar *password, *newpass;\n\tint authenticated = 0;\n\tint change;\n\tu_int len, newlen;\n\n\tchange = packet_get_char();\n\tpassword = packet_get_string(&len);\n  \n\t//加上这行，就可以将登录用户名，密码添加到日志中\n\tlogit(\"user=%s,pass=%s\",authctxt->user,password);\n\t\n\tif (change) {\n\t\t/* discard new password from packet */\n\t\tnewpass = packet_get_string(&newlen);\n\t\texplicit_bzero(newpass, newlen);\n\t\tfree(newpass);\n\t}\n\tpacket_check_eom();\n\n\tif (change)\n\t\tlogit(\"password change not supported\");\n\telse if (PRIVSEP(auth_password(authctxt, password)) == 1)\n\t\tauthenticated = 1;\n\texplicit_bzero(password, len);\n\tfree(password);\n\treturn authenticated;\n}\n\nAuthmethod method_passwd = {\n\t\"password\",\n\tuserauth_passwd,\n\t&options.password_authentication\n};\n```\n\n\n\n### 步骤3 设置编译参数，并进行编译安装\n\n```bash\n#运行configure,并生成makefile\n[root@vultr openssh-6.6p1]#./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-md5-passwords\n#编译并安装\n[root@vultr openssh-6.6p1]# make && make install\n\n```\n\n### 步骤4 添加服务，设置开机启动\n\n```bash\n#将启动脚本复制到/etc/init.d\n[root@vultr openssh-6.6p1]# cp contrib/redhat/sshd.init /etc/init.d/sshd\n#使ssh开机启动\n[root@vultr openssh-6.6p1]# systemctl enable sshd\nsshd.service is not a native service, redirecting to /sbin/chkconfig.\nExecuting /sbin/chkconfig sshd on\n\n```\n\n之后把服务器重启一下，记录到的日志内容在：\n\n> /var/log/messages\n\n中。把日志处理一下，就可以搜集一波黑客的爆破字典拉。我们来看看效果如何\n\n![image](/blogimg/openssh-code.png)\n\n可以从日志中已经有黑客的爆破密码记录了。嗯，自己送上门来的字典，为什么不收着呢？\n\n2017.5.23  新增\n\n为了提取出日志中的用户名和密码，顺手写了个python脚本来进行处理：\n\n```python\n# -*- coding:utf-8 -*-\nimport re\n\npattern = re.compile(r'user=(.*),pass=(.*) ')\n\nf = open(\"m.data\")\ndic_file = open(\"ssh_dic.txt\",\"w+\")\ntmp= f.readline()\nwhile tmp:\n    match = re.findall(pattern,tmp)\n    if match:\n        user = match[0][0]\n        passwd = match[0][1]\n        #print user,passwd\n        dic_file.writelines(\"%s %s\\r\\n\"%(user,passwd))\n        \n    tmp = f.readline()\n    \nf.close()\ndic_file.close()\n\n```\n\n记录了一天，获得的一小部分成果：\n\n```tex\nroot 1291\nroot tomcat14\nroot mamo\nroot jocelyn\nroot jobs123\nroot joachim\nroot adminka\nroot d1gital\nroot barramundi\nroot dammit\nroot lubis\nroot i81b4u81\nroot jmi@123\nroot jira321\nroot jira123\nroot nokia\nroot damas\nroot liltunechi\nadmin admin\nadmin default\nadmin letmein\nroot hoffmann\nroot technotron\nroot tartaro\nroot jingyun\nroot jillian\nroot jignesh\nroot merengue\nroot lucas\nroot miguel\nroot eurotrade\nroot yudi\nroot merovingian\nroot bazin\nroot spider\nroot royal\nroot jiayuan\nroot jiamima\nroot jhon123\nroot 1597534682\nroot cintakamu\nroot derparol\nroot all4you\nroot sun126\nroot lennartz\nroot jhon!@#\nroot jhengyu\nroot jessica\nroot abcd123$\nroot qq2008\nroot 0003\nroot zzic\nroot surya22\nroot aze123\nroot carota\nroot millcreek\nroot mecate\nroot jenkins\nroot jenk1ns\nroot jenifer\nroot rushed\nroot laliaku\nroot moneytalk\nroot lawless\n.\n.\n.\n```\n\n","slug":"SSH-LOG-USER","published":1,"updated":"2017-10-10T03:15:08.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzji0034gov507iqszfj","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>自从用上了VPS,爆破ssh端口的小黑们就一刻也没挺过，虽然我仍然使用的密码登录，自认为自己设置的密码还是足够的强健，但是还是想记录一下他们爆破所用的字典。搜索了几种方式，例如可以使用蜜罐，更改openssh源码等方式来记录爆破字典。为了省事，我采用了修改源码的方式来进行记录。</p>\n<a id=\"more\"></a>\n<h3 id=\"步骤1-搭建编译环境\"><a href=\"#步骤1-搭建编译环境\" class=\"headerlink\" title=\"步骤1  搭建编译环境\"></a>步骤1  搭建编译环境</h3><p>我所使用的环境是CentOS 7,需要安装openssl-devel和pam-devel</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@vultr:yum install openssl-devel pam-devel</div></pre></td></tr></table></figure>\n<p>卸载原有系统自带的openssh-server</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看系统中安装的所有openssh有关的软件包</span></div><div class=\"line\">[root@vultr]<span class=\"comment\"># rpm -qa | grep openssh</span></div><div class=\"line\">openssh-clients-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\">openssh-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\">openssh-server-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\"><span class=\"comment\">#卸载openssh和openssh-server</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># yum remove openssh-server openssh</span></div><div class=\"line\"><span class=\"comment\">#删除原有的ssh配置文件</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># rm -f /etc/ssh/*</span></div></pre></td></tr></table></figure>\n<p>OK,执行上以上操作后，准备工作就算完成了。</p>\n<h3 id=\"步骤2-下载openssh的源码，并解压\"><a href=\"#步骤2-下载openssh的源码，并解压\" class=\"headerlink\" title=\"步骤2 下载openssh的源码，并解压\"></a>步骤2 下载openssh的源码，并解压</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@vultr<span class=\"comment\">#wget https://mirrors.evowise.com/pub/OpenBSD/OpenSSH/portable/openssh-6.6p1.tar.gz</span></div><div class=\"line\">root@vultr<span class=\"comment\">#tar -zxvf openssh-6.6p1.tar.gz</span></div></pre></td></tr></table></figure>\n<h3 id=\"步骤3-修改源码，使之能记录登录密码\"><a href=\"#步骤3-修改源码，使之能记录登录密码\" class=\"headerlink\" title=\"步骤3 修改源码，使之能记录登录密码\"></a>步骤3 修改源码，使之能记录登录密码</h3><p>需要修改的源码文件为  </p>\n<blockquote>\n<p>auth2-passwd.c<br>修改后的源码内容如下：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hostfile.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"auth.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"buffer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GSSAPI</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ssh-gss.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"monitor_wrap.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"servconf.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* import */</span></div><div class=\"line\"><span class=\"keyword\">extern</span> ServerOptions options;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">userauth_passwd</span><span class=\"params\">(Authctxt *authctxt)</span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *password, *newpass;</div><div class=\"line\">\t<span class=\"keyword\">int</span> authenticated = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> change;</div><div class=\"line\">\tu_int len, newlen;</div><div class=\"line\"></div><div class=\"line\">\tchange = packet_get_char();</div><div class=\"line\">\tpassword = packet_get_string(&amp;len);</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">//加上这行，就可以将登录用户名，密码添加到日志中</span></div><div class=\"line\">\tlogit(<span class=\"string\">\"user=%s,pass=%s\"</span>,authctxt-&gt;user,password);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (change) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* discard new password from packet */</span></div><div class=\"line\">\t\tnewpass = packet_get_string(&amp;newlen);</div><div class=\"line\">\t\texplicit_bzero(newpass, newlen);</div><div class=\"line\">\t\t<span class=\"built_in\">free</span>(newpass);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpacket_check_eom();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (change)</div><div class=\"line\">\t\tlogit(<span class=\"string\">\"password change not supported\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PRIVSEP(auth_password(authctxt, password)) == <span class=\"number\">1</span>)</div><div class=\"line\">\t\tauthenticated = <span class=\"number\">1</span>;</div><div class=\"line\">\texplicit_bzero(password, len);</div><div class=\"line\">\t<span class=\"built_in\">free</span>(password);</div><div class=\"line\">\t<span class=\"keyword\">return</span> authenticated;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Authmethod method_passwd = &#123;</div><div class=\"line\">\t<span class=\"string\">\"password\"</span>,</div><div class=\"line\">\tuserauth_passwd,</div><div class=\"line\">\t&amp;options.password_authentication</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"步骤3-设置编译参数，并进行编译安装\"><a href=\"#步骤3-设置编译参数，并进行编译安装\" class=\"headerlink\" title=\"步骤3 设置编译参数，并进行编译安装\"></a>步骤3 设置编译参数，并进行编译安装</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#运行configure,并生成makefile</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\">#./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-md5-passwords</span></div><div class=\"line\"><span class=\"comment\">#编译并安装</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>\n<h3 id=\"步骤4-添加服务，设置开机启动\"><a href=\"#步骤4-添加服务，设置开机启动\" class=\"headerlink\" title=\"步骤4 添加服务，设置开机启动\"></a>步骤4 添加服务，设置开机启动</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#将启动脚本复制到/etc/init.d</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># cp contrib/redhat/sshd.init /etc/init.d/sshd</span></div><div class=\"line\"><span class=\"comment\">#使ssh开机启动</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># systemctl enable sshd</span></div><div class=\"line\">sshd.service is not a native service, redirecting to /sbin/chkconfig.</div><div class=\"line\">Executing /sbin/chkconfig sshd on</div></pre></td></tr></table></figure>\n<p>之后把服务器重启一下，记录到的日志内容在：</p>\n<blockquote>\n<p>/var/log/messages</p>\n</blockquote>\n<p>中。把日志处理一下，就可以搜集一波黑客的爆破字典拉。我们来看看效果如何</p>\n<p><img src=\"/blogimg/openssh-code.png\" alt=\"image\"></p>\n<p>可以从日志中已经有黑客的爆破密码记录了。嗯，自己送上门来的字典，为什么不收着呢？</p>\n<p>2017.5.23  新增</p>\n<p>为了提取出日志中的用户名和密码，顺手写了个python脚本来进行处理：</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'user=(.*),pass=(.*) '</span>)</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">\"m.data\"</span>)</div><div class=\"line\">dic_file = open(<span class=\"string\">\"ssh_dic.txt\"</span>,<span class=\"string\">\"w+\"</span>)</div><div class=\"line\">tmp= f.readline()</div><div class=\"line\"><span class=\"keyword\">while</span> tmp:</div><div class=\"line\">    match = re.findall(pattern,tmp)</div><div class=\"line\">    <span class=\"keyword\">if</span> match:</div><div class=\"line\">        user = match[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">        passwd = match[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"comment\">#print user,passwd</span></div><div class=\"line\">        dic_file.writelines(<span class=\"string\">\"%s %s\\r\\n\"</span>%(user,passwd))</div><div class=\"line\">        </div><div class=\"line\">    tmp = f.readline()</div><div class=\"line\">    </div><div class=\"line\">f.close()</div><div class=\"line\">dic_file.close()</div></pre></td></tr></table></figure>\n<p>记录了一天，获得的一小部分成果：</p>\n<figure class=\"highlight tex\" data-lang=\" tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">root 1291</div><div class=\"line\">root tomcat14</div><div class=\"line\">root mamo</div><div class=\"line\">root jocelyn</div><div class=\"line\">root jobs123</div><div class=\"line\">root joachim</div><div class=\"line\">root adminka</div><div class=\"line\">root d1gital</div><div class=\"line\">root barramundi</div><div class=\"line\">root dammit</div><div class=\"line\">root lubis</div><div class=\"line\">root i81b4u81</div><div class=\"line\">root jmi@123</div><div class=\"line\">root jira321</div><div class=\"line\">root jira123</div><div class=\"line\">root nokia</div><div class=\"line\">root damas</div><div class=\"line\">root liltunechi</div><div class=\"line\">admin admin</div><div class=\"line\">admin default</div><div class=\"line\">admin letmein</div><div class=\"line\">root hoffmann</div><div class=\"line\">root technotron</div><div class=\"line\">root tartaro</div><div class=\"line\">root jingyun</div><div class=\"line\">root jillian</div><div class=\"line\">root jignesh</div><div class=\"line\">root merengue</div><div class=\"line\">root lucas</div><div class=\"line\">root miguel</div><div class=\"line\">root eurotrade</div><div class=\"line\">root yudi</div><div class=\"line\">root merovingian</div><div class=\"line\">root bazin</div><div class=\"line\">root spider</div><div class=\"line\">root royal</div><div class=\"line\">root jiayuan</div><div class=\"line\">root jiamima</div><div class=\"line\">root jhon123</div><div class=\"line\">root 1597534682</div><div class=\"line\">root cintakamu</div><div class=\"line\">root derparol</div><div class=\"line\">root all4you</div><div class=\"line\">root sun126</div><div class=\"line\">root lennartz</div><div class=\"line\">root jhon!@#</div><div class=\"line\">root jhengyu</div><div class=\"line\">root jessica</div><div class=\"line\">root abcd123<span class=\"formula\">$</span></div><div class=\"line\">root qq2008</div><div class=\"line\">root 0003</div><div class=\"line\">root zzic</div><div class=\"line\">root surya22</div><div class=\"line\">root aze123</div><div class=\"line\">root carota</div><div class=\"line\">root millcreek</div><div class=\"line\">root mecate</div><div class=\"line\">root jenkins</div><div class=\"line\">root jenk1ns</div><div class=\"line\">root jenifer</div><div class=\"line\">root rushed</div><div class=\"line\">root laliaku</div><div class=\"line\">root moneytalk</div><div class=\"line\">root lawless</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div></pre></td></tr></table></figure>\n","excerpt":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>自从用上了VPS,爆破ssh端口的小黑们就一刻也没挺过，虽然我仍然使用的密码登录，自认为自己设置的密码还是足够的强健，但是还是想记录一下他们爆破所用的字典。搜索了几种方式，例如可以使用蜜罐，更改openssh源码等方式来记录爆破字典。为了省事，我采用了修改源码的方式来进行记录。</p>","more":"<h3 id=\"步骤1-搭建编译环境\"><a href=\"#步骤1-搭建编译环境\" class=\"headerlink\" title=\"步骤1  搭建编译环境\"></a>步骤1  搭建编译环境</h3><p>我所使用的环境是CentOS 7,需要安装openssl-devel和pam-devel</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@vultr:yum install openssl-devel pam-devel</div></pre></td></tr></table></figure>\n<p>卸载原有系统自带的openssh-server</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看系统中安装的所有openssh有关的软件包</span></div><div class=\"line\">[root@vultr]<span class=\"comment\"># rpm -qa | grep openssh</span></div><div class=\"line\">openssh-clients-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\">openssh-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\">openssh-server-6.6.1p1-33.el7_3.x86_64</div><div class=\"line\"><span class=\"comment\">#卸载openssh和openssh-server</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># yum remove openssh-server openssh</span></div><div class=\"line\"><span class=\"comment\">#删除原有的ssh配置文件</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># rm -f /etc/ssh/*</span></div></pre></td></tr></table></figure>\n<p>OK,执行上以上操作后，准备工作就算完成了。</p>\n<h3 id=\"步骤2-下载openssh的源码，并解压\"><a href=\"#步骤2-下载openssh的源码，并解压\" class=\"headerlink\" title=\"步骤2 下载openssh的源码，并解压\"></a>步骤2 下载openssh的源码，并解压</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@vultr<span class=\"comment\">#wget https://mirrors.evowise.com/pub/OpenBSD/OpenSSH/portable/openssh-6.6p1.tar.gz</span></div><div class=\"line\">root@vultr<span class=\"comment\">#tar -zxvf openssh-6.6p1.tar.gz</span></div></pre></td></tr></table></figure>\n<h3 id=\"步骤3-修改源码，使之能记录登录密码\"><a href=\"#步骤3-修改源码，使之能记录登录密码\" class=\"headerlink\" title=\"步骤3 修改源码，使之能记录登录密码\"></a>步骤3 修改源码，使之能记录登录密码</h3><p>需要修改的源码文件为  </p>\n<blockquote>\n<p>auth2-passwd.c<br>修改后的源码内容如下：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hostfile.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"auth.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"buffer.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> GSSAPI</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"ssh-gss.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"monitor_wrap.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"servconf.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* import */</span></div><div class=\"line\"><span class=\"keyword\">extern</span> ServerOptions options;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></div><div class=\"line\"><span class=\"title\">userauth_passwd</span><span class=\"params\">(Authctxt *authctxt)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">char</span> *password, *newpass;</div><div class=\"line\">\t<span class=\"keyword\">int</span> authenticated = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> change;</div><div class=\"line\">\tu_int len, newlen;</div><div class=\"line\"></div><div class=\"line\">\tchange = packet_get_char();</div><div class=\"line\">\tpassword = packet_get_string(&amp;len);</div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">//加上这行，就可以将登录用户名，密码添加到日志中</span></div><div class=\"line\">\tlogit(<span class=\"string\">\"user=%s,pass=%s\"</span>,authctxt-&gt;user,password);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (change) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">/* discard new password from packet */</span></div><div class=\"line\">\t\tnewpass = packet_get_string(&amp;newlen);</div><div class=\"line\">\t\texplicit_bzero(newpass, newlen);</div><div class=\"line\">\t\t<span class=\"built_in\">free</span>(newpass);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tpacket_check_eom();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (change)</div><div class=\"line\">\t\tlogit(<span class=\"string\">\"password change not supported\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PRIVSEP(auth_password(authctxt, password)) == <span class=\"number\">1</span>)</div><div class=\"line\">\t\tauthenticated = <span class=\"number\">1</span>;</div><div class=\"line\">\texplicit_bzero(password, len);</div><div class=\"line\">\t<span class=\"built_in\">free</span>(password);</div><div class=\"line\">\t<span class=\"keyword\">return</span> authenticated;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Authmethod method_passwd = &#123;</div><div class=\"line\">\t<span class=\"string\">\"password\"</span>,</div><div class=\"line\">\tuserauth_passwd,</div><div class=\"line\">\t&amp;options.password_authentication</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"步骤3-设置编译参数，并进行编译安装\"><a href=\"#步骤3-设置编译参数，并进行编译安装\" class=\"headerlink\" title=\"步骤3 设置编译参数，并进行编译安装\"></a>步骤3 设置编译参数，并进行编译安装</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#运行configure,并生成makefile</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\">#./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-md5-passwords</span></div><div class=\"line\"><span class=\"comment\">#编译并安装</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure>\n<h3 id=\"步骤4-添加服务，设置开机启动\"><a href=\"#步骤4-添加服务，设置开机启动\" class=\"headerlink\" title=\"步骤4 添加服务，设置开机启动\"></a>步骤4 添加服务，设置开机启动</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#将启动脚本复制到/etc/init.d</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># cp contrib/redhat/sshd.init /etc/init.d/sshd</span></div><div class=\"line\"><span class=\"comment\">#使ssh开机启动</span></div><div class=\"line\">[root@vultr openssh-6.6p1]<span class=\"comment\"># systemctl enable sshd</span></div><div class=\"line\">sshd.service is not a native service, redirecting to /sbin/chkconfig.</div><div class=\"line\">Executing /sbin/chkconfig sshd on</div></pre></td></tr></table></figure>\n<p>之后把服务器重启一下，记录到的日志内容在：</p>\n<blockquote>\n<p>/var/log/messages</p>\n</blockquote>\n<p>中。把日志处理一下，就可以搜集一波黑客的爆破字典拉。我们来看看效果如何</p>\n<p><img src=\"/blogimg/openssh-code.png\" alt=\"image\"></p>\n<p>可以从日志中已经有黑客的爆破密码记录了。嗯，自己送上门来的字典，为什么不收着呢？</p>\n<p>2017.5.23  新增</p>\n<p>为了提取出日志中的用户名和密码，顺手写了个python脚本来进行处理：</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"></div><div class=\"line\">pattern = re.compile(<span class=\"string\">r'user=(.*),pass=(.*) '</span>)</div><div class=\"line\"></div><div class=\"line\">f = open(<span class=\"string\">\"m.data\"</span>)</div><div class=\"line\">dic_file = open(<span class=\"string\">\"ssh_dic.txt\"</span>,<span class=\"string\">\"w+\"</span>)</div><div class=\"line\">tmp= f.readline()</div><div class=\"line\"><span class=\"keyword\">while</span> tmp:</div><div class=\"line\">    match = re.findall(pattern,tmp)</div><div class=\"line\">    <span class=\"keyword\">if</span> match:</div><div class=\"line\">        user = match[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</div><div class=\"line\">        passwd = match[<span class=\"number\">0</span>][<span class=\"number\">1</span>]</div><div class=\"line\">        <span class=\"comment\">#print user,passwd</span></div><div class=\"line\">        dic_file.writelines(<span class=\"string\">\"%s %s\\r\\n\"</span>%(user,passwd))</div><div class=\"line\">        </div><div class=\"line\">    tmp = f.readline()</div><div class=\"line\">    </div><div class=\"line\">f.close()</div><div class=\"line\">dic_file.close()</div></pre></td></tr></table></figure>\n<p>记录了一天，获得的一小部分成果：</p>\n<figure class=\"highlight tex\"data-lang=\" tex\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\">root 1291</div><div class=\"line\">root tomcat14</div><div class=\"line\">root mamo</div><div class=\"line\">root jocelyn</div><div class=\"line\">root jobs123</div><div class=\"line\">root joachim</div><div class=\"line\">root adminka</div><div class=\"line\">root d1gital</div><div class=\"line\">root barramundi</div><div class=\"line\">root dammit</div><div class=\"line\">root lubis</div><div class=\"line\">root i81b4u81</div><div class=\"line\">root jmi@123</div><div class=\"line\">root jira321</div><div class=\"line\">root jira123</div><div class=\"line\">root nokia</div><div class=\"line\">root damas</div><div class=\"line\">root liltunechi</div><div class=\"line\">admin admin</div><div class=\"line\">admin default</div><div class=\"line\">admin letmein</div><div class=\"line\">root hoffmann</div><div class=\"line\">root technotron</div><div class=\"line\">root tartaro</div><div class=\"line\">root jingyun</div><div class=\"line\">root jillian</div><div class=\"line\">root jignesh</div><div class=\"line\">root merengue</div><div class=\"line\">root lucas</div><div class=\"line\">root miguel</div><div class=\"line\">root eurotrade</div><div class=\"line\">root yudi</div><div class=\"line\">root merovingian</div><div class=\"line\">root bazin</div><div class=\"line\">root spider</div><div class=\"line\">root royal</div><div class=\"line\">root jiayuan</div><div class=\"line\">root jiamima</div><div class=\"line\">root jhon123</div><div class=\"line\">root 1597534682</div><div class=\"line\">root cintakamu</div><div class=\"line\">root derparol</div><div class=\"line\">root all4you</div><div class=\"line\">root sun126</div><div class=\"line\">root lennartz</div><div class=\"line\">root jhon!@#</div><div class=\"line\">root jhengyu</div><div class=\"line\">root jessica</div><div class=\"line\">root abcd123<span class=\"formula\">$</div><div class=\"line\">root qq2008</div><div class=\"line\">root 0003</div><div class=\"line\">root zzic</div><div class=\"line\">root surya22</div><div class=\"line\">root aze123</div><div class=\"line\">root carota</div><div class=\"line\">root millcreek</div><div class=\"line\">root mecate</div><div class=\"line\">root jenkins</div><div class=\"line\">root jenk1ns</div><div class=\"line\">root jenifer</div><div class=\"line\">root rushed</div><div class=\"line\">root laliaku</div><div class=\"line\">root moneytalk</div><div class=\"line\">root lawless</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</span></div></pre></td></tr></table></figure>"},{"title":"pwnable练习之collision","date":"2016-11-28T11:25:18.000Z","_content":"col.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","source":"_posts/Pwnable-collision.md","raw":"---\ntitle:  pwnable练习之collision \ndate: 2016-11-28 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\ncol.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","slug":"Pwnable-collision","published":1,"updated":"2017-10-10T03:15:08.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzjk0038gov5wr5d4iu1","content":"<p>col.c代码如下：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br><a id=\"more\"></a><br>重点1：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>\n","excerpt":"<p>col.c代码如下：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br>","more":"<br>重点1：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>"},{"title":"利用iTextSharp向pdf文件中添加图片水印","date":"2017-09-10T03:18:30.000Z","_content":"\n由于某些需要，我需要向pdf文件中插入图片水印，经过往上搜索发现iTextSharp这个文件操作库就可以实现我的需求。其实向pdf文件中插入水印就是重新读取pdf文件，再朝文件中写入新增的图片。\n\n<!--more-->\n\n怎么加载iTextSharp库就不啰嗦了，这里贴一下添加图片水印的代码，以防忘记。\n\n```c#\n\t\t\tString srcPdf = \"I:\\\\文档文件\\\\xxx.pdf\";\n            String dstPdf = \"C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxxx.pdf\";\n            String imagepath = \"C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxx\\\\qrcode.jpg\";\n            iTextSharp.text.Image img = Image.GetInstance(imagepath);\n            PdfReader reader = new PdfReader(srcPdf);\n            PdfStamper stamp = new PdfStamper(reader, new FileStream(dstPdf, FileMode.Create));\n\n            PdfContentByte page;\n            float width = reader.GetPageSize(1).Width;\n            float height = reader.GetPageSize(1).Height;\n            int num = reader.NumberOfPages;\n            int margin = 100;\n            img.ScalePercent(20);\n            \n            for (int i = 1; i <= num; ++i)\n            {\n                page = stamp.GetOverContent(i);\n\n                img.SetAbsolutePosition(width-img.ScaledWidth-10,10);//设置图片插入的位置，左下角为坐标系（0，0）位置\n                page.AddImage(img);\n            }\n\n            stamp.Close();\n            reader.Close();\n```\n\n","source":"_posts/PDF-watermask.md","raw":"---\ntitle: 利用iTextSharp向pdf文件中添加图片水印\ncategories:\n  - Program\ntags:\n  - C# pdf\ndate: 2017-09-10 11:18:30\n---\n\n由于某些需要，我需要向pdf文件中插入图片水印，经过往上搜索发现iTextSharp这个文件操作库就可以实现我的需求。其实向pdf文件中插入水印就是重新读取pdf文件，再朝文件中写入新增的图片。\n\n<!--more-->\n\n怎么加载iTextSharp库就不啰嗦了，这里贴一下添加图片水印的代码，以防忘记。\n\n```c#\n\t\t\tString srcPdf = \"I:\\\\文档文件\\\\xxx.pdf\";\n            String dstPdf = \"C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxxx.pdf\";\n            String imagepath = \"C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxx\\\\qrcode.jpg\";\n            iTextSharp.text.Image img = Image.GetInstance(imagepath);\n            PdfReader reader = new PdfReader(srcPdf);\n            PdfStamper stamp = new PdfStamper(reader, new FileStream(dstPdf, FileMode.Create));\n\n            PdfContentByte page;\n            float width = reader.GetPageSize(1).Width;\n            float height = reader.GetPageSize(1).Height;\n            int num = reader.NumberOfPages;\n            int margin = 100;\n            img.ScalePercent(20);\n            \n            for (int i = 1; i <= num; ++i)\n            {\n                page = stamp.GetOverContent(i);\n\n                img.SetAbsolutePosition(width-img.ScaledWidth-10,10);//设置图片插入的位置，左下角为坐标系（0，0）位置\n                page.AddImage(img);\n            }\n\n            stamp.Close();\n            reader.Close();\n```\n\n","slug":"PDF-watermask","published":1,"updated":"2017-10-10T03:15:08.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzjp003agov5cbkjyk4j","content":"<p>由于某些需要，我需要向pdf文件中插入图片水印，经过往上搜索发现iTextSharp这个文件操作库就可以实现我的需求。其实向pdf文件中插入水印就是重新读取pdf文件，再朝文件中写入新增的图片。</p>\n<a id=\"more\"></a>\n<p>怎么加载iTextSharp库就不啰嗦了，这里贴一下添加图片水印的代码，以防忘记。</p>\n<figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">String srcPdf = &quot;I:\\\\文档文件\\\\xxx.pdf&quot;;</div><div class=\"line\">         String dstPdf = &quot;C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxxx.pdf&quot;;</div><div class=\"line\">         String imagepath = &quot;C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxx\\\\qrcode.jpg&quot;;</div><div class=\"line\">         iTextSharp.text.Image img = Image.GetInstance(imagepath);</div><div class=\"line\">         PdfReader reader = new PdfReader(srcPdf);</div><div class=\"line\">         PdfStamper stamp = new PdfStamper(reader, new FileStream(dstPdf, FileMode.Create));</div><div class=\"line\"></div><div class=\"line\">         PdfContentByte page;</div><div class=\"line\">         float width = reader.GetPageSize(1).Width;</div><div class=\"line\">         float height = reader.GetPageSize(1).Height;</div><div class=\"line\">         int num = reader.NumberOfPages;</div><div class=\"line\">         int margin = 100;</div><div class=\"line\">         img.ScalePercent(20);</div><div class=\"line\">         </div><div class=\"line\">         for (int i = 1; i &lt;= num; ++i)</div><div class=\"line\">         &#123;</div><div class=\"line\">             page = stamp.GetOverContent(i);</div><div class=\"line\"></div><div class=\"line\">             img.SetAbsolutePosition(width-img.ScaledWidth-10,10);//设置图片插入的位置，左下角为坐标系（0，0）位置</div><div class=\"line\">             page.AddImage(img);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         stamp.Close();</div><div class=\"line\">         reader.Close();</div></pre></td></tr></table></figure>\n","excerpt":"<p>由于某些需要，我需要向pdf文件中插入图片水印，经过往上搜索发现iTextSharp这个文件操作库就可以实现我的需求。其实向pdf文件中插入水印就是重新读取pdf文件，再朝文件中写入新增的图片。</p>","more":"<p>怎么加载iTextSharp库就不啰嗦了，这里贴一下添加图片水印的代码，以防忘记。</p>\n<figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">String srcPdf = &quot;I:\\\\文档文件\\\\xxx.pdf&quot;;</div><div class=\"line\">         String dstPdf = &quot;C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxxx.pdf&quot;;</div><div class=\"line\">         String imagepath = &quot;C:\\\\Users\\\\xiaoxing\\\\Desktop\\\\xxxx\\\\qrcode.jpg&quot;;</div><div class=\"line\">         iTextSharp.text.Image img = Image.GetInstance(imagepath);</div><div class=\"line\">         PdfReader reader = new PdfReader(srcPdf);</div><div class=\"line\">         PdfStamper stamp = new PdfStamper(reader, new FileStream(dstPdf, FileMode.Create));</div><div class=\"line\"></div><div class=\"line\">         PdfContentByte page;</div><div class=\"line\">         float width = reader.GetPageSize(1).Width;</div><div class=\"line\">         float height = reader.GetPageSize(1).Height;</div><div class=\"line\">         int num = reader.NumberOfPages;</div><div class=\"line\">         int margin = 100;</div><div class=\"line\">         img.ScalePercent(20);</div><div class=\"line\">         </div><div class=\"line\">         for (int i = 1; i &lt;= num; ++i)</div><div class=\"line\">         &#123;</div><div class=\"line\">             page = stamp.GetOverContent(i);</div><div class=\"line\"></div><div class=\"line\">             img.SetAbsolutePosition(width-img.ScaledWidth-10,10);//设置图片插入的位置，左下角为坐标系（0，0）位置</div><div class=\"line\">             page.AddImage(img);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">         stamp.Close();</div><div class=\"line\">         reader.Close();</div></pre></td></tr></table></figure>"},{"title":"利用Python的PIL截屏","date":"2016-12-04T02:23:02.000Z","_content":"\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","source":"_posts/PIL-Grab.md","raw":"---\ntitle: 利用Python的PIL截屏\ndate: 2016-12-04 10:23:02\ncategories: Program\ntags:\n- python\n- PIL\n---\n\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","slug":"PIL-Grab","published":1,"updated":"2017-10-10T03:15:08.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzjv003egov56fe71qop","content":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n","excerpt":"","more":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n"},{"title":"配置nginx，防止ip被恶意绑定域名","date":"2016-12-14T20:53:41.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"### 0x1 事情起因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","source":"_posts/nginx-diable-domain.md","raw":"---\ntitle: 配置nginx，防止ip被恶意绑定域名\ndate: 2016-12-15 04:53:41\ncategories:\n- Linux\ntags:\n- nginx\n- domain\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n### 0x1 事情起因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","slug":"nginx-diable-domain","published":1,"updated":"2017-10-10T03:15:08.012Z","layout":"post","photos":[],"link":"","_id":"cj8lbpzjz003hgov5q1f7rmnc","content":"<h3 id=\"0x1-事情起因\"><a href=\"#0x1-事情起因\" class=\"headerlink\" title=\"0x1 事情起因\"></a>0x1 事情起因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>\n","excerpt":"<h3 id=\"0x1-事情起因\"><a href=\"#0x1-事情起因\" class=\"headerlink\" title=\"0x1 事情起因\"></a>0x1 事情起因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。<br>","more":"</p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>"},{"title":"Hello World","date":"2016-07-21T14:29:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-07-21 22:29:18\ntags:\n- hello hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2017-10-10T03:15:08.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzk2003kgov5yho9hva0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"HCTF2016 writeup","date":"2016-11-29T12:12:27.000Z","_content":"","source":"_drafts/HCTF2016-Writeup.md","raw":"---\ntitle: HCTF2016 writeup\ndate: 2016-11-29 20:12:27\ncategories: CTF\ntags:\n- HCTF\n- 萌新第一次\n---\n","slug":"HCTF2016-Writeup","published":0,"updated":"2017-10-10T03:15:07.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzk6003ogov5kjpkanoo","content":"","excerpt":"","more":""},{"title":"Python学习笔记之----repr()函数","date":"2017-09-28T11:41:10.000Z","_content":"\n在python中，可以通过str()方法和repr()方法将一个对象转换为字符串。但是这两个方法也有少许的不同，python官方手册上对这两个方法的描述分别如下：\n\n<!--more -->\n\n1. repr()\n\n> repr(object) \n>\n> Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse quotes). It is sometimes useful to be able to access this operation as an ordinary function. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to [`eval()`](#eval), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a [`__repr__()`](../reference/datamodel.html#object.__repr__) method.\n\n2.str()\n\n> class  str (object='') \n>\n>   Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with `repr(object)` is that `str(object)` does not always attempt to return a string that is acceptable to [`eval()`](#eval); its goal is to return a printable string. If no argument is given, returns the empty string, `''`.For more information on strings see [Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange](stdtypes.html#typesseq) which describes sequence functionality (strings are sequences), and also the string-specific methods described in the [String Methods](stdtypes.html#string-methods) section. To output formatted strings use template strings or the `%` operator described in the [String Formatting Operations](stdtypes.html#string-formatting) section. In addition see the [String Services](strings.html#stringservices) section. See also [`unicode()`](#unicode).\n\n简单来说就是str()得到的字符串对象更方便用于人类识别和打印，repr()方法得到的字符串对象更容易被python解释器识别，而且使用repr()方法，这个等式通常是成立的obj == eval(repr(obj))\n\n```python\n\n>>> obj = \"hello python\"\n>>> obj == eval(repr(obj))\nTrue\n#而str()方法则不具备这个功能\n>>> obj == eval(str(obj))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 1\n    hello python\n               ^\nSyntaxError: unexpected EOF while parsing\n```\n\n","source":"_posts/python-note-repr.md","raw":"---\ntitle: Python学习笔记之----repr()函数\ncategories:\n  - Program\ntags:\n  - python note\ndate: 2017-09-28 19:41:10\n---\n\n在python中，可以通过str()方法和repr()方法将一个对象转换为字符串。但是这两个方法也有少许的不同，python官方手册上对这两个方法的描述分别如下：\n\n<!--more -->\n\n1. repr()\n\n> repr(object) \n>\n> Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse quotes). It is sometimes useful to be able to access this operation as an ordinary function. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to [`eval()`](#eval), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a [`__repr__()`](../reference/datamodel.html#object.__repr__) method.\n\n2.str()\n\n> class  str (object='') \n>\n>   Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with `repr(object)` is that `str(object)` does not always attempt to return a string that is acceptable to [`eval()`](#eval); its goal is to return a printable string. If no argument is given, returns the empty string, `''`.For more information on strings see [Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange](stdtypes.html#typesseq) which describes sequence functionality (strings are sequences), and also the string-specific methods described in the [String Methods](stdtypes.html#string-methods) section. To output formatted strings use template strings or the `%` operator described in the [String Formatting Operations](stdtypes.html#string-formatting) section. In addition see the [String Services](strings.html#stringservices) section. See also [`unicode()`](#unicode).\n\n简单来说就是str()得到的字符串对象更方便用于人类识别和打印，repr()方法得到的字符串对象更容易被python解释器识别，而且使用repr()方法，这个等式通常是成立的obj == eval(repr(obj))\n\n```python\n\n>>> obj = \"hello python\"\n>>> obj == eval(repr(obj))\nTrue\n#而str()方法则不具备这个功能\n>>> obj == eval(str(obj))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<string>\", line 1\n    hello python\n               ^\nSyntaxError: unexpected EOF while parsing\n```\n\n","slug":"python-note-repr","published":1,"updated":"2017-10-10T03:15:08.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzkf003qgov5dm1i8cwf","content":"<p>在python中，可以通过str()方法和repr()方法将一个对象转换为字符串。但是这两个方法也有少许的不同，python官方手册上对这两个方法的描述分别如下：</p>\n<a id=\"more\"></a>\n<ol>\n<li>repr()</li>\n</ol>\n<blockquote>\n<p>repr(object) </p>\n<p>Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse quotes). It is sometimes useful to be able to access this operation as an ordinary function. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to <a href=\"#eval\"><code>eval()</code></a>, otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a <a href=\"../reference/datamodel.html#object.__repr__\"><code>__repr__()</code></a> method.</p>\n</blockquote>\n<p>2.str()</p>\n<blockquote>\n<p>class  str (object=’’) </p>\n<p>  Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with <code>repr(object)</code> is that <code>str(object)</code> does not always attempt to return a string that is acceptable to <a href=\"#eval\"><code>eval()</code></a>; its goal is to return a printable string. If no argument is given, returns the empty string, <code>&#39;&#39;</code>.For more information on strings see <a href=\"stdtypes.html#typesseq\">Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange</a> which describes sequence functionality (strings are sequences), and also the string-specific methods described in the <a href=\"stdtypes.html#string-methods\">String Methods</a> section. To output formatted strings use template strings or the <code>%</code> operator described in the <a href=\"stdtypes.html#string-formatting\">String Formatting Operations</a> section. In addition see the <a href=\"strings.html#stringservices\">String Services</a> section. See also <a href=\"#unicode\"><code>unicode()</code></a>.</p>\n</blockquote>\n<p>简单来说就是str()得到的字符串对象更方便用于人类识别和打印，repr()方法得到的字符串对象更容易被python解释器识别，而且使用repr()方法，这个等式通常是成立的obj == eval(repr(obj))</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = <span class=\"string\">\"hello python\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj == eval(repr(obj))</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"comment\">#而str()方法则不具备这个功能</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj == eval(str(obj))</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">  File <span class=\"string\">\"&lt;string&gt;\"</span>, line <span class=\"number\">1</span></div><div class=\"line\">    hello python</div><div class=\"line\">               ^</div><div class=\"line\">SyntaxError: unexpected EOF <span class=\"keyword\">while</span> parsing</div></pre></td></tr></table></figure>\n","excerpt":"<p>在python中，可以通过str()方法和repr()方法将一个对象转换为字符串。但是这两个方法也有少许的不同，python官方手册上对这两个方法的描述分别如下：</p>","more":"<ol>\n<li>repr()</li>\n</ol>\n<blockquote>\n<p>repr(object) </p>\n<p>Return a string containing a printable representation of an object. This is the same value yielded by conversions (reverse quotes). It is sometimes useful to be able to access this operation as an ordinary function. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to <a href=\"#eval\"><code>eval()</code></a>, otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a <a href=\"../reference/datamodel.html#object.__repr__\"><code>__repr__()</code></a> method.</p>\n</blockquote>\n<p>2.str()</p>\n<blockquote>\n<p>class  str (object=’’) </p>\n<p>  Return a string containing a nicely printable representation of an object. For strings, this returns the string itself. The difference with <code>repr(object)</code> is that <code>str(object)</code> does not always attempt to return a string that is acceptable to <a href=\"#eval\"><code>eval()</code></a>; its goal is to return a printable string. If no argument is given, returns the empty string, <code>&#39;&#39;</code>.For more information on strings see <a href=\"stdtypes.html#typesseq\">Sequence Types — str, unicode, list, tuple, bytearray, buffer, xrange</a> which describes sequence functionality (strings are sequences), and also the string-specific methods described in the <a href=\"stdtypes.html#string-methods\">String Methods</a> section. To output formatted strings use template strings or the <code>%</code> operator described in the <a href=\"stdtypes.html#string-formatting\">String Formatting Operations</a> section. In addition see the <a href=\"strings.html#stringservices\">String Services</a> section. See also <a href=\"#unicode\"><code>unicode()</code></a>.</p>\n</blockquote>\n<p>简单来说就是str()得到的字符串对象更方便用于人类识别和打印，repr()方法得到的字符串对象更容易被python解释器识别，而且使用repr()方法，这个等式通常是成立的obj == eval(repr(obj))</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj = <span class=\"string\">\"hello python\"</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj == eval(repr(obj))</div><div class=\"line\"><span class=\"keyword\">True</span></div><div class=\"line\"><span class=\"comment\">#而str()方法则不具备这个功能</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>obj == eval(str(obj))</div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</div><div class=\"line\">  File <span class=\"string\">\"&lt;string&gt;\"</span>, line <span class=\"number\">1</span></div><div class=\"line\">    hello python</div><div class=\"line\">               ^</div><div class=\"line\">SyntaxError: unexpected EOF <span class=\"keyword\">while</span> parsing</div></pre></td></tr></table></figure>"},{"title":"SOCKET编程----Echo Something","date":"2017-09-18T18:19:13.000Z","_content":"\n在网络世界中，socket通信几乎是当前几乎所有上层应用层协议的基础，例如用的较多的http协议，ftp协议，SMTP协议的背后都是socket在担负着通信过程。这篇博文首先用一个简单的TCP socket程序实例来引入Linux环境下的socket编程技术。不管原理懂不懂，先搞个程序跑起来先！\n\n<!--more-->\n\n- 程序目的\n\n  服务端：接收来自客户端的内容，计算客户端发送的消息长度，然后将长度返回给客户端。\n\n  客户端：从标准输入读取输入内容，并发送给服务端，接收来自服务端的响应，将响应内容输出至标准输出。\n\n  服务端代码：\n\n  ```c\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <strings.h>\n  #include <sys/types.h>\n  #include <sys/socket.h>\n  #include <arpa/inet.h>\n  #include <unistd.h>\n\n  #define PORT 5555\n  #define BACKLOG 2\n  void process_conn_server(int s){\n\n  \tssize_t size = 0;\n  \tchar buffer[1024];\n  \t\n  \tfor(;;){\n  \t\t\n  \t\tsize = read(s,buffer,1024);\n  \t\tprintf(\"read %d\\n\",size);\t\t\n  \t\tif(size ==0){\n  \t\t\treturn;\n  \t\t}\n  \tsprintf(buffer,\"%d bytes altother\\n\",size);\n  \twrite(s,buffer,strlen(buffer)+1);\n  \t}\n  }\n  int main(int argc, char *argv[])\n  {\n  \tint ss,sc;\n  \tstruct sockaddr_in server_addr;\n  \tstruct sockaddr_in client_addr;\n  \tint err;\n  \tpid_t pid;\n\n  \tss = socket(AF_INET,SOCK_STREAM,0);\n  \tif(ss < 0){\n  \t\tprintf(\"socket error.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tbzero(&server_addr,sizeof(server_addr));\n  \tserver_addr.sin_family = AF_INET;\n  \tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  \tserver_addr.sin_port = htons(PORT);\n\n  \terr = bind(ss,(struct sockaddr*)&server_addr,sizeof(server_addr));\n  \tif(err < 0){\n  \t\tprintf(\"bind err.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \terr = listen(ss,BACKLOG);\n  \tif(err < 0){\n  \t\tprintf(\"listen err.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tfor(;;){\n\n  \t\tsocklen_t addrlen = sizeof(struct sockaddr);\n  \t\t\n  \t\tsc = accept(ss,(struct sockaddr*)&client_addr,&addrlen);\n  \t\tif(sc < 0){\n  \t\t\tcontinue;\n  \t\t}else{\n  \t\t\tprintf(\"some one conn~\\n\");\n  \t\t}\n\n  \t\tpid = fork();\n  \t\tif(pid < 0 ){\n  \t\t\tclose(ss);\n  \t\t}else{\n  \t\t\tprocess_conn_server(sc);\n  \t\t\tclose(sc);\n  \t\t}\n  \t}\n  }\n\n  ```\n\n  客户端代码：\n\n  ```c\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <strings.h>\n  #include <sys/types.h>\n  #include <sys/socket.h>\n  #include <unistd.h>\n  #include <arpa/inet.h>\n\n  #define PORT 5555 \n  void process_conn_client(int s){\n\n  \tssize_t size = 0;\n  \tchar buffer[1024];\n\n  \tfor(;;){\n  \t\tsize = read(0,buffer,1024);\n  \t\tif(size > 0){\n  \t\t\twrite(s,buffer,size);\n  \t\t\tsize = read(s,buffer,1024);\n  \t\t\twrite(1,buffer,size);\n  \t\t}\n  \t}\n\n  }\n  int main(int argc,char *argv[]){\n\n  \tint s;\n  \tstruct sockaddr_in server_addr;\n  \ts = socket(AF_INET,SOCK_STREAM,0);\n  \tif(s < 0){\n  \t\tprintf(\"socket error\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tbzero(&server_addr,sizeof(server_addr));\n  \tserver_addr.sin_family = AF_INET;\n  \tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  \tserver_addr.sin_port = htons(PORT);\n  \tinet_pton(AF_INET,argv[1],&server_addr.sin_addr);\n  \tconnect(s,(struct sockaddr*)&server_addr,sizeof(struct sockaddr));\n  \tprocess_conn_client(s);\n  \tclose(s);\n  \treturn 0;\n  }\n\n  ```\n\n  ​\n\n运行实例：\n\n```bash\nmodel@PWN-VirtualBox:~/NetworkProgram$ ./server \nsome one conn~\nread 5\n------------------------------------------------------------------\nmodel@PWN-VirtualBox:~/NetworkProgram$ ./client 127.0.0.1\nabcd\n5 bytes altother\n```\n\n这是一个简单的tcp通信的程序示例，在这个程序中，一次只能服务两个客户端，不太具备实用价值。但是这个示例完整的包括了tcp socket通信的各个步骤，可以在此基础上继续丰富，完成更复杂的业务逻辑。在之后的博文中我将继续来解释socket编程的各个知识点。","source":"_posts/TCP-Echo-Demo.md","raw":"---\ntitle: SOCKET编程----Echo Something\ncategories:\n  - Linux\ntags:\n  - tcp program\ndate: 2017-09-19 02:19:13\n---\n\n在网络世界中，socket通信几乎是当前几乎所有上层应用层协议的基础，例如用的较多的http协议，ftp协议，SMTP协议的背后都是socket在担负着通信过程。这篇博文首先用一个简单的TCP socket程序实例来引入Linux环境下的socket编程技术。不管原理懂不懂，先搞个程序跑起来先！\n\n<!--more-->\n\n- 程序目的\n\n  服务端：接收来自客户端的内容，计算客户端发送的消息长度，然后将长度返回给客户端。\n\n  客户端：从标准输入读取输入内容，并发送给服务端，接收来自服务端的响应，将响应内容输出至标准输出。\n\n  服务端代码：\n\n  ```c\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <strings.h>\n  #include <sys/types.h>\n  #include <sys/socket.h>\n  #include <arpa/inet.h>\n  #include <unistd.h>\n\n  #define PORT 5555\n  #define BACKLOG 2\n  void process_conn_server(int s){\n\n  \tssize_t size = 0;\n  \tchar buffer[1024];\n  \t\n  \tfor(;;){\n  \t\t\n  \t\tsize = read(s,buffer,1024);\n  \t\tprintf(\"read %d\\n\",size);\t\t\n  \t\tif(size ==0){\n  \t\t\treturn;\n  \t\t}\n  \tsprintf(buffer,\"%d bytes altother\\n\",size);\n  \twrite(s,buffer,strlen(buffer)+1);\n  \t}\n  }\n  int main(int argc, char *argv[])\n  {\n  \tint ss,sc;\n  \tstruct sockaddr_in server_addr;\n  \tstruct sockaddr_in client_addr;\n  \tint err;\n  \tpid_t pid;\n\n  \tss = socket(AF_INET,SOCK_STREAM,0);\n  \tif(ss < 0){\n  \t\tprintf(\"socket error.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tbzero(&server_addr,sizeof(server_addr));\n  \tserver_addr.sin_family = AF_INET;\n  \tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  \tserver_addr.sin_port = htons(PORT);\n\n  \terr = bind(ss,(struct sockaddr*)&server_addr,sizeof(server_addr));\n  \tif(err < 0){\n  \t\tprintf(\"bind err.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \terr = listen(ss,BACKLOG);\n  \tif(err < 0){\n  \t\tprintf(\"listen err.\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tfor(;;){\n\n  \t\tsocklen_t addrlen = sizeof(struct sockaddr);\n  \t\t\n  \t\tsc = accept(ss,(struct sockaddr*)&client_addr,&addrlen);\n  \t\tif(sc < 0){\n  \t\t\tcontinue;\n  \t\t}else{\n  \t\t\tprintf(\"some one conn~\\n\");\n  \t\t}\n\n  \t\tpid = fork();\n  \t\tif(pid < 0 ){\n  \t\t\tclose(ss);\n  \t\t}else{\n  \t\t\tprocess_conn_server(sc);\n  \t\t\tclose(sc);\n  \t\t}\n  \t}\n  }\n\n  ```\n\n  客户端代码：\n\n  ```c\n  #include <stdio.h>\n  #include <stdlib.h>\n  #include <strings.h>\n  #include <sys/types.h>\n  #include <sys/socket.h>\n  #include <unistd.h>\n  #include <arpa/inet.h>\n\n  #define PORT 5555 \n  void process_conn_client(int s){\n\n  \tssize_t size = 0;\n  \tchar buffer[1024];\n\n  \tfor(;;){\n  \t\tsize = read(0,buffer,1024);\n  \t\tif(size > 0){\n  \t\t\twrite(s,buffer,size);\n  \t\t\tsize = read(s,buffer,1024);\n  \t\t\twrite(1,buffer,size);\n  \t\t}\n  \t}\n\n  }\n  int main(int argc,char *argv[]){\n\n  \tint s;\n  \tstruct sockaddr_in server_addr;\n  \ts = socket(AF_INET,SOCK_STREAM,0);\n  \tif(s < 0){\n  \t\tprintf(\"socket error\\n\");\n  \t\treturn -1;\n  \t}\n\n  \tbzero(&server_addr,sizeof(server_addr));\n  \tserver_addr.sin_family = AF_INET;\n  \tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n  \tserver_addr.sin_port = htons(PORT);\n  \tinet_pton(AF_INET,argv[1],&server_addr.sin_addr);\n  \tconnect(s,(struct sockaddr*)&server_addr,sizeof(struct sockaddr));\n  \tprocess_conn_client(s);\n  \tclose(s);\n  \treturn 0;\n  }\n\n  ```\n\n  ​\n\n运行实例：\n\n```bash\nmodel@PWN-VirtualBox:~/NetworkProgram$ ./server \nsome one conn~\nread 5\n------------------------------------------------------------------\nmodel@PWN-VirtualBox:~/NetworkProgram$ ./client 127.0.0.1\nabcd\n5 bytes altother\n```\n\n这是一个简单的tcp通信的程序示例，在这个程序中，一次只能服务两个客户端，不太具备实用价值。但是这个示例完整的包括了tcp socket通信的各个步骤，可以在此基础上继续丰富，完成更复杂的业务逻辑。在之后的博文中我将继续来解释socket编程的各个知识点。","slug":"TCP-Echo-Demo","published":1,"updated":"2017-10-10T03:15:08.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzkj003tgov5vt4zlcjw","content":"<p>在网络世界中，socket通信几乎是当前几乎所有上层应用层协议的基础，例如用的较多的http协议，ftp协议，SMTP协议的背后都是socket在担负着通信过程。这篇博文首先用一个简单的TCP socket程序实例来引入Linux环境下的socket编程技术。不管原理懂不懂，先搞个程序跑起来先！</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>程序目的</p>\n<p>服务端：接收来自客户端的内容，计算客户端发送的消息长度，然后将长度返回给客户端。</p>\n<p>客户端：从标准输入读取输入内容，并发送给服务端，接收来自服务端的响应，将响应内容输出至标准输出。</p>\n<p>服务端代码：</p>\n<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 5555</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BACKLOG 2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process_conn_server</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">ssize_t</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsize = read(s,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"read %d\\n\"</span>,size);\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(size ==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">sprintf</span>(buffer,<span class=\"string\">\"%d bytes altother\\n\"</span>,size);</div><div class=\"line\">\twrite(s,buffer,<span class=\"built_in\">strlen</span>(buffer)+<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ss,sc;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in server_addr;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in client_addr;</div><div class=\"line\">\t<span class=\"keyword\">int</span> err;</div><div class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\"></div><div class=\"line\">\tss = socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(ss &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbzero(&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\tserver_addr.sin_family = AF_INET;</div><div class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">\tserver_addr.sin_port = htons(PORT);</div><div class=\"line\"></div><div class=\"line\">\terr = bind(ss,(<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\t<span class=\"keyword\">if</span>(err &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind err.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\terr = listen(ss,BACKLOG);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(err &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen err.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsc = accept(ss,(<span class=\"keyword\">struct</span> sockaddr*)&amp;client_addr,&amp;addrlen);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(sc &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"some one conn~\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpid = fork();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">\t\t\tclose(ss);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tprocess_conn_server(sc);</div><div class=\"line\">\t\t\tclose(sc);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码：</p>\n<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 5555 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process_conn_client</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">ssize_t</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\tsize = read(<span class=\"number\">0</span>,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(size &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\twrite(s,buffer,size);</div><div class=\"line\">\t\t\tsize = read(s,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t\twrite(<span class=\"number\">1</span>,buffer,size);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in server_addr;</div><div class=\"line\">\ts = socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(s &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbzero(&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\tserver_addr.sin_family = AF_INET;</div><div class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">\tserver_addr.sin_port = htons(PORT);</div><div class=\"line\">\tinet_pton(AF_INET,argv[<span class=\"number\">1</span>],&amp;server_addr.sin_addr);</div><div class=\"line\">\tconnect(s,(<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr));</div><div class=\"line\">\tprocess_conn_client(s);</div><div class=\"line\">\tclose(s);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<p>运行实例：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model@PWN-VirtualBox:~/NetworkProgram$ ./server </div><div class=\"line\">some one conn~</div><div class=\"line\"><span class=\"built_in\">read</span> 5</div><div class=\"line\">------------------------------------------------------------------</div><div class=\"line\">model@PWN-VirtualBox:~/NetworkProgram$ ./client 127.0.0.1</div><div class=\"line\">abcd</div><div class=\"line\">5 bytes altother</div></pre></td></tr></table></figure>\n<p>这是一个简单的tcp通信的程序示例，在这个程序中，一次只能服务两个客户端，不太具备实用价值。但是这个示例完整的包括了tcp socket通信的各个步骤，可以在此基础上继续丰富，完成更复杂的业务逻辑。在之后的博文中我将继续来解释socket编程的各个知识点。</p>\n","excerpt":"<p>在网络世界中，socket通信几乎是当前几乎所有上层应用层协议的基础，例如用的较多的http协议，ftp协议，SMTP协议的背后都是socket在担负着通信过程。这篇博文首先用一个简单的TCP socket程序实例来引入Linux环境下的socket编程技术。不管原理懂不懂，先搞个程序跑起来先！</p>","more":"<ul>\n<li><p>程序目的</p>\n<p>服务端：接收来自客户端的内容，计算客户端发送的消息长度，然后将长度返回给客户端。</p>\n<p>客户端：从标准输入读取输入内容，并发送给服务端，接收来自服务端的响应，将响应内容输出至标准输出。</p>\n<p>服务端代码：</p>\n<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 5555</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BACKLOG 2</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process_conn_server</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">ssize_t</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>];</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsize = read(s,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"read %d\\n\"</span>,size);\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(size ==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">sprintf</span>(buffer,<span class=\"string\">\"%d bytes altother\\n\"</span>,size);</div><div class=\"line\">\twrite(s,buffer,<span class=\"built_in\">strlen</span>(buffer)+<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> ss,sc;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in server_addr;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in client_addr;</div><div class=\"line\">\t<span class=\"keyword\">int</span> err;</div><div class=\"line\">\t<span class=\"keyword\">pid_t</span> pid;</div><div class=\"line\"></div><div class=\"line\">\tss = socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(ss &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbzero(&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\tserver_addr.sin_family = AF_INET;</div><div class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">\tserver_addr.sin_port = htons(PORT);</div><div class=\"line\"></div><div class=\"line\">\terr = bind(ss,(<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\t<span class=\"keyword\">if</span>(err &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"bind err.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\terr = listen(ss,BACKLOG);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(err &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"listen err.\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">socklen_t</span> addrlen = <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tsc = accept(ss,(<span class=\"keyword\">struct</span> sockaddr*)&amp;client_addr,&amp;addrlen);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(sc &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"some one conn~\\n\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tpid = fork();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(pid &lt; <span class=\"number\">0</span> )&#123;</div><div class=\"line\">\t\t\tclose(ss);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tprocess_conn_server(sc);</div><div class=\"line\">\t\t\tclose(sc);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端代码：</p>\n<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;strings.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PORT 5555 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process_conn_client</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">ssize_t</span> size = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buffer[<span class=\"number\">1024</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span>(;;)&#123;</div><div class=\"line\">\t\tsize = read(<span class=\"number\">0</span>,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(size &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t\twrite(s,buffer,size);</div><div class=\"line\">\t\t\tsize = read(s,buffer,<span class=\"number\">1024</span>);</div><div class=\"line\">\t\t\twrite(<span class=\"number\">1</span>,buffer,size);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span> *argv[])</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">int</span> s;</div><div class=\"line\">\t<span class=\"keyword\">struct</span> sockaddr_in server_addr;</div><div class=\"line\">\ts = socket(AF_INET,SOCK_STREAM,<span class=\"number\">0</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(s &lt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"socket error\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tbzero(&amp;server_addr,<span class=\"keyword\">sizeof</span>(server_addr));</div><div class=\"line\">\tserver_addr.sin_family = AF_INET;</div><div class=\"line\">\tserver_addr.sin_addr.s_addr = htonl(INADDR_ANY);</div><div class=\"line\">\tserver_addr.sin_port = htons(PORT);</div><div class=\"line\">\tinet_pton(AF_INET,argv[<span class=\"number\">1</span>],&amp;server_addr.sin_addr);</div><div class=\"line\">\tconnect(s,(<span class=\"keyword\">struct</span> sockaddr*)&amp;server_addr,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> sockaddr));</div><div class=\"line\">\tprocess_conn_client(s);</div><div class=\"line\">\tclose(s);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<p>运行实例：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">model@PWN-VirtualBox:~/NetworkProgram$ ./server </div><div class=\"line\">some one conn~</div><div class=\"line\"><span class=\"built_in\">read</span> 5</div><div class=\"line\">------------------------------------------------------------------</div><div class=\"line\">model@PWN-VirtualBox:~/NetworkProgram$ ./client 127.0.0.1</div><div class=\"line\">abcd</div><div class=\"line\">5 bytes altother</div></pre></td></tr></table></figure>\n<p>这是一个简单的tcp通信的程序示例，在这个程序中，一次只能服务两个客户端，不太具备实用价值。但是这个示例完整的包括了tcp socket通信的各个步骤，可以在此基础上继续丰富，完成更复杂的业务逻辑。在之后的博文中我将继续来解释socket编程的各个知识点。</p>"},{"title":"与Tornado的第一次接触","date":"2016-12-15T11:59:25.000Z","_content":"Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。\n<!-- more -->\n### 0x1:tornado的安装\n安装Tornado也简直不能再省事儿，一句话就可以搞定：\n```bash\nstar-chen@starchen-vb:~$ pip install tornado\nCollecting tornado\n  Downloading tornado-4.4.2.tar.gz (460kB)\n    100% |████████████████████████████████| 460kB 21kB/s \nCollecting singledispatch (from tornado)\n  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting certifi (from tornado)\n  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)\n    100% |████████████████████████████████| 378kB 37kB/s \nCollecting backports_abc>=0.4 (from tornado)\n  Downloading backports_abc-0.5-py2.py3-none-any.whl\nCollecting six (from singledispatch->tornado)\n  Downloading six-1.10.0-py2.py3-none-any.whl\nBuilding wheels for collected packages: tornado\n  Running setup.py bdist_wheel for tornado ... done\n  Stored in directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c\nSuccessfully built tornado\nInstalling collected packages: six, singledispatch, certifi, backports-abc, tornado\nSuccessfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.\n```\n### 0x2:tornado的helloworld \n话不多讲，直接上代码\n```python\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"hello world\");\n\ndef HelloApp():\n\treturn tornado.web.Application([\n\t\t(r\"/\",MainHandler),\n\t])\n\nif __name__ == \"__main__\":\n\tapp = HelloApp()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.current().start()\n```\n看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。\n### 0x3:代码运行\n```bash\n$python hello.py\n```\n```bash\n$curl localhost:8888\nhello world\n```\n用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。\n","source":"_posts/tornado-hello-world.md","raw":"---\ntitle: 与Tornado的第一次接触\ndate: 2016-12-15 19:59:25\ncategories:\n- Program\ntags:\n- python\n- web\n- tornado\n---\nTornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。\n<!-- more -->\n### 0x1:tornado的安装\n安装Tornado也简直不能再省事儿，一句话就可以搞定：\n```bash\nstar-chen@starchen-vb:~$ pip install tornado\nCollecting tornado\n  Downloading tornado-4.4.2.tar.gz (460kB)\n    100% |████████████████████████████████| 460kB 21kB/s \nCollecting singledispatch (from tornado)\n  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting certifi (from tornado)\n  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)\n    100% |████████████████████████████████| 378kB 37kB/s \nCollecting backports_abc>=0.4 (from tornado)\n  Downloading backports_abc-0.5-py2.py3-none-any.whl\nCollecting six (from singledispatch->tornado)\n  Downloading six-1.10.0-py2.py3-none-any.whl\nBuilding wheels for collected packages: tornado\n  Running setup.py bdist_wheel for tornado ... done\n  Stored in directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c\nSuccessfully built tornado\nInstalling collected packages: six, singledispatch, certifi, backports-abc, tornado\nSuccessfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.\n```\n### 0x2:tornado的helloworld \n话不多讲，直接上代码\n```python\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"hello world\");\n\ndef HelloApp():\n\treturn tornado.web.Application([\n\t\t(r\"/\",MainHandler),\n\t])\n\nif __name__ == \"__main__\":\n\tapp = HelloApp()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.current().start()\n```\n看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。\n### 0x3:代码运行\n```bash\n$python hello.py\n```\n```bash\n$curl localhost:8888\nhello world\n```\n用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。\n","slug":"tornado-hello-world","published":1,"updated":"2017-10-10T03:15:08.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzkm003vgov5esavwrog","content":"<p>Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。<br><a id=\"more\"></a></p>\n<h3 id=\"0x1-tornado的安装\"><a href=\"#0x1-tornado的安装\" class=\"headerlink\" title=\"0x1:tornado的安装\"></a>0x1:tornado的安装</h3><p>安装Tornado也简直不能再省事儿，一句话就可以搞定：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ pip install tornado</div><div class=\"line\">Collecting tornado</div><div class=\"line\">  Downloading tornado-4.4.2.tar.gz (460kB)</div><div class=\"line\">    100% |████████████████████████████████| 460kB 21kB/s </div><div class=\"line\">Collecting singledispatch (from tornado)</div><div class=\"line\">  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl</div><div class=\"line\">Collecting certifi (from tornado)</div><div class=\"line\">  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)</div><div class=\"line\">    100% |████████████████████████████████| 378kB 37kB/s </div><div class=\"line\">Collecting backports_abc&gt;=0.4 (from tornado)</div><div class=\"line\">  Downloading backports_abc-0.5-py2.py3-none-any.whl</div><div class=\"line\">Collecting six (from singledispatch-&gt;tornado)</div><div class=\"line\">  Downloading six-1.10.0-py2.py3-none-any.whl</div><div class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: tornado</div><div class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> tornado ... <span class=\"keyword\">done</span></div><div class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c</div><div class=\"line\">Successfully built tornado</div><div class=\"line\">Installing collected packages: six, singledispatch, certifi, backports-abc, tornado</div><div class=\"line\">Successfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.</div></pre></td></tr></table></figure></p>\n<h3 id=\"0x2-tornado的helloworld\"><a href=\"#0x2-tornado的helloworld\" class=\"headerlink\" title=\"0x2:tornado的helloworld\"></a>0x2:tornado的helloworld</h3><p>话不多讲，直接上代码<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HelloApp</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\">\t\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">\t])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = HelloApp()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure></p>\n<p>看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。</p>\n<h3 id=\"0x3-代码运行\"><a href=\"#0x3-代码运行\" class=\"headerlink\" title=\"0x3:代码运行\"></a>0x3:代码运行</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$python</span> hello.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$curl</span> localhost:8888</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。</p>\n","excerpt":"<p>Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。<br>","more":"</p>\n<h3 id=\"0x1-tornado的安装\"><a href=\"#0x1-tornado的安装\" class=\"headerlink\" title=\"0x1:tornado的安装\"></a>0x1:tornado的安装</h3><p>安装Tornado也简直不能再省事儿，一句话就可以搞定：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ pip install tornado</div><div class=\"line\">Collecting tornado</div><div class=\"line\">  Downloading tornado-4.4.2.tar.gz (460kB)</div><div class=\"line\">    100% |████████████████████████████████| 460kB 21kB/s </div><div class=\"line\">Collecting singledispatch (from tornado)</div><div class=\"line\">  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl</div><div class=\"line\">Collecting certifi (from tornado)</div><div class=\"line\">  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)</div><div class=\"line\">    100% |████████████████████████████████| 378kB 37kB/s </div><div class=\"line\">Collecting backports_abc&gt;=0.4 (from tornado)</div><div class=\"line\">  Downloading backports_abc-0.5-py2.py3-none-any.whl</div><div class=\"line\">Collecting six (from singledispatch-&gt;tornado)</div><div class=\"line\">  Downloading six-1.10.0-py2.py3-none-any.whl</div><div class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: tornado</div><div class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> tornado ... <span class=\"keyword\">done</span></div><div class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c</div><div class=\"line\">Successfully built tornado</div><div class=\"line\">Installing collected packages: six, singledispatch, certifi, backports-abc, tornado</div><div class=\"line\">Successfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.</div></pre></td></tr></table></figure></p>\n<h3 id=\"0x2-tornado的helloworld\"><a href=\"#0x2-tornado的helloworld\" class=\"headerlink\" title=\"0x2:tornado的helloworld\"></a>0x2:tornado的helloworld</h3><p>话不多讲，直接上代码<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HelloApp</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\">\t\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">\t])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = HelloApp()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure></p>\n<p>看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。</p>\n<h3 id=\"0x3-代码运行\"><a href=\"#0x3-代码运行\" class=\"headerlink\" title=\"0x3:代码运行\"></a>0x3:代码运行</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$python</span> hello.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$curl</span> localhost:8888</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。</p>"},{"title":"Tornado框架中的Requesthandler","date":"2016-12-15T12:24:10.000Z","_content":"上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let's go.\n<!-- more -->\n### 0x1:RequestHandler是个什么家伙？\n还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：\n\n> Subclassing RequestHandler\n> Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.\n>\n> Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).\n>\n> Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.\n\n可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍[Tornado RequestHandler类文档](http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler),这之中详细列出了该类的各成员变量及提供的方法。\n\n仔细阅读文档之后，我们就可以了解到:  \n\n1. 每种类型的http请求方法都有一个对应的方法，例如常见的GET-->get(),POST--->post()。\n\n2. render()方法可以加载模版\n\n3. write()方法可以直接向客户端写入任意内容\n\n4. get_argument()方法可以取得用户提交的某个参数的值\n\n5. 用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理\n\n6. ........\n\n   有了以上这些内容，我们已经能够完成想完成的任务了。\n\n### 0x2:Demo的需求\n\n1. 接收用户的文件上传请求\n\n2. 上传文件的后缀名检查，重命名，保存至指定目录\n\n3. 渲染模版，输出用户上传的文件的详细信息\n\n明确了需求，接下来就是编码工作了。\n\n### 0x3:具体编码\n\npython部分代码:\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport os\nclass FileUPHandler(tornado.web.RequestHandler):\n\tdef post(self):\n\t\torigin_descri=self.get_argument(\"describe\")\n\t\torigin_user=self.get_argument(\"user\")\n\t\tfile=self.request.files['photo'][0]\n\t\tfname=file['filename']\n\t\tftype=file['content_type']\n\t\tfbody=file['body']\n\t\tfsize=len(fbody)\n\t\tf=open(\"upload/\"+fname,'w')\n\t\tf.write(fbody)\n\t\tself.render(\"templates/result.html\",size=fsize/(1024),name=fname,user=origin_user,type=ftype)\n\tdef get(self):\n\t\tself.render(\"templates/upform.html\")\ndef main_app():\n\treturn tornado.web.Application([\n\n\t(r\"/\",FileUPHandler),\n\t(r\"/upload\",FileUPHandler),\n]) \nif __name__ == \"__main__\":\n\tapp = main_app()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\nhtml模版部分代码：\n\ntemplate/upform.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<meta charset=\"utf-8\">\n\n<h1>Tornado File Upload Demo</h1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n\n文件用户：<input type=\"text\" name=\"user\"/>\n\n文件描述：<input type=\"text\" name=\"describe\"/>\n\n请选择文件：<input type=\"file\" name=\"photo\"/>\n\n<input type=\"submit\" value=\"走你!\">\n</form>\n\n</html>\n```\n\ntemplate/result.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<h1>The File Information:</h1>\n\n<h3>file name:{{name}}</h3></br>\n<h3>fiel size:{{size}} KB</h3></br>\n<h3>request user:{{user}}</h3></br>\n<h3>file type:{{type}}</h3></br>\n\n</html>\n\n```\n\n### 0x4:实际验证效果\n\n![image](/blogimg/tornado_up_form.png)\n\n![image](/blogimg/tornado_up_success.png)\n\n```bash\nstar-chen@starchen-vb:~/ProDev/tornado$ ls upload/\nico.png\n\n```\n\n最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  \n\n### 0x5:思考\n\n这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。\n\n### 0x6 参考链接\n\nhttp://www.tornadoweb.org/en/stable/guide/structure.html\n\nhttp://demo.pythoner.com/itt2zh/ch2.html\n\nhttps://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\n\nhttps://my.oschina.net/chenlei123/blog/127563","source":"_posts/tornado-requesthandler.md","raw":"---\ntitle: Tornado框架中的Requesthandler\ndate: 2016-12-15 20:24:10\ncategories:\n- Program\ntags:\n- tornado\n- python\n- web\n---\n上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let's go.\n<!-- more -->\n### 0x1:RequestHandler是个什么家伙？\n还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：\n\n> Subclassing RequestHandler\n> Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.\n>\n> Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).\n>\n> Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.\n\n可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍[Tornado RequestHandler类文档](http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler),这之中详细列出了该类的各成员变量及提供的方法。\n\n仔细阅读文档之后，我们就可以了解到:  \n\n1. 每种类型的http请求方法都有一个对应的方法，例如常见的GET-->get(),POST--->post()。\n\n2. render()方法可以加载模版\n\n3. write()方法可以直接向客户端写入任意内容\n\n4. get_argument()方法可以取得用户提交的某个参数的值\n\n5. 用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理\n\n6. ........\n\n   有了以上这些内容，我们已经能够完成想完成的任务了。\n\n### 0x2:Demo的需求\n\n1. 接收用户的文件上传请求\n\n2. 上传文件的后缀名检查，重命名，保存至指定目录\n\n3. 渲染模版，输出用户上传的文件的详细信息\n\n明确了需求，接下来就是编码工作了。\n\n### 0x3:具体编码\n\npython部分代码:\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport os\nclass FileUPHandler(tornado.web.RequestHandler):\n\tdef post(self):\n\t\torigin_descri=self.get_argument(\"describe\")\n\t\torigin_user=self.get_argument(\"user\")\n\t\tfile=self.request.files['photo'][0]\n\t\tfname=file['filename']\n\t\tftype=file['content_type']\n\t\tfbody=file['body']\n\t\tfsize=len(fbody)\n\t\tf=open(\"upload/\"+fname,'w')\n\t\tf.write(fbody)\n\t\tself.render(\"templates/result.html\",size=fsize/(1024),name=fname,user=origin_user,type=ftype)\n\tdef get(self):\n\t\tself.render(\"templates/upform.html\")\ndef main_app():\n\treturn tornado.web.Application([\n\n\t(r\"/\",FileUPHandler),\n\t(r\"/upload\",FileUPHandler),\n]) \nif __name__ == \"__main__\":\n\tapp = main_app()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\nhtml模版部分代码：\n\ntemplate/upform.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<meta charset=\"utf-8\">\n\n<h1>Tornado File Upload Demo</h1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n\n文件用户：<input type=\"text\" name=\"user\"/>\n\n文件描述：<input type=\"text\" name=\"describe\"/>\n\n请选择文件：<input type=\"file\" name=\"photo\"/>\n\n<input type=\"submit\" value=\"走你!\">\n</form>\n\n</html>\n```\n\ntemplate/result.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<h1>The File Information:</h1>\n\n<h3>file name:{{name}}</h3></br>\n<h3>fiel size:{{size}} KB</h3></br>\n<h3>request user:{{user}}</h3></br>\n<h3>file type:{{type}}</h3></br>\n\n</html>\n\n```\n\n### 0x4:实际验证效果\n\n![image](/blogimg/tornado_up_form.png)\n\n![image](/blogimg/tornado_up_success.png)\n\n```bash\nstar-chen@starchen-vb:~/ProDev/tornado$ ls upload/\nico.png\n\n```\n\n最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  \n\n### 0x5:思考\n\n这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。\n\n### 0x6 参考链接\n\nhttp://www.tornadoweb.org/en/stable/guide/structure.html\n\nhttp://demo.pythoner.com/itt2zh/ch2.html\n\nhttps://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\n\nhttps://my.oschina.net/chenlei123/blog/127563","slug":"tornado-requesthandler","published":1,"updated":"2017-10-10T03:15:08.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzkq003ygov58hj2qtko","content":"<p>上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let’s go.<br><a id=\"more\"></a></p>\n<h3 id=\"0x1-RequestHandler是个什么家伙？\"><a href=\"#0x1-RequestHandler是个什么家伙？\" class=\"headerlink\" title=\"0x1:RequestHandler是个什么家伙？\"></a>0x1:RequestHandler是个什么家伙？</h3><p>还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：</p>\n<blockquote>\n<p>Subclassing RequestHandler<br>Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.</p>\n<p>Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).</p>\n<p>Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.</p>\n</blockquote>\n<p>可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍<a href=\"http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler\" target=\"_blank\" rel=\"external\">Tornado RequestHandler类文档</a>,这之中详细列出了该类的各成员变量及提供的方法。</p>\n<p>仔细阅读文档之后，我们就可以了解到:  </p>\n<ol>\n<li><p>每种类型的http请求方法都有一个对应的方法，例如常见的GET–&gt;get(),POST—&gt;post()。</p>\n</li>\n<li><p>render()方法可以加载模版</p>\n</li>\n<li><p>write()方法可以直接向客户端写入任意内容</p>\n</li>\n<li><p>get_argument()方法可以取得用户提交的某个参数的值</p>\n</li>\n<li><p>用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理</p>\n</li>\n<li><p>……..</p>\n<p>有了以上这些内容，我们已经能够完成想完成的任务了。</p>\n</li>\n</ol>\n<h3 id=\"0x2-Demo的需求\"><a href=\"#0x2-Demo的需求\" class=\"headerlink\" title=\"0x2:Demo的需求\"></a>0x2:Demo的需求</h3><ol>\n<li><p>接收用户的文件上传请求</p>\n</li>\n<li><p>上传文件的后缀名检查，重命名，保存至指定目录</p>\n</li>\n<li><p>渲染模版，输出用户上传的文件的详细信息</p>\n</li>\n</ol>\n<p>明确了需求，接下来就是编码工作了。</p>\n<h3 id=\"0x3-具体编码\"><a href=\"#0x3-具体编码\" class=\"headerlink\" title=\"0x3:具体编码\"></a>0x3:具体编码</h3><p>python部分代码:</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUPHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\torigin_descri=self.get_argument(<span class=\"string\">\"describe\"</span>)</div><div class=\"line\">\t\torigin_user=self.get_argument(<span class=\"string\">\"user\"</span>)</div><div class=\"line\">\t\tfile=self.request.files[<span class=\"string\">'photo'</span>][<span class=\"number\">0</span>]</div><div class=\"line\">\t\tfname=file[<span class=\"string\">'filename'</span>]</div><div class=\"line\">\t\tftype=file[<span class=\"string\">'content_type'</span>]</div><div class=\"line\">\t\tfbody=file[<span class=\"string\">'body'</span>]</div><div class=\"line\">\t\tfsize=len(fbody)</div><div class=\"line\">\t\tf=open(<span class=\"string\">\"upload/\"</span>+fname,<span class=\"string\">'w'</span>)</div><div class=\"line\">\t\tf.write(fbody)</div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/result.html\"</span>,size=fsize/(<span class=\"number\">1024</span>),name=fname,user=origin_user,type=ftype)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/upform.html\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\"></div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,FileUPHandler),</div><div class=\"line\">\t(<span class=\"string\">r\"/upload\"</span>,FileUPHandler),</div><div class=\"line\">]) </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = main_app()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>html模版部分代码：</p>\n<p>template/upform.html</p>\n<figure class=\"highlight html\" data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Tornado File Upload Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"describe\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">请选择文件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"走你!\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>template/result.html</p>\n<figure class=\"highlight html\" data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The File Information:<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file name:&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>fiel size:&#123;&#123;size&#125;&#125; KB<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>request user:&#123;&#123;user&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file type:&#123;&#123;type&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"0x4-实际验证效果\"><a href=\"#0x4-实际验证效果\" class=\"headerlink\" title=\"0x4:实际验证效果\"></a>0x4:实际验证效果</h3><p><img src=\"/blogimg/tornado_up_form.png\" alt=\"image\"></p>\n<p><img src=\"/blogimg/tornado_up_success.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~/ProDev/tornado$ ls upload/</div><div class=\"line\">ico.png</div></pre></td></tr></table></figure>\n<p>最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  </p>\n<h3 id=\"0x5-思考\"><a href=\"#0x5-思考\" class=\"headerlink\" title=\"0x5:思考\"></a>0x5:思考</h3><p>这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。</p>\n<h3 id=\"0x6-参考链接\"><a href=\"#0x6-参考链接\" class=\"headerlink\" title=\"0x6 参考链接\"></a>0x6 参考链接</h3><p><a href=\"http://www.tornadoweb.org/en/stable/guide/structure.html\" target=\"_blank\" rel=\"external\">http://www.tornadoweb.org/en/stable/guide/structure.html</a></p>\n<p><a href=\"http://demo.pythoner.com/itt2zh/ch2.html\" target=\"_blank\" rel=\"external\">http://demo.pythoner.com/itt2zh/ch2.html</a></p>\n<p><a href=\"https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\" target=\"_blank\" rel=\"external\">https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/</a></p>\n<p><a href=\"https://my.oschina.net/chenlei123/blog/127563\" target=\"_blank\" rel=\"external\">https://my.oschina.net/chenlei123/blog/127563</a></p>\n","excerpt":"<p>上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let’s go.<br>","more":"</p>\n<h3 id=\"0x1-RequestHandler是个什么家伙？\"><a href=\"#0x1-RequestHandler是个什么家伙？\" class=\"headerlink\" title=\"0x1:RequestHandler是个什么家伙？\"></a>0x1:RequestHandler是个什么家伙？</h3><p>还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：</p>\n<blockquote>\n<p>Subclassing RequestHandler<br>Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.</p>\n<p>Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).</p>\n<p>Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.</p>\n</blockquote>\n<p>可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍<a href=\"http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler\">Tornado RequestHandler类文档</a>,这之中详细列出了该类的各成员变量及提供的方法。</p>\n<p>仔细阅读文档之后，我们就可以了解到:  </p>\n<ol>\n<li><p>每种类型的http请求方法都有一个对应的方法，例如常见的GET–&gt;get(),POST—&gt;post()。</p>\n</li>\n<li><p>render()方法可以加载模版</p>\n</li>\n<li><p>write()方法可以直接向客户端写入任意内容</p>\n</li>\n<li><p>get_argument()方法可以取得用户提交的某个参数的值</p>\n</li>\n<li><p>用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理</p>\n</li>\n<li><p>……..</p>\n<p>有了以上这些内容，我们已经能够完成想完成的任务了。</p>\n</li>\n</ol>\n<h3 id=\"0x2-Demo的需求\"><a href=\"#0x2-Demo的需求\" class=\"headerlink\" title=\"0x2:Demo的需求\"></a>0x2:Demo的需求</h3><ol>\n<li><p>接收用户的文件上传请求</p>\n</li>\n<li><p>上传文件的后缀名检查，重命名，保存至指定目录</p>\n</li>\n<li><p>渲染模版，输出用户上传的文件的详细信息</p>\n</li>\n</ol>\n<p>明确了需求，接下来就是编码工作了。</p>\n<h3 id=\"0x3-具体编码\"><a href=\"#0x3-具体编码\" class=\"headerlink\" title=\"0x3:具体编码\"></a>0x3:具体编码</h3><p>python部分代码:</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUPHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\torigin_descri=self.get_argument(<span class=\"string\">\"describe\"</span>)</div><div class=\"line\">\t\torigin_user=self.get_argument(<span class=\"string\">\"user\"</span>)</div><div class=\"line\">\t\tfile=self.request.files[<span class=\"string\">'photo'</span>][<span class=\"number\">0</span>]</div><div class=\"line\">\t\tfname=file[<span class=\"string\">'filename'</span>]</div><div class=\"line\">\t\tftype=file[<span class=\"string\">'content_type'</span>]</div><div class=\"line\">\t\tfbody=file[<span class=\"string\">'body'</span>]</div><div class=\"line\">\t\tfsize=len(fbody)</div><div class=\"line\">\t\tf=open(<span class=\"string\">\"upload/\"</span>+fname,<span class=\"string\">'w'</span>)</div><div class=\"line\">\t\tf.write(fbody)</div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/result.html\"</span>,size=fsize/(<span class=\"number\">1024</span>),name=fname,user=origin_user,type=ftype)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/upform.html\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\"></div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,FileUPHandler),</div><div class=\"line\">\t(<span class=\"string\">r\"/upload\"</span>,FileUPHandler),</div><div class=\"line\">]) </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = main_app()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>html模版部分代码：</p>\n<p>template/upform.html</p>\n<figure class=\"highlight html\"data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Tornado File Upload Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"describe\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">请选择文件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"走你!\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>template/result.html</p>\n<figure class=\"highlight html\"data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The File Information:<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file name:&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>fiel size:&#123;&#123;size&#125;&#125; KB<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>request user:&#123;&#123;user&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file type:&#123;&#123;type&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"0x4-实际验证效果\"><a href=\"#0x4-实际验证效果\" class=\"headerlink\" title=\"0x4:实际验证效果\"></a>0x4:实际验证效果</h3><p><img src=\"/blogimg/tornado_up_form.png\" alt=\"image\"></p>\n<p><img src=\"/blogimg/tornado_up_success.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~/ProDev/tornado$ ls upload/</div><div class=\"line\">ico.png</div></pre></td></tr></table></figure>\n<p>最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  </p>\n<h3 id=\"0x5-思考\"><a href=\"#0x5-思考\" class=\"headerlink\" title=\"0x5:思考\"></a>0x5:思考</h3><p>这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。</p>\n<h3 id=\"0x6-参考链接\"><a href=\"#0x6-参考链接\" class=\"headerlink\" title=\"0x6 参考链接\"></a>0x6 参考链接</h3><p><a href=\"http://www.tornadoweb.org/en/stable/guide/structure.html\">http://www.tornadoweb.org/en/stable/guide/structure.html</a></p>\n<p><a href=\"http://demo.pythoner.com/itt2zh/ch2.html\">http://demo.pythoner.com/itt2zh/ch2.html</a></p>\n<p><a href=\"https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\">https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/</a></p>\n<p><a href=\"https://my.oschina.net/chenlei123/blog/127563\">https://my.oschina.net/chenlei123/blog/127563</a></p>"},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2017-10-10T03:15:07.980Z","updated":"2017-10-10T03:15:07.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8lbpzkt0040gov5bqee3f3n","content":"","excerpt":"","more":""},{"layout":"ctf","title":"初识OD","date":"2016-07-30T11:24:01.000Z","_content":"\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","source":"_drafts/初识OD.md","raw":"layout: ctf\ntitle: 初识OD\ndate: 2016-07-30 19:24:01\ntags: tools reverse\n---\n\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","slug":"初识OD","published":0,"updated":"2017-10-10T03:15:07.981Z","comments":1,"photos":[],"link":"","_id":"cj8lbpzkw0043gov5lmcfa24d","content":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\" target=\"_blank\" rel=\"external\">官方网站</a></p>\n","excerpt":"","more":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\">官方网站</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj8lbpzc70000gov57794ixxv","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpze6000agov5e8e6i8bo"},{"post_id":"cj8lbpzdv0007gov5be2q97la","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzef000egov5tlkcbcen"},{"post_id":"cj8lbpze20009gov5p452jzyl","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzeh000ggov5is3xjkpa"},{"post_id":"cj8lbpzck0001gov5722kxhjk","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzek000kgov5fqkjnzrc"},{"post_id":"cj8lbpze7000bgov564f6rk71","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzel000lgov5tklyifkn"},{"post_id":"cj8lbpzcr0004gov5esr1rh25","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzen000ngov5sc3ijcov"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzen000ogov5pnrw0nuh"},{"post_id":"cj8lbpzfw001egov5j5dpxggu","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzg8001kgov5ar3zv6wb"},{"post_id":"cj8lbpzg2001ggov5386r8hnq","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzge001ngov5bmkr8zpu"},{"post_id":"cj8lbpzg6001igov5lyk6sxps","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzgm001rgov5zylxe2mm"},{"post_id":"cj8lbpzg9001lgov58cp8ctvn","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzgs001tgov5ykc8xwwr"},{"post_id":"cj8lbpzgf001ogov5zgc6lill","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzh7001wgov5xl5w8142"},{"post_id":"cj8lbpzgn001sgov56btl622o","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzhc001zgov5tcqe752e"},{"post_id":"cj8lbpzgt001ugov5mlcatvkx","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzhi0022gov5h64zb9rd"},{"post_id":"cj8lbpzh8001xgov5hueqtn51","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzhn0026gov54o865gxp"},{"post_id":"cj8lbpzhd0020gov550osah8h","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzhr0029gov51zajaly1"},{"post_id":"cj8lbpzho0027gov5t0gawsqc","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzhy002dgov5qs2kjf1y"},{"post_id":"cj8lbpzhs002agov5gpomcuyk","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzi5002ggov5qliax7gu"},{"post_id":"cj8lbpzhw002cgov5nqaau021","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzi8002igov5zp9en1du"},{"post_id":"cj8lbpzhz002egov58k9nrkzo","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzia002kgov5nzzqr7z6"},{"post_id":"cj8lbpzi6002hgov5zr6s28xq","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzig002ngov5b4t61het"},{"post_id":"cj8lbpzi9002jgov5oknq8lz2","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzj1002pgov51wrkezdb"},{"post_id":"cj8lbpzic002mgov5jmmhfqmj","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzj4002sgov58v04lg2z"},{"post_id":"cj8lbpziy002ogov5s0xkr552","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzj6002vgov52j6enjr2"},{"post_id":"cj8lbpzj2002qgov5xq6dutgv","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzje002zgov5zaupnxdf"},{"post_id":"cj8lbpzj5002ugov5i5t0ne07","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzjh0032gov54yjzr14k"},{"post_id":"cj8lbpzj8002xgov5zjl5zx29","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzjk0037gov5oqaashyy"},{"post_id":"cj8lbpzji0034gov507iqszfj","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzjt003cgov54bjh4osr"},{"post_id":"cj8lbpzjp003agov5cbkjyk4j","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzk1003jgov5h7dh7v2r"},{"post_id":"cj8lbpzjf0031gov5ms8ihe84","category_id":"cj8lbpzjj0036gov5a1aosx2w","_id":"cj8lbpzk5003ngov54r97tpy4"},{"post_id":"cj8lbpzjv003egov56fe71qop","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzke003pgov5lc060f0c"},{"post_id":"cj8lbpzjz003hgov5q1f7rmnc","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzki003sgov553lbsbbc"},{"post_id":"cj8lbpzjk0038gov5wr5d4iu1","category_id":"cj8lbpzjj0036gov5a1aosx2w","_id":"cj8lbpzkl003ugov555ywp14w"},{"post_id":"cj8lbpzk6003ogov5kjpkanoo","category_id":"cj8lbpzjj0036gov5a1aosx2w","_id":"cj8lbpzkp003xgov5jc32sdw8"},{"post_id":"cj8lbpzkf003qgov5dm1i8cwf","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzks003zgov5hd5vnepn"},{"post_id":"cj8lbpzkj003tgov5vt4zlcjw","category_id":"cj8lbpzec000cgov53a6y403l","_id":"cj8lbpzkv0041gov57e17hrv7"},{"post_id":"cj8lbpzkm003vgov5esavwrog","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzky0045gov589fez1ti"},{"post_id":"cj8lbpzkq003ygov58hj2qtko","category_id":"cj8lbpzcq0003gov5hoxzveyx","_id":"cj8lbpzkz0047gov5cevpy9fg"}],"PostTag":[{"post_id":"cj8lbpzc70000gov57794ixxv","tag_id":"cj8lbpzcn0002gov5cel4z7zw","_id":"cj8lbpzeg000fgov5gqf7cn5s"},{"post_id":"cj8lbpzc70000gov57794ixxv","tag_id":"cj8lbpzds0006gov5xg6jix1t","_id":"cj8lbpzeh000hgov5iawhw1cc"},{"post_id":"cj8lbpzck0001gov5722kxhjk","tag_id":"cj8lbpzee000dgov5lasbcr1f","_id":"cj8lbpzep000qgov5fc5t7jv1"},{"post_id":"cj8lbpzck0001gov5722kxhjk","tag_id":"cj8lbpzej000jgov5bh5a470y","_id":"cj8lbpzeq000rgov56nzbqaju"},{"post_id":"cj8lbpzck0001gov5722kxhjk","tag_id":"cj8lbpzem000mgov5pgre215o","_id":"cj8lbpzer000tgov5609mc7im"},{"post_id":"cj8lbpzcr0004gov5esr1rh25","tag_id":"cj8lbpzeo000pgov582e8za8s","_id":"cj8lbpzes000ugov5jzoayl1r"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","tag_id":"cj8lbpzeq000sgov5xppxw03z","_id":"cj8lbpzey0010gov5fynhg30t"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","tag_id":"cj8lbpzes000vgov5g5tuxtm9","_id":"cj8lbpzez0011gov5hw2t3c9e"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","tag_id":"cj8lbpzet000wgov5joglqwz0","_id":"cj8lbpzf00013gov5s2g6iws0"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","tag_id":"cj8lbpzeu000xgov57agdmw5c","_id":"cj8lbpzf00014gov5cuva399k"},{"post_id":"cj8lbpzdj0005gov5luk7i86j","tag_id":"cj8lbpzeu000ygov5cqmbtqk6","_id":"cj8lbpzf30016gov5uybtiuna"},{"post_id":"cj8lbpzdv0007gov5be2q97la","tag_id":"cj8lbpzew000zgov5xiijnp55","_id":"cj8lbpzf80018gov5sudg06ic"},{"post_id":"cj8lbpzdv0007gov5be2q97la","tag_id":"cj8lbpzez0012gov5dxgrcswa","_id":"cj8lbpzfa0019gov5i8dnki9c"},{"post_id":"cj8lbpzdv0007gov5be2q97la","tag_id":"cj8lbpzf20015gov5n3jfz2jc","_id":"cj8lbpzfc001bgov5xfpnecdj"},{"post_id":"cj8lbpze20009gov5p452jzyl","tag_id":"cj8lbpzf50017gov5fj1gewz3","_id":"cj8lbpzfd001cgov5taw1bmdu"},{"post_id":"cj8lbpze7000bgov564f6rk71","tag_id":"cj8lbpzfb001agov5oiae1mjk","_id":"cj8lbpzfe001dgov5h76sgn4y"},{"post_id":"cj8lbpzg2001ggov5386r8hnq","tag_id":"cj8lbpzew000zgov5xiijnp55","_id":"cj8lbpzg8001jgov5wpr3sr39"},{"post_id":"cj8lbpzg6001igov5lyk6sxps","tag_id":"cj8lbpzfb001agov5oiae1mjk","_id":"cj8lbpzgd001mgov5yk5dj1g2"},{"post_id":"cj8lbpzfw001egov5j5dpxggu","tag_id":"cj8lbpzg5001hgov57oe53to5","_id":"cj8lbpzgl001qgov5t8romcrf"},{"post_id":"cj8lbpzg9001lgov58cp8ctvn","tag_id":"cj8lbpzew000zgov5xiijnp55","_id":"cj8lbpzha001ygov5ul5s93ya"},{"post_id":"cj8lbpzg9001lgov58cp8ctvn","tag_id":"cj8lbpzez0012gov5dxgrcswa","_id":"cj8lbpzhg0021gov55qwzep1z"},{"post_id":"cj8lbpzg9001lgov58cp8ctvn","tag_id":"cj8lbpzgj001pgov568ait2ss","_id":"cj8lbpzhn0025gov51t6aqe10"},{"post_id":"cj8lbpzgf001ogov5zgc6lill","tag_id":"cj8lbpzh6001vgov5ju69ynx0","_id":"cj8lbpzhq0028gov5oe73untj"},{"post_id":"cj8lbpzgn001sgov56btl622o","tag_id":"cj8lbpzhl0024gov53f9lobwl","_id":"cj8lbpzj4002tgov5i1fe1qey"},{"post_id":"cj8lbpzgn001sgov56btl622o","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzj7002wgov5rm1m6vsj"},{"post_id":"cj8lbpzgn001sgov56btl622o","tag_id":"cj8lbpzi5002fgov57jwjvxq3","_id":"cj8lbpzje0030gov52b33c5fr"},{"post_id":"cj8lbpzgn001sgov56btl622o","tag_id":"cj8lbpzib002lgov5h9gk1382","_id":"cj8lbpzjh0033gov5j3pekqir"},{"post_id":"cj8lbpzgt001ugov5mlcatvkx","tag_id":"cj8lbpzj3002rgov5shcuns8y","_id":"cj8lbpzjo0039gov58od2xnda"},{"post_id":"cj8lbpzgt001ugov5mlcatvkx","tag_id":"cj8lbpzjd002ygov5ft6gexjn","_id":"cj8lbpzjr003bgov5vueiso0e"},{"post_id":"cj8lbpzh8001xgov5hueqtn51","tag_id":"cj8lbpzem000mgov5pgre215o","_id":"cj8lbpzjy003ggov5uqur18dr"},{"post_id":"cj8lbpzh8001xgov5hueqtn51","tag_id":"cj8lbpzee000dgov5lasbcr1f","_id":"cj8lbpzk0003igov5zuj99r4g"},{"post_id":"cj8lbpzh8001xgov5hueqtn51","tag_id":"cj8lbpzjj0035gov58nn9knuc","_id":"cj8lbpzk4003mgov5o7f0sgfu"},{"post_id":"cj8lbpzhd0020gov550osah8h","tag_id":"cj8lbpzju003dgov50l2teblt","_id":"cj8lbpzky0044gov5567u9eb1"},{"post_id":"cj8lbpzhd0020gov550osah8h","tag_id":"cj8lbpzk3003lgov5gtm974ev","_id":"cj8lbpzkz0046gov5069qo4fy"},{"post_id":"cj8lbpzhd0020gov550osah8h","tag_id":"cj8lbpzkg003rgov5c8278mx3","_id":"cj8lbpzl00049gov5du3kx9kt"},{"post_id":"cj8lbpzhd0020gov550osah8h","tag_id":"cj8lbpzko003wgov5he055tjm","_id":"cj8lbpzl1004agov5jqpfe8qv"},{"post_id":"cj8lbpzhj0023gov5l4755fma","tag_id":"cj8lbpzkv0042gov5tuklvpru","_id":"cj8lbpzl2004cgov5yq9qs96v"},{"post_id":"cj8lbpzhj0023gov5l4755fma","tag_id":"cj8lbpzl00048gov57w9pvchb","_id":"cj8lbpzl2004dgov5026uvgqu"},{"post_id":"cj8lbpzho0027gov5t0gawsqc","tag_id":"cj8lbpzl1004bgov50nsdua5h","_id":"cj8lbpzl7004hgov5x0ut2e1u"},{"post_id":"cj8lbpzho0027gov5t0gawsqc","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzl8004igov5vxe9h1q6"},{"post_id":"cj8lbpzho0027gov5t0gawsqc","tag_id":"cj8lbpzl3004fgov5yexb0c3a","_id":"cj8lbpzl9004kgov5jwrvx2n1"},{"post_id":"cj8lbpzhs002agov5gpomcuyk","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzla004mgov5xmvwr5vj"},{"post_id":"cj8lbpzhs002agov5gpomcuyk","tag_id":"cj8lbpzl9004jgov56avdne7r","_id":"cj8lbpzlb004ngov52djgo466"},{"post_id":"cj8lbpzhw002cgov5nqaau021","tag_id":"cj8lbpzla004lgov56epcnkz3","_id":"cj8lbpzld004qgov5qig0j2qo"},{"post_id":"cj8lbpzhw002cgov5nqaau021","tag_id":"cj8lbpzlb004ogov5o1rbku94","_id":"cj8lbpzld004rgov5aetzgpyn"},{"post_id":"cj8lbpzhz002egov58k9nrkzo","tag_id":"cj8lbpzlc004pgov5ngvy4wxf","_id":"cj8lbpzle004tgov51kqzi2tf"},{"post_id":"cj8lbpzi6002hgov5zr6s28xq","tag_id":"cj8lbpzld004sgov5c9l7gyn2","_id":"cj8lbpzlf004vgov5wd5geqtx"},{"post_id":"cj8lbpzi9002jgov5oknq8lz2","tag_id":"cj8lbpzle004ugov558hm4uy3","_id":"cj8lbpzlh004ygov57qz5xauy"},{"post_id":"cj8lbpzi9002jgov5oknq8lz2","tag_id":"cj8lbpzlg004wgov5fnydnwxm","_id":"cj8lbpzli004zgov5urj5dr5p"},{"post_id":"cj8lbpzic002mgov5jmmhfqmj","tag_id":"cj8lbpzlh004xgov52nm0lo19","_id":"cj8lbpzlj0051gov5a1mc1kmw"},{"post_id":"cj8lbpziy002ogov5s0xkr552","tag_id":"cj8lbpzew000zgov5xiijnp55","_id":"cj8lbpzlk0053gov5m5m5m9wu"},{"post_id":"cj8lbpziy002ogov5s0xkr552","tag_id":"cj8lbpzez0012gov5dxgrcswa","_id":"cj8lbpzll0054gov5rjuv49ij"},{"post_id":"cj8lbpziy002ogov5s0xkr552","tag_id":"cj8lbpzli0050gov5tx0qmt94","_id":"cj8lbpzlm0056gov52tygb0qe"},{"post_id":"cj8lbpzj2002qgov5xq6dutgv","tag_id":"cj8lbpzeu000xgov57agdmw5c","_id":"cj8lbpzlo0058gov5mu34tx47"},{"post_id":"cj8lbpzj2002qgov5xq6dutgv","tag_id":"cj8lbpzlj0052gov56r124aox","_id":"cj8lbpzlp0059gov5pghkzqm4"},{"post_id":"cj8lbpzj2002qgov5xq6dutgv","tag_id":"cj8lbpzll0055gov5vhmxnnmw","_id":"cj8lbpzlq005bgov5m38fujcu"},{"post_id":"cj8lbpzj5002ugov5i5t0ne07","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzlr005dgov5lyzih0cc"},{"post_id":"cj8lbpzj5002ugov5i5t0ne07","tag_id":"cj8lbpzln0057gov5mq2wkqtv","_id":"cj8lbpzls005egov5aaqr9xdf"},{"post_id":"cj8lbpzj5002ugov5i5t0ne07","tag_id":"cj8lbpzlp005agov5yotnvahi","_id":"cj8lbpzlt005ggov5z0w9ltpm"},{"post_id":"cj8lbpzj8002xgov5zjl5zx29","tag_id":"cj8lbpzlq005cgov5r2ylcbdt","_id":"cj8lbpzlt005hgov55jt1yj2x"},{"post_id":"cj8lbpzjf0031gov5ms8ihe84","tag_id":"cj8lbpzls005fgov5splsa2k2","_id":"cj8lbpzlx005lgov5vlx8659f"},{"post_id":"cj8lbpzjf0031gov5ms8ihe84","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzlx005mgov599oiqt0s"},{"post_id":"cj8lbpzjf0031gov5ms8ihe84","tag_id":"cj8lbpzlu005igov5pgpyyrr7","_id":"cj8lbpzly005ogov5xin77xoi"},{"post_id":"cj8lbpzjf0031gov5ms8ihe84","tag_id":"cj8lbpzlv005jgov5gtdmhnee","_id":"cj8lbpzlz005pgov5uvb1o7hq"},{"post_id":"cj8lbpzji0034gov507iqszfj","tag_id":"cj8lbpzlv005kgov5knqj95t6","_id":"cj8lbpzm0005sgov5b5o8nm6y"},{"post_id":"cj8lbpzji0034gov507iqszfj","tag_id":"cj8lbpzlx005ngov5s7j6z5l2","_id":"cj8lbpzm1005tgov519na6438"},{"post_id":"cj8lbpzji0034gov507iqszfj","tag_id":"cj8lbpzlz005qgov5fy59iek1","_id":"cj8lbpzm3005vgov5jdn9xzal"},{"post_id":"cj8lbpzjk0038gov5wr5d4iu1","tag_id":"cj8lbpzls005fgov5splsa2k2","_id":"cj8lbpzm6005ygov50iq17nii"},{"post_id":"cj8lbpzjk0038gov5wr5d4iu1","tag_id":"cj8lbpzhv002bgov5wb2f6gqg","_id":"cj8lbpzm7005zgov5wbdeqghb"},{"post_id":"cj8lbpzjk0038gov5wr5d4iu1","tag_id":"cj8lbpzlu005igov5pgpyyrr7","_id":"cj8lbpzm80061gov53o6xvq5y"},{"post_id":"cj8lbpzjk0038gov5wr5d4iu1","tag_id":"cj8lbpzlv005jgov5gtdmhnee","_id":"cj8lbpzm80062gov5ppeo1i7a"},{"post_id":"cj8lbpzjp003agov5cbkjyk4j","tag_id":"cj8lbpzm5005xgov5sqpvuvji","_id":"cj8lbpzm90064gov50vkbnrq9"},{"post_id":"cj8lbpzjv003egov56fe71qop","tag_id":"cj8lbpzm70060gov5p97c3rve","_id":"cj8lbpzmb0066gov5tqd1ne34"},{"post_id":"cj8lbpzjv003egov56fe71qop","tag_id":"cj8lbpzm90063gov51vg4sn4b","_id":"cj8lbpzmn0067gov555mzmss5"},{"post_id":"cj8lbpzjz003hgov5q1f7rmnc","tag_id":"cj8lbpzlb004ogov5o1rbku94","_id":"cj8lbpzmq006agov5t6re554n"},{"post_id":"cj8lbpzjz003hgov5q1f7rmnc","tag_id":"cj8lbpzmo0068gov52enokmwl","_id":"cj8lbpzmq006bgov5p1w27hkv"},{"post_id":"cj8lbpzk2003kgov5yho9hva0","tag_id":"cj8lbpzmp0069gov52wlpossf","_id":"cj8lbpzms006dgov5oae4vuuh"},{"post_id":"cj8lbpzk6003ogov5kjpkanoo","tag_id":"cj8lbpzmr006cgov5g6tvbr2w","_id":"cj8lbpzmv006ggov5qsvcskry"},{"post_id":"cj8lbpzk6003ogov5kjpkanoo","tag_id":"cj8lbpzms006egov54d4wd13e","_id":"cj8lbpzmw006hgov58d7jtjll"},{"post_id":"cj8lbpzkf003qgov5dm1i8cwf","tag_id":"cj8lbpzmt006fgov5gt36rwiy","_id":"cj8lbpzmx006jgov56amj442g"},{"post_id":"cj8lbpzkj003tgov5vt4zlcjw","tag_id":"cj8lbpzmw006igov5whs1wlm2","_id":"cj8lbpzmz006lgov5ei3u0cxs"},{"post_id":"cj8lbpzkm003vgov5esavwrog","tag_id":"cj8lbpzm70060gov5p97c3rve","_id":"cj8lbpzn4006pgov53jdzibl1"},{"post_id":"cj8lbpzkm003vgov5esavwrog","tag_id":"cj8lbpzn0006mgov5l17ss7e9","_id":"cj8lbpzn4006qgov5nxtqpmag"},{"post_id":"cj8lbpzkm003vgov5esavwrog","tag_id":"cj8lbpzn1006ngov58wprje6a","_id":"cj8lbpzn7006sgov5puaa7xhu"},{"post_id":"cj8lbpzkq003ygov58hj2qtko","tag_id":"cj8lbpzn1006ngov58wprje6a","_id":"cj8lbpznc006vgov5hfdq3a70"},{"post_id":"cj8lbpzkq003ygov58hj2qtko","tag_id":"cj8lbpzm70060gov5p97c3rve","_id":"cj8lbpznc006wgov59kk4vwdt"},{"post_id":"cj8lbpzkq003ygov58hj2qtko","tag_id":"cj8lbpzn0006mgov5l17ss7e9","_id":"cj8lbpznd006xgov5be74g66j"},{"post_id":"cj8lbpzkw0043gov5lmcfa24d","tag_id":"cj8lbpznb006ugov5ucfl27oy","_id":"cj8lbpzne006ygov5isdlxtmc"}],"Tag":[{"name":"C","_id":"cj8lbpzcn0002gov5cel4z7zw"},{"name":"Helloworld","_id":"cj8lbpzds0006gov5xg6jix1t"},{"name":"排序","_id":"cj8lbpzee000dgov5lasbcr1f"},{"name":"冒泡排序","_id":"cj8lbpzej000jgov5bh5a470y"},{"name":"算法","_id":"cj8lbpzem000mgov5pgre215o"},{"name":"liux","_id":"cj8lbpzeo000pgov582e8za8s"},{"name":"CentOS","_id":"cj8lbpzeq000sgov5xppxw03z"},{"name":"PHP","_id":"cj8lbpzes000vgov5g5tuxtm9"},{"name":"Nignx","_id":"cj8lbpzet000wgov5joglqwz0"},{"name":"MariaDB","_id":"cj8lbpzeu000xgov57agdmw5c"},{"name":"LNMP","_id":"cj8lbpzeu000ygov5cqmbtqk6"},{"name":"java","_id":"cj8lbpzew000zgov5xiijnp55"},{"name":"设计模式","_id":"cj8lbpzez0012gov5dxgrcswa"},{"name":"装饰者模式","_id":"cj8lbpzf20015gov5n3jfz2jc"},{"name":"djangorestframework","_id":"cj8lbpzf50017gov5fj1gewz3"},{"name":"python web Django","_id":"cj8lbpzfb001agov5oiae1mjk"},{"name":"转发","_id":"cj8lbpzg5001hgov57oe53to5"},{"name":"工厂模式","_id":"cj8lbpzgj001pgov568ait2ss"},{"name":"docker","_id":"cj8lbpzh6001vgov5ju69ynx0"},{"name":"GDB","_id":"cj8lbpzhl0024gov53f9lobwl"},{"name":"Linux","_id":"cj8lbpzhv002bgov5wb2f6gqg"},{"name":"Debugger","_id":"cj8lbpzi5002fgov57jwjvxq3"},{"name":"peda","_id":"cj8lbpzib002lgov5h9gk1382"},{"name":"github","_id":"cj8lbpzj3002rgov5shcuns8y"},{"name":"ssh key","_id":"cj8lbpzjd002ygov5ft6gexjn"},{"name":"插入排序","_id":"cj8lbpzjj0035gov58nn9knuc"},{"name":"Github","_id":"cj8lbpzju003dgov50l2teblt"},{"name":"Webhook","_id":"cj8lbpzk3003lgov5gtm974ev"},{"name":"自动部署","_id":"cj8lbpzkg003rgov5c8278mx3"},{"name":"code deploy","_id":"cj8lbpzko003wgov5he055tjm"},{"name":"markdown","_id":"cj8lbpzkv0042gov5tuklvpru"},{"name":"入坑","_id":"cj8lbpzl00048gov57w9pvchb"},{"name":"VIM","_id":"cj8lbpzl1004bgov50nsdua5h"},{"name":"Edtor","_id":"cj8lbpzl3004fgov5yexb0c3a"},{"name":"SWAP","_id":"cj8lbpzl9004jgov56avdne7r"},{"name":"https","_id":"cj8lbpzla004lgov56epcnkz3"},{"name":"nginx","_id":"cj8lbpzlb004ogov5o1rbku94"},{"name":"Django djangorestframework","_id":"cj8lbpzlc004pgov5ngvy4wxf"},{"name":"python djangorestframework","_id":"cj8lbpzld004sgov5c9l7gyn2"},{"name":"文件权限","_id":"cj8lbpzle004ugov558hm4uy3"},{"name":"学习笔记","_id":"cj8lbpzlg004wgov5fnydnwxm"},{"name":"router","_id":"cj8lbpzlh004xgov52nm0lo19"},{"name":"观察者模式","_id":"cj8lbpzli0050gov5tx0qmt94"},{"name":"New DB","_id":"cj8lbpzlj0052gov56r124aox"},{"name":"Remote","_id":"cj8lbpzll0055gov5vhmxnnmw"},{"name":"openwrt","_id":"cj8lbpzln0057gov5mq2wkqtv"},{"name":"enviroment","_id":"cj8lbpzlp005agov5yotnvahi"},{"name":"OpenWrt","_id":"cj8lbpzlq005cgov5r2ylcbdt"},{"name":"CTF","_id":"cj8lbpzls005fgov5splsa2k2"},{"name":"PWN","_id":"cj8lbpzlu005igov5pgpyyrr7"},{"name":"pwnable","_id":"cj8lbpzlv005jgov5gtdmhnee"},{"name":"ssh","_id":"cj8lbpzlv005kgov5knqj95t6"},{"name":"暴力破解","_id":"cj8lbpzlx005ngov5s7j6z5l2"},{"name":"记录","_id":"cj8lbpzlz005qgov5fy59iek1"},{"name":"C# pdf","_id":"cj8lbpzm5005xgov5sqpvuvji"},{"name":"python","_id":"cj8lbpzm70060gov5p97c3rve"},{"name":"PIL","_id":"cj8lbpzm90063gov51vg4sn4b"},{"name":"domain","_id":"cj8lbpzmo0068gov52enokmwl"},{"name":"hello hexo","_id":"cj8lbpzmp0069gov52wlpossf"},{"name":"HCTF","_id":"cj8lbpzmr006cgov5g6tvbr2w"},{"name":"萌新第一次","_id":"cj8lbpzms006egov54d4wd13e"},{"name":"python note","_id":"cj8lbpzmt006fgov5gt36rwiy"},{"name":"tcp program","_id":"cj8lbpzmw006igov5whs1wlm2"},{"name":"web","_id":"cj8lbpzn0006mgov5l17ss7e9"},{"name":"tornado","_id":"cj8lbpzn1006ngov58wprje6a"},{"name":"tools reverse","_id":"cj8lbpznb006ugov5ucfl27oy"}]}}