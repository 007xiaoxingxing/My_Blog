{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.pngg","path":"img/favicon.pngg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/instagram.png","path":"img/instagram.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/segmentfault.png","path":"img/segmentfault.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-109.jpg","path":"background/bg-109.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-11.jpg","path":"background/bg-11.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-17.jpg","path":"background/bg-17.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-20.jpg","path":"background/bg-20.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-15.jpg","path":"background/bg-15.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-23.jpg","path":"background/bg-23.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-14.jpg","path":"background/bg-14.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/like.css","path":"static/api/css/like.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-19.jpg","path":"background/bg-19.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-21.jpg","path":"background/bg-21.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-24.jpg","path":"background/bg-24.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share.js","path":"static/api/js/share.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-22.jpg","path":"background/bg-22.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-12.jpg","path":"background/bg-12.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-18.jpg","path":"background/bg-18.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-111.jpg","path":"background/bg-111.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-13.jpg","path":"background/bg-13.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-16.jpg","path":"background/bg-16.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":0,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1481785209439},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1469873304751},{"_id":"source/about/index.md","hash":"f24f899d93e23233415baa694eec94e3fa4e748c","modified":1480482464539},{"_id":"source/_drafts/HCTF2016-Writeup.md","hash":"ffd60061b274b690d6d6578924c942b7ef2fcfeb","modified":1481785209418},{"_id":"source/_drafts/test.md","hash":"676e63cfc27bd10816be73d80ad5381621a86fc4","modified":1481785209419},{"_id":"source/_drafts/初识OD.md","hash":"403ec03c2799e2d6b6c38ca058cb2bf1846ee696","modified":1481785209419},{"_id":"themes/spfk/README.md","hash":"a573ef126efe0747c3a648f07a94b109b3d62984","modified":1481785209439},{"_id":"source/_posts/C-Helloworld.md","hash":"fb0c8b027b3d6c0587a9a91284279cf00b424f45","modified":1481785209419},{"_id":"source/_posts/Decorator-Note.md","hash":"334e86faa0203aa02cb6c2957679fb1541240811","modified":1481888437496},{"_id":"source/_posts/Github-Add-SSHKEY.md","hash":"70f1633cbe380319448704ba9a44c060d6f27599","modified":1481785209420},{"_id":"source/_posts/GDB-peda.md","hash":"9c4cf7a2451ca4ea14576774025be581c85cef77","modified":1481785209420},{"_id":"source/_posts/Learn-Markdown.md","hash":"4a6390a7fc1340baccd2765706d60473fe72106f","modified":1481785209421},{"_id":"source/_posts/Github-Webhook.md","hash":"196f2e9a8851882d44e9609d21856c80446c368b","modified":1481785209421},{"_id":"source/_posts/Learn_VIM.md","hash":"7e76f6a9228a407e4d9ca1d512f1e0d38a376ed0","modified":1481785209421},{"_id":"source/_posts/Centos7-lnmp.md","hash":"041830aed0016b16a3f33a77dff945acfafc63f3","modified":1489207010736},{"_id":"source/_posts/OpenWRT-BuildEnvironMent.md","hash":"57f1e8ab4f45a66eb23e380f68ed71681749f867","modified":1481785209422},{"_id":"source/_posts/MariaDB-Create-Remote.md","hash":"c19021f41191efa85ec904ee3fa94764ac68d014","modified":1494569470872},{"_id":"source/_posts/PIL-Grab.md","hash":"6cae0587585a7bed5fd786ddc55dc4ef8a604cd5","modified":1481785209422},{"_id":"source/_posts/Pwnable-collision.md","hash":"7a75e2d0a1a6df82a2eba92b6a5425dc03d6797a","modified":1481785209423},{"_id":"source/_posts/hello-world.md","hash":"cc55890d4caa8353f85c0f2a014f0f3343b4c134","modified":1481786421795},{"_id":"source/_posts/nginx-diable-domain.md","hash":"6385f3d1196f90881b485d24c285c53287a5d701","modified":1481794312992},{"_id":"source/_posts/Pwnable-fd.md","hash":"a4f09db8a4fba0b515cbfdbd94620ea7ac174ae6","modified":1481785209423},{"_id":"themes/spfk/_config.yml","hash":"fd53fd711c053fc73760d6299ac8640eef2c39f5","modified":1481794120944},{"_id":"source/_posts/tornado-requesthandler.md","hash":"4cf7091b41d00c8510847aadd575d007482bd495","modified":1481866293444},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1469873304739},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1469873304738},{"_id":"source/_posts/Observer-Notes.md","hash":"e07bbdba49b4c3d9d7bff7d8f20e7447c94fa45d","modified":1481888295413},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1469873304739},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1469873304739},{"_id":"themes/spfk/languages/pt-BR","hash":"9e8a1942a32af8720c9fbca8db14eb89d76c21bd","modified":1481785209454},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1469873304740},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1469873304740},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1469873304740},{"_id":"source/_posts/tornado-hello-world.md","hash":"86ac545d6d8c89604cdf052f85ecab43f381f42a","modified":1481866293444},{"_id":"source/_posts/Let-s-Encrypt.md","hash":"1591379b87bb4babf7901e1b2ebcaf646f9b6c7b","modified":1481793278096},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1469873304740},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1469873304740},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1469873304750},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1469873304750},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1469873304750},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1469873304749},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469873304751},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1469873304751},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1469873304750},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1469873304750},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1469873304751},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1469873304742},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"9f960e278a1f8db11d632f35ccab63812e1a0b66","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1469873304742},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"4031d2ae2bd23cea8c1059122e7358d6b4943664","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"ff7174ff79bfe82a70b03a07d78583b1e8d1827f","modified":1469873304743},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"1f2809590152382520abbba13fab2571322db123","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"33a9e21698fe3038a7dfcf0f34d73901482c49db","modified":1469873304742},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"21ffa5e590b1588b61b7de66c81a992ff87e9b36","modified":1469873304744},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"99b8143b6bfd6a6f3de4bbb34c3b9a50162fa4d4","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"34b2d7050db88fed9f70b8233f16f451bad501f4","modified":1469873304745},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1469873304744},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"db08f6276c2b501ad16a335f5d0d06c1b4e24d35","modified":1469873304744},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1469873304746},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"112353124225cada3e44644151f069655db9494b","modified":1469873304745},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"fe5f6a248269db2003d4bde653f56c3adc7a613a","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1469873304743},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"dcd7e89788f050d466d0502e7535397619009360","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1469873304748},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1469873304749},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"f0191892b19a19d7bb59f97c659611208b53c81d","modified":1469873304749},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"c46a2b624281b09d4aeacf2921cd712837469a1d","modified":1469873304749},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1469873304809},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1469873304816},{"_id":"themes/spfk/source/css/_variables.styl","hash":"06d579447488fb23e40603970dc08ffe6ad31897","modified":1481785209454},{"_id":"themes/spfk/source/css/showshare.css","hash":"176f81997ae8108d07a82fc6ea7cc34f7305bfde","modified":1481785209454},{"_id":"themes/spfk/source/css/style.styl","hash":"6f93632f70b25aafc1e0d31c30c1d3e3120688cc","modified":1481785209454},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469873304817},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469873304818},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469873304818},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469873304818},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1469873304822},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469873304818},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469873304819},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1469873304822},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1469873304834},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1469873304823},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1469873304835},{"_id":"themes/spfk/source/img/favicon.pngg","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1469873304835},{"_id":"themes/spfk/source/img/favicon.png","hash":"33da7602134e0ec3c9eb08eb1478e2893f48a6ed","modified":1469876613680},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1469873304836},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1469873304834},{"_id":"themes/spfk/source/img/favicon.ico","hash":"48d9661f11688d84618da35409f6cbf3a0ac0507","modified":1469876685536},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1469873304834},{"_id":"themes/spfk/source/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1481785209454},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1469873304837},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1469873304837},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1469873304837},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1469873304838},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1469873304838},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1469873304838},{"_id":"themes/spfk/source/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1481785209454},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1469873304838},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1469873304838},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1469873304839},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1469873304839},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1469873304839},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1469873304839},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1469873304841},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1469873304837},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1469873304844},{"_id":"themes/spfk/source/js/main.js","hash":"28d30d6dd4ffef17d236f31b5cba7714d770f5c1","modified":1481785209454},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1481785209454},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1469873304845},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1469873304842},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1469873304846},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1469873304846},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"7ef559423622f8959cce79274bdf782d92a6e867","modified":1480926097266},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1469873304837},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1469873304842},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1469873304843},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1469873304741},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1469873304741},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1469873304835},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1469873304744},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"da37a6c1631e82533b4cec7d1f5bb246b5b1acfe","modified":1481785209454},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1469873304743},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1469873304746},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1469873304746},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1469873304747},{"_id":"themes/spfk/layout/_partial/post/swiftype.ejs","hash":"90f03e7f0ca811f3caeeaaeb2aaf5283e3ab4bb5","modified":1469873304747},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1469873304748},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1469873304747},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1469873304746},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"9590b381b3b787ca9b1d93d97a8d58e9fd9a4f2a","modified":1481785209454},{"_id":"themes/spfk/source/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1469873304758},{"_id":"themes/spfk/source/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1469873304759},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1469873304748},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1469873304749},{"_id":"themes/spfk/source/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1469873304774},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"499c1f92b613caff6d3828e5bfc4f40ed7af7b85","modified":1481785209454},{"_id":"themes/spfk/source/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1469873304783},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1469873304845},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1469873304754},{"_id":"themes/spfk/source/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1469873304808},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1469873304793},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"4df95b4bb2d092fb4edacaace6da75b68b76ffc9","modified":1469873304810},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"a38dd264db83942da95713b78311e4cca0d99325","modified":1469873304811},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"525dd26d258c566353417fa1b74b9eb57807f898","modified":1481785209454},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1469873304812},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1469873304811},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1469873304813},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"dc3c5531589dc2858e20d01a0db5d116d6b7f507","modified":1469873304809},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1469873304813},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1469873304813},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1469873304814},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1469873304814},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"05bec94ed9f9fafa284926a8711aa52de7c56279","modified":1469873304813},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1469873304815},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"ddcfef2526e6d98f84ae88a87c1ec911649ef791","modified":1469873304814},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1469873304815},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1469873304815},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1469873304816},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469873304819},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1469873304820},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1469873304820},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1469873304821},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1469873304821},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1469873304821},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"606c4b47dce561443f2d5151382aea4cfef4989a","modified":1481785209454},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"ac1648577fb7cec4674dda53a0c02490b43d4d7b","modified":1481785209454},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1469873304824},{"_id":"themes/spfk/source/img/head.jpg","hash":"07047af83673946967a0f46e5586c5470c2df952","modified":1469874164960},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1469873304841},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1469873304824},{"_id":"themes/spfk/source/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1469873304770},{"_id":"themes/spfk/source/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1469873304789},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1469873304803},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1469873304826},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1469873304825},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1469873304832},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1469873304831},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1469873304840},{"_id":"themes/spfk/source/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1469873304768},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1469873304810},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1469873304814},{"_id":"themes/spfk/source/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1469873304807},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1469873304830},{"_id":"themes/spfk/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1481785209454},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"3571eedc41a7a099fab8cdac5c2143bf10397011","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/imgshare.css","hash":"7465b359751d368f4a45f7823dc4a1918bba7f5f","modified":1481785209454},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"e3d6368de04e83d2baaebf80f7d746272bb22264","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1481785209454},{"_id":"themes/spfk/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1481785209470},{"_id":"themes/spfk/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1481785209470},{"_id":"themes/spfk/source/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1469873304778},{"_id":"themes/spfk/source/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1469873304785},{"_id":"themes/spfk/source/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1469873304792},{"_id":"themes/spfk/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1481785209470},{"_id":"themes/spfk/source/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1481785209514},{"_id":"themes/spfk/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1481785209470},{"_id":"themes/spfk/source/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1469873304787},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1469873304801},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1469873304805},{"_id":"themes/spfk/source/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481785209502},{"_id":"themes/spfk/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481785209521},{"_id":"themes/spfk/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481785209522},{"_id":"themes/spfk/source/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1469873304763},{"_id":"themes/spfk/source/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1469873304757},{"_id":"themes/spfk/source/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1469873304775},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1469873304834},{"_id":"themes/spfk/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1481785209470},{"_id":"themes/spfk/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1481785209486},{"_id":"themes/spfk/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1481785209486},{"_id":"themes/spfk/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1481785209470},{"_id":"themes/spfk/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1481785209489},{"_id":"themes/spfk/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1481785209498},{"_id":"themes/spfk/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1481785209499},{"_id":"themes/spfk/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1481785209499},{"_id":"themes/spfk/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1481785209486},{"_id":"themes/spfk/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1481785209499},{"_id":"themes/spfk/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1481785209500},{"_id":"themes/spfk/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1481785209500},{"_id":"themes/spfk/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1481785209501},{"_id":"themes/spfk/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1481785209501},{"_id":"themes/spfk/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1481785209502},{"_id":"themes/spfk/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1481785209501},{"_id":"themes/spfk/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1481785209501},{"_id":"themes/spfk/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1481785209502},{"_id":"themes/spfk/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1481785209498},{"_id":"themes/spfk/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1481785209502},{"_id":"themes/spfk/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1481785209504},{"_id":"themes/spfk/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1481785209503},{"_id":"themes/spfk/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1481785209504},{"_id":"themes/spfk/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1481785209504},{"_id":"themes/spfk/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1481785209505},{"_id":"themes/spfk/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1481785209506},{"_id":"themes/spfk/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1481785209506},{"_id":"themes/spfk/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1481785209507},{"_id":"themes/spfk/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1481785209505},{"_id":"themes/spfk/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1481785209507},{"_id":"themes/spfk/source/static/api/js/component/comm_tools.js","hash":"3bf6c59fbcf5d77c595e461dac13478d078b2d48","modified":1481785209511},{"_id":"themes/spfk/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1481785209511},{"_id":"themes/spfk/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1481785209511},{"_id":"themes/spfk/source/static/api/js/component/animate.js","hash":"0adfc191385eb76dc38452af8307d4e2f28436f9","modified":1481785209510},{"_id":"themes/spfk/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1481785209511},{"_id":"themes/spfk/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1481785209512},{"_id":"themes/spfk/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1481785209513},{"_id":"themes/spfk/source/static/api/js/component/pop_popup_slide.js","hash":"e2a413a6ae6fa73cd080f5852a06f6c7e3280fd0","modified":1481785209513},{"_id":"themes/spfk/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1481785209515},{"_id":"themes/spfk/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1481785209515},{"_id":"themes/spfk/source/static/api/js/share/combine_api.js","hash":"91dc0f3a19bc4f18c44e953e4a22313d9eb4d673","modified":1481785209515},{"_id":"themes/spfk/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1481785209517},{"_id":"themes/spfk/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1481785209520},{"_id":"themes/spfk/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1481785209520},{"_id":"themes/spfk/source/static/api/js/share/like_api.js","hash":"e1a4b51bf73037876517afae9c873c311a70a3ae","modified":1481785209517},{"_id":"themes/spfk/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1481785209513},{"_id":"themes/spfk/source/static/api/js/share/likeshare.js","hash":"f6815b354bc7120e372bf0af0869996132d9c3db","modified":1481785209517},{"_id":"themes/spfk/source/static/api/js/start/router.js","hash":"8566cdaed64760ea765d0542a337ba7acc5a447b","modified":1481785209521},{"_id":"themes/spfk/source/static/api/js/trans/trans.js","hash":"bbcbd24ac4a6613a2c633766de78b2f9dd988808","modified":1481785209522},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdxc.js","hash":"db1ca49efafb70eca0e830a513367c0275368ff1","modified":1481785209522},{"_id":"themes/spfk/source/static/api/js/base/class.js","hash":"9b2e8af7870bd36a7e271c54b726cb79a375d93a","modified":1481785209508},{"_id":"themes/spfk/source/static/api/js/trans/trans_bdysc.js","hash":"7403d0215bb28190bd0cfd5480469f13dd27f88b","modified":1481785209523},{"_id":"themes/spfk/source/static/api/js/conf/const.js","hash":"44fb8861c5723e508ebaebfeaeafbaebbc2733ea","modified":1481785209514},{"_id":"themes/spfk/source/static/api/js/conf/define.js","hash":"734084a8d672deb373b9ad2ebf82621b9f76cfea","modified":1481785209514},{"_id":"themes/spfk/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1481785209524},{"_id":"themes/spfk/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1481785209525},{"_id":"themes/spfk/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1481785209525},{"_id":"themes/spfk/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1481785209526},{"_id":"themes/spfk/source/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1469873304761},{"_id":"themes/spfk/source/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1469873304765},{"_id":"themes/spfk/source/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1469873304772},{"_id":"themes/spfk/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1481785209526},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1469873304828},{"_id":"themes/spfk/source/static/api/js/base/tangram.js","hash":"f3ecbed4c05dba6a28df137e9a4e66c9ccfbd220","modified":1481785209509},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1469873304782},{"_id":"themes/spfk/source/static/api/js/view/like_view.js","hash":"b2a9e51f2c35ea58d5d2cc036c88895e34fb653e","modified":1481785209525},{"_id":"themes/spfk/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1481785209523},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1469873304799},{"_id":"public/archives/2016/07/index.html","hash":"5a68e1d8046236bc34e3cd699921e07468c51eaa","modified":1494572644513},{"_id":"public/tags/C/index.html","hash":"54a4d661aae11fb6681ea85ce3fc95dabb1bbe24","modified":1494572644516},{"_id":"public/tags/Helloworld/index.html","hash":"639912ba2826f77ef83b58d27cdf4c7245fd418d","modified":1494572644518},{"_id":"public/tags/markdown/index.html","hash":"45f88066eab09dd6dfad628e3b359d2624d86a1e","modified":1494572644518},{"_id":"public/tags/入坑/index.html","hash":"a826965f516b5f6f5ea1b3de711c1f609d1815f3","modified":1494572644519},{"_id":"public/tags/GDB/index.html","hash":"1c3bd1d916bb8c78faf8f3701877c5688ef55997","modified":1494572644519},{"_id":"public/tags/Debugger/index.html","hash":"5845d9a4760208c01444d2df88a907a7d7c26182","modified":1494572644519},{"_id":"public/tags/peda/index.html","hash":"1a57969b7e0bcf146482473c7600ce5a6f952336","modified":1494572644519},{"_id":"public/about/index.html","hash":"2a4a9e609d175d3bcc6276d281c446fbe5d1539a","modified":1494572644522},{"_id":"public/2016/12/16/Decorator-Note/index.html","hash":"2eec121da1f6380afcfd535a64e5e8ba74a54a91","modified":1494490790158},{"_id":"public/2016/12/15/tornado-requesthandler/index.html","hash":"96c50cbe2a01be15955892928bc6c698fd2e1ad8","modified":1494572644522},{"_id":"public/2016/12/15/tornado-hello-world/index.html","hash":"5a7664b31b06d6f0caeaac7ea01e9a331ff56dc9","modified":1494572644522},{"_id":"public/2017/03/11/Centos7-lnmp/index.html","hash":"36a5a8eff265e1c9e32221ed43c8772b59f63a68","modified":1494572644522},{"_id":"public/2016/12/15/nginx-diable-domain/index.html","hash":"4fc491b3377e45241e8c69baa8c1e16fdbc0497e","modified":1494572644522},{"_id":"public/2016/12/15/Let-s-Encrypt/index.html","hash":"c7e1ef3cb182fdce5a5553e0dfbb0c3238ddc3e7","modified":1494572644522},{"_id":"public/2016/12/04/Github-Webhook/index.html","hash":"6869d2ea18b64385ff446bd25add92e0c28d7778","modified":1494572644523},{"_id":"public/2016/11/30/Github-Add-SSHKEY/index.html","hash":"2a7f4c0b64d653af4fcc127b0fb80825fc172fae","modified":1494572644523},{"_id":"public/2016/11/29/Learn_VIM/index.html","hash":"98bd31dd9f78a4b8a8774fdf9fba3fdfccc2eb4d","modified":1494572644523},{"_id":"public/2016/11/29/C-Helloworld/index.html","hash":"8c2942f1d5667dd7a4e1c0b0f708947a59eef209","modified":1494572644523},{"_id":"public/2016/11/28/Pwnable-collision/index.html","hash":"049c1f3c0ede38dbf19d0cca914ef692279b0ed9","modified":1494572644523},{"_id":"public/2016/11/28/OpenWRT-BuildEnvironMent/index.html","hash":"f6473883a9b7b345ecc62efd5c67a478fe9c0e2c","modified":1494572644523},{"_id":"public/2016/11/27/Pwnable-fd/index.html","hash":"b1c1ff737476e6eb0fbb4dd7ac5612e9f6064998","modified":1494572644523},{"_id":"public/2016/11/20/GDB-peda/index.html","hash":"1728e85545c67d51f0406324abba4b1ab78b65d3","modified":1494572644523},{"_id":"public/2016/07/22/Learn-Markdown/index.html","hash":"7f2c40ea30b99f9104a10a2919ced57bce7d79d5","modified":1494572644523},{"_id":"public/index.html","hash":"3700b70341cc81504695a2001098120bda5797fe","modified":1494572644526},{"_id":"public/2016/12/16/Observer-Notes/index.html","hash":"13aa9414a1542941027c5dc7441cd6da4877930c","modified":1494572644522},{"_id":"public/2016/07/21/hello-world/index.html","hash":"aaaf2e60a172311e6c9eb1e5c561049451bf28aa","modified":1494572644523},{"_id":"public/page/2/index.html","hash":"85a85d0463dcd3a4705e376402ed0c8fb13dc64a","modified":1494572644526},{"_id":"public/archives/index.html","hash":"8b834871e7099d9805cf08c9128289a9955d26f7","modified":1494572644524},{"_id":"public/archives/2016/index.html","hash":"58da62a26609d5679df28fa760ad0b5525b39773","modified":1494572644524},{"_id":"public/archives/page/2/index.html","hash":"bdde77a40c62e1456b4cc3586b5d8d40973473a3","modified":1494572644524},{"_id":"public/archives/2016/page/2/index.html","hash":"5dc800a6a10588d29650b52f4388e987fa6ab5d2","modified":1494572644524},{"_id":"public/archives/2016/11/index.html","hash":"a60987c62c1aaf43909666d6ebab32598773fa03","modified":1494572644524},{"_id":"public/archives/2017/index.html","hash":"1e11b564378ddbc87e4f90f2db0bbad09c7c1623","modified":1494572644524},{"_id":"public/archives/2016/12/index.html","hash":"07bc610e417dc3270eb32973bdd034965fddcbea","modified":1494572644524},{"_id":"public/archives/2017/03/index.html","hash":"aac8a7324afe1aac7330dc6e7f4e983ee69eb3a9","modified":1494572644524},{"_id":"public/categories/CTF/index.html","hash":"3111521771b4738e0d127af0e3b90fdca7ab24be","modified":1494572644524},{"_id":"public/categories/Program/index.html","hash":"d387c0b35fda532f5c79efd3ba5fd0d4ee887541","modified":1494572644524},{"_id":"public/categories/Linux/index.html","hash":"7e9b8e37faee3303c1c7dacc7f1513cb50395d40","modified":1494572644524},{"_id":"public/tags/Linux/index.html","hash":"d859ac780178479f7bf9fa3442c2c5cdbcdd5cb3","modified":1494572644524},{"_id":"public/tags/Webhook/index.html","hash":"17ff11e693a12491fe4dd808ff354c67ddeb8bcf","modified":1494572644519},{"_id":"public/tags/自动部署/index.html","hash":"2539ddc3c56b2b63eb3938f4f020a570362a1f5b","modified":1494572644519},{"_id":"public/tags/code-deploy/index.html","hash":"ac463b79ee188b08fee4a22c33bf374ec6775f93","modified":1494572644519},{"_id":"public/tags/VIM/index.html","hash":"d33d0a69b0154eb314da014bc38a9bd858938e02","modified":1494572644519},{"_id":"public/tags/Edtor/index.html","hash":"db997284ba94117e2ddfb774c683a73f71152a95","modified":1494572644519},{"_id":"public/tags/openwrt/index.html","hash":"81a993d00e57cb667795edbd40724591a17d99a3","modified":1494572644519},{"_id":"public/tags/enviroment/index.html","hash":"803ab3d2ef9cf2d5cae08e3984f74bfd08d0790a","modified":1494572644519},{"_id":"public/tags/CentOS/index.html","hash":"5adc4113fb90592766de5fee4b102943024c1092","modified":1494572644520},{"_id":"public/tags/PHP/index.html","hash":"5886e04021e1f6d9b209393dee0e1a653e6ef49c","modified":1494572644520},{"_id":"public/tags/Nignx/index.html","hash":"f780b9f423b4cd1110f5ce903fbf44830f52f93a","modified":1494572644520},{"_id":"public/tags/LNMP/index.html","hash":"afb0b99755ca17283a2421b6f8d9fd6ae8245f58","modified":1494572644521},{"_id":"public/tags/PIL/index.html","hash":"c56cb8fb02749fb362688f726a740961de2a00be","modified":1494572644521},{"_id":"public/tags/nginx/index.html","hash":"a989cbeb071c8e323d6b3fe3f001ed076f6dbdbb","modified":1494572644521},{"_id":"public/tags/domain/index.html","hash":"4a3552e2cf8e0b463b15201591b266c93a6c8a91","modified":1494572644521},{"_id":"public/tags/hello-hexo/index.html","hash":"cb54d261ecaf42cbba7f13d7b98b10b8deb609b7","modified":1494572644521},{"_id":"public/tags/tornado/index.html","hash":"67ff3a76313aeddba6b22ac9cd709f204bd7a06c","modified":1494572644526},{"_id":"public/tags/web/index.html","hash":"01ab4e92b8de21abfb1389d074fb9ce9c3d1c22b","modified":1494572644526},{"_id":"public/tags/java/index.html","hash":"803494db38a17e615b5a557d46cebd276d0a0990","modified":1494572644526},{"_id":"public/tags/设计模式/index.html","hash":"9df9bb9e6d7e12489a7346f19260caec0d7a79f9","modified":1494572644526},{"_id":"public/tags/观察者模式/index.html","hash":"c6cff320bfbb14cea08cf76212df1af35e12d39b","modified":1494572644521},{"_id":"public/tags/https/index.html","hash":"e6e86299434ab57a1fd312b62fa6e5d26d1d8090","modified":1494572644521},{"_id":"public/tags/ssh-key/index.html","hash":"c3b511a8ff5e20bc434b1c554acd9f087bfd239f","modified":1494572644518},{"_id":"public/tags/github/index.html","hash":"5917b6fe79da07639ed9d3eb362db71d9fcc9af4","modified":1494572644518},{"_id":"public/tags/Github/index.html","hash":"7a0a99b9727e815ba36546b9e34c895f042fe5b7","modified":1494572644519},{"_id":"public/2017/03/11/MariaDB-Create-Remote/index.html","hash":"3d637cdb48faee4b42abf0cb721dde4ad93e8a33","modified":1494572644522},{"_id":"public/2016/12/04/PIL-Grab/index.html","hash":"05e7d422b150f03f932af8f493a036df48c35b4a","modified":1494572644523},{"_id":"public/tags/MariaDB/index.html","hash":"3efa14f4368b6eca67bdb7a6c1d490dbbd3d5f29","modified":1494572644525},{"_id":"public/tags/python/index.html","hash":"8f02e462d60057e719b0a389082840cc7e9ed16d","modified":1494572644525},{"_id":"public/tags/CTF/index.html","hash":"ef61938d83aaf76842df4ddb9ae52ec66f6907f0","modified":1494572644525},{"_id":"public/tags/PWN/index.html","hash":"227d11fc1256d95eb4bc1e5b638ddecf7aff6701","modified":1494572644526},{"_id":"public/tags/pwnable/index.html","hash":"e5f75e3fb6cc55fa4e554420b6236d2e5e5f3b82","modified":1494572644525},{"_id":"public/static/api/img/share/l8.gif","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494490790190},{"_id":"public/tags/New-DB/index.html","hash":"a280058558a758079bfbddfe9aaf27a4aa59b5f8","modified":1494572644519},{"_id":"public/tags/Remote/index.html","hash":"fcb354b0eaf1f858f1c40d8188b7af569946fabd","modified":1494572644520},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1494490790198},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494490790198},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494490790198},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494490790198},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494490790198},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494490790198},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494490790198},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1494490790198},{"_id":"public/img/favicon.pngg","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1494490790198},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1494490790198},{"_id":"public/img/favicon.ico","hash":"48d9661f11688d84618da35409f6cbf3a0ac0507","modified":1494490790198},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1494490790198},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1494490790198},{"_id":"public/img/favicon.png","hash":"33da7602134e0ec3c9eb08eb1478e2893f48a6ed","modified":1494490790198},{"_id":"public/img/instagram.png","hash":"3c148a3882a8d141d7d405be8c4815d0dcb03561","modified":1494490790198},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1494490790198},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1494490790198},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1494490790198},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1494490790198},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1494490790198},{"_id":"public/img/segmentfault.png","hash":"4483ab273423deb65021111fc8ad9512b69e45b2","modified":1494490790198},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1494490790198},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494490790199},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1494490790199},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1494490790199},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1494490790199},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1494490790199},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1494490790199},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1494490790199},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1494490790199},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1494490790199},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1494490790199},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494490790199},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1494490790199},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1494490790199},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1494490790199},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1494490790199},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1494490790199},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1494490790199},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1494490790199},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1494490790199},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1494490790199},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1494490790199},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1494490790199},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1494490790199},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1494490790199},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1494490790199},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1494490790199},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1494490790199},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1494490790199},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1494490790199},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1494490790199},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1494490790199},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1494490790199},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1494490790199},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1494490790199},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1494490790200},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1494490790200},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1494490790200},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1494490790200},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1494490790200},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1494490790200},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1494490790200},{"_id":"public/background/bg-4.jpg","hash":"7ef559423622f8959cce79274bdf782d92a6e867","modified":1494490791603},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1494490791608},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1494490791617},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1494490791617},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1494490791617},{"_id":"public/css/showshare.css","hash":"3efc4afd0d136fb5dec993e9cd9ce85b9d1cf589","modified":1494490791642},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1494490791643},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1494490791643},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1494490791643},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1494490791643},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1494490791643},{"_id":"public/js/main.js","hash":"921b2fb56e48cce3d16ceb4a3fadf8e666c73a0a","modified":1494490791643},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1494490791643},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1494490791643},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1494490791643},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1494490791643},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1494490791644},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494490791644},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494490791644},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494490791644},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494490791644},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494490791644},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1494490791644},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1494490791644},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1494490791644},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1494490791644},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1494490791644},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1494490791644},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1494490791644},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1494490791644},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1494490791644},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1494490791644},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1494490791644},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1494490791644},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1494490791644},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1494490791644},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1494490791644},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1494490791644},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1494490791644},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1494490791644},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494490791644},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1494490791644},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1494490791644},{"_id":"public/static/api/js/component/animate.js","hash":"00b6f74ed82e5a21a9295dd2dc963e892734b7f6","modified":1494490791644},{"_id":"public/static/api/js/component/comm_tools.js","hash":"e651fbb1a85ab9c615ee833f4d042c203ef430bc","modified":1494490791644},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1494490791644},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1494490791644},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1494490791644},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1494490791644},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"1119fc14abd34ffb8e1f653cd30ca26adaafa3bf","modified":1494490791645},{"_id":"public/static/api/js/share/combine_api.js","hash":"c45d76df1707b4fd739dae7022dc4a015632a81a","modified":1494490791645},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1494490791645},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1494490791645},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1494490791645},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1494490791645},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1494490791645},{"_id":"public/static/api/js/share/like_api.js","hash":"3526047b7f9f7446b883e2fa5ebcf143526449be","modified":1494490791645},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1494490791645},{"_id":"public/static/api/js/share/likeshare.js","hash":"d088ffe7b6451cedf202280d16e85f75a8c3bfd3","modified":1494490791645},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"da78025de5717315252d2d33b4252c89b891c71c","modified":1494490791645},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"1be632b99fdd67ba5279aa6c56db7d528fd094c3","modified":1494490791645},{"_id":"public/static/api/js/trans/trans.js","hash":"2bf87aff540cba3bee6cc05a7a8e9a2bc8b5d907","modified":1494490791645},{"_id":"public/static/api/js/start/router.js","hash":"97c195ae0d30dd8c7aac55a0555f082eeed4eee0","modified":1494490791645},{"_id":"public/static/api/js/conf/const.js","hash":"e2269411b129b847eca265fbc73f0d573f2474bb","modified":1494490791645},{"_id":"public/static/api/js/base/class.js","hash":"ad1e5a3011e30b83ac8aaeabffc3311dcb151bf5","modified":1494490791645},{"_id":"public/static/api/js/conf/define.js","hash":"1393906ec26b7cf711c18e569a64f7d0c1951fc7","modified":1494490791645},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1494490791645},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1494490791645},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1494490791645},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1494490791645},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1494490791645},{"_id":"public/static/api/js/view/like_view.js","hash":"42b51bd3ee4815b9ca8df6dacb9c81a8a34d762a","modified":1494490791645},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1494490791645},{"_id":"public/css/style.css","hash":"073525e68a984a438a15d60efbeba4a76f57176a","modified":1494490791645},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494490791645},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1494490791645},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1494490791645},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1494490791645},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1494490791645},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1494490791645},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1494490791646},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1494490791646},{"_id":"public/static/api/js/share.js","hash":"5e71147fe4a93bc99387a5cc1c6894d8b6ab2d5e","modified":1494490791646},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1494490791646},{"_id":"public/background/bg-109.jpg","hash":"6171c1e921c8cc9bdcd7276cf7f0bee5295f4672","modified":1494490791646},{"_id":"public/background/bg-11.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1494490791646},{"_id":"public/background/bg-17.jpg","hash":"6ab5e470059e8ccb0c8bc6786abfb5db7e9a1826","modified":1494490791646},{"_id":"public/background/bg-20.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1494490791646},{"_id":"public/background/bg-1.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1494490791646},{"_id":"public/background/bg.jpg","hash":"f0617756387d74f99afe0087c7b93a32f3c7096b","modified":1494490791646},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1494490791646},{"_id":"public/img/head.jpg","hash":"07047af83673946967a0f46e5586c5470c2df952","modified":1494490791646},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1494490791646},{"_id":"public/background/bg-23.jpg","hash":"050937d649be2c02ef8a66a0ffe7d320b236d1b0","modified":1494490791664},{"_id":"public/background/bg-7.jpg","hash":"acbe0946a47ba16b79f062dbee14c4c9ff9a48da","modified":1494490791664},{"_id":"public/background/bg-15.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1494490791664},{"_id":"public/background/bg-9.jpg","hash":"df731da0fe0de9a05d99d017e747252c990f972d","modified":1494490791725},{"_id":"public/background/bg-14.jpg","hash":"2fd6ede2bc9de2d26d910ea4e45d28b2350881eb","modified":1494490791725},{"_id":"public/background/bg-19.jpg","hash":"d77504412d28432643fc61ed9fd9f7c57096bdd9","modified":1494490791734},{"_id":"public/background/bg-21.jpg","hash":"7c4c6cd5d75115093fa29bba7372fa198f04b0f1","modified":1494490791734},{"_id":"public/background/bg-24.jpg","hash":"796fa5262d7714e8ce9496a2d03864429cfc5b45","modified":1494490791734},{"_id":"public/background/bg-22.jpg","hash":"7a055391fa4188d9c22fdc1d34a10b26e2f0826d","modified":1494490791734},{"_id":"public/background/bg-8.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1494490791734},{"_id":"public/background/bg-6.jpg","hash":"1a4f4c8875b2c56e7992000979a7fca7856eec35","modified":1494490791735},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1494490791735},{"_id":"public/background/bg-12.jpg","hash":"2e0815591309863d8130881681cde32ec4bfebf1","modified":1494490791759},{"_id":"public/background/bg-10.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1494490791759},{"_id":"public/background/bg-18.jpg","hash":"4d61dc41a781a9c1d37c9e5e413ac0d8a9538f6a","modified":1494490791761},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1494490791762},{"_id":"public/background/bg-13.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1494490791803},{"_id":"public/background/bg-111.jpg","hash":"e1631b47fede8da6c03582ceed648668547c4f09","modified":1494490791803},{"_id":"public/background/bg-16.jpg","hash":"d1a34d0c4b69262169b543922e4aeb4dae997ad8","modified":1494490791804},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1494490791809},{"_id":"public/background/bg-5.jpg","hash":"2d5da2a209732cce0abf2ca234c0bef0516b65ff","modified":1494490791815},{"_id":"source/_posts/Decorator-Notes.md","hash":"193e1e0ad1b2abb9d0149eb214cb997d07cf5a1a","modified":1494569409163},{"_id":"public/archives/2017/05/index.html","hash":"c105f5c7ca0f1e2e4b82e7232a5d1516eb4e4f46","modified":1494572644524},{"_id":"public/tags/装饰者模式/index.html","hash":"6cf1339218070e34492b3a457758bdf9ad62cb4b","modified":1494572644521},{"_id":"public/2017/05/12/Decorator-Notes/index.html","hash":"eb26c43669f9e47a8a7f4811d566f5307004e308","modified":1494572644522},{"_id":"source/_posts/Factory-Notes.md","hash":"41222cbe43d6b43e849ba38a68a4cab59352e2e1","modified":1494572628883},{"_id":"public/tags/工厂模式/index.html","hash":"3105b10bbcafe2729321944be4386563ed45ead8","modified":1494572644528},{"_id":"public/2017/05/12/Factory-Notes/index.html","hash":"3be9e3617a1e5be383cd66966e48553820a1babe","modified":1494572644528}],"Category":[{"name":"CTF","_id":"cj2k588vi0004zgto7tnxmnnj"},{"name":"Program","_id":"cj2k588vq0009zgtodjsjkcs7"},{"name":"Linux","_id":"cj2k588w2000mzgto94mtm1zy"}],"Data":[],"Page":[{"title":"About","date":"2016-07-30T11:10:59.000Z","tags":["我是谁","从哪来","到哪去"],"_content":"About me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2016-07-30 19:10:59\ntags:\n- 我是谁\n- 从哪来\n- 到哪去\n---\nAbout me:  \n``` python\n>>>print name=star-chen  \n>>>print sex=???  \n>>>print hobbies=逆向，CTF，编程，宅\n\n```\n平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。  \nBe Quiet，Learn More！  \nThe Quieter You Become，The More You Are Be Hear！  \n\n\n","updated":"2016-11-30T05:07:44.539Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj2k588v90000zgtooji6fj23","content":"<p>About me:<br><figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n","excerpt":"","more":"<p>About me:<br><figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;&gt;&gt;print name=star-chen  </div><div class=\"line\">&gt;&gt;&gt;print sex=???  </div><div class=\"line\">&gt;&gt;&gt;print hobbies=逆向，CTF，编程，宅</div></pre></td></tr></table></figure></p>\n<p>平时感觉也学了很多东西，一直没有把学习过的内容记录下来，所以弄了这个博客，把平时的学习过程写下来，写东西也是再次思考的过程，希望能更有所提高吧。<br>Be Quiet，Learn More！<br>The Quieter You Become，The More You Are Be Hear！  </p>\n"}],"Post":[{"title":"HCTF2016 writeup","date":"2016-11-29T12:12:27.000Z","_content":"","source":"_drafts/HCTF2016-Writeup.md","raw":"---\ntitle: HCTF2016 writeup\ndate: 2016-11-29 20:12:27\ncategories: CTF\ntags:\n- HCTF\n- 萌新第一次\n---\n","slug":"HCTF2016-Writeup","published":0,"updated":"2016-12-15T07:00:09.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588vb0001zgtoepre4wzc","content":"","excerpt":"","more":""},{"title":"test","_content":"","source":"_drafts/test.md","raw":"---\ntitle: test\ntags:\n---\n","slug":"test","published":0,"date":"2016-12-15T07:00:09.418Z","updated":"2016-12-15T07:00:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588ve0002zgtos4s84x2y","content":"","excerpt":"","more":""},{"layout":"ctf","title":"初识OD","date":"2016-07-30T11:24:01.000Z","_content":"\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","source":"_drafts/初识OD.md","raw":"layout: ctf\ntitle: 初识OD\ndate: 2016-07-30 19:24:01\ntags: tools reverse\n---\n\n## 程序界面简介\n\n​\tollydbg是一款功能强大的win32调试工具，[官方网站](http://www.ollydbg.de)\n\n\n\n","slug":"初识OD","published":0,"updated":"2016-12-15T07:00:09.419Z","comments":1,"photos":[],"link":"","_id":"cj2k588vj0005zgtoab3rhc9c","content":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\" target=\"_blank\" rel=\"external\">官方网站</a></p>\n","excerpt":"","more":"<h2 id=\"程序界面简介\"><a href=\"#程序界面简介\" class=\"headerlink\" title=\"程序界面简介\"></a>程序界面简介</h2><p>​    ollydbg是一款功能强大的win32调试工具，<a href=\"http://www.ollydbg.de\">官方网站</a></p>\n"},{"title":"Program HelloWorld","date":"2016-11-29T11:12:27.000Z","_content":"\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","source":"_posts/C-Helloworld.md","raw":"---\ntitle: Program HelloWorld\ndate: 2016-11-29 19:12:27\ncategories: Program\ntags:\n- C\n- Helloworld\n---\n\n```c\n#include <stdio.h>\nint main(){\n  \n  printf(\"Hello World!\\n\");\n  return 0;\n}\n```\n<!-- more -->\n```bash\n#gcc hello.c -o hello\n#./hello\n#Hello World!\n```\n\n你好世界！Coding  and Hava Fun！","slug":"C-Helloworld","published":1,"updated":"2016-12-15T07:00:09.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588vk0006zgtoqorn5nps","content":"<figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>\n","excerpt":"<figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello World!\\n\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#gcc hello.c -o hello</span></div><div class=\"line\"><span class=\"comment\">#./hello</span></div><div class=\"line\"><span class=\"comment\">#Hello World!</span></div></pre></td></tr></table></figure>\n<p>你好世界！Coding  and Hava Fun！</p>"},{"title":"github配置ssh key","date":"2016-11-30T02:43:18.000Z","_content":"### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","source":"_posts/Github-Add-SSHKEY.md","raw":"---\ntitle: github配置ssh key\ndate: 2016-11-30 10:43:18\ncategories: Program\ntags:\n- github\n- ssh key\n---\n### 配置ssh key，免密码提交代码至github  \n0x01:在本机生成ssh所需的公钥和私钥  \n```bash\nuser@user MINGW64 ~\n$ cd ~\n\nuser@user MINGW64 ~\n$ ssh-keygen -t rsa -C \"hahaha9@gmail.com\" -f ~/.ssh/PCWIN10（-f参数指定生成的密钥名称，也可以不指定，默认为id_rsa）\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)\nEnter same passphrase again:（重复刚刚的密码）\nYour identification has been saved in PCWIN10.（生成的私钥）\nYour public key has been saved in PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）\nThe key fingerprint is:\nSHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com\nThe key's randomart image is:\n+---[RSA 2048]----+\n| .+ooBo*+        |\n| o.+= O.*.       |\n|. o..=.X..       |\n| .  o.=..        |\n|     + +So       |\n|    . E o o      |\n|       + . +.    |\n|      o + oooo   |\n|       + o..o..  |\n+----[SHA256]-----+\n\n```\n<!-- more -->\n0x2:添加ssh key至github网站\n![image](/blogimg/gitsshkey.png)\n\n0x3:将私钥添加到本地gitbash  \n```bash\n$ ssh-agent bash --login -i\n$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)\n\n```\n\n0x4:本地测试是否已经正常\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n已经认证成功。\n\n0x4:将https提交类型的remote设置为ssh类型  \n查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let's do it！\n```bash\n$ git remote -v\norigin  https://github.com/yourname/My_Blog.git (fetch)\norigin  https://github.com/yourname/My_Blog.git (push)\n\n```\n0x5:更改远程仓库链接为ssh类型\n```bash\n$ git remote set-url origin git@github.com:你的github用户名/你的远程仓库名.git\n```\n再次查看远程仓库链接\n```bash\n$ git remote -v\norigin  git@github.com:yourname/xxx.git (fetch)\norigin  git@github.com:xxxx/xxx.git (push)\n\n```\n0x6:在\"~/.ssh\"下新建一个名为config的配置文件，内容如下:\n```bash\n$ cat ~/.ssh/config\nHost github.com\n        HostName github.com\n        PreferredAuthentications publickey\n        IdentityFile ~/.ssh/PCWIN10\n\n```\n0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。\n```bash\n$ ssh -T git@github.com\nHi xxxx! You've successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)\n\n$ git push（提交一下本地的代码）\n\n```\nps: ssh-agent\n>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。\n","slug":"Github-Add-SSHKEY","published":1,"updated":"2016-12-15T07:00:09.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588vr000azgtoqb1cm7rt","content":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</span></div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</span></div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>\n","excerpt":"<h3 id=\"配置ssh-key，免密码提交代码至github\"><a href=\"#配置ssh-key，免密码提交代码至github\" class=\"headerlink\" title=\"配置ssh key，免密码提交代码至github\"></a>配置ssh key，免密码提交代码至github</h3><p>0x01:在本机生成ssh所需的公钥和私钥<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ <span class=\"built_in\">cd</span> ~</div><div class=\"line\"></div><div class=\"line\">user@user MINGW64 ~</div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"hahaha9@gmail.com\"</span> <span class=\"_\">-f</span> ~/.ssh/PCWIN10（<span class=\"_\">-f</span>参数指定生成的密钥名称，也可以不指定，默认为id_rsa）</div><div class=\"line\">Generating public/private rsa key pair.</div><div class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase):(这里需要输入密码，如果为空，提交的时候就不需要输入密码)</div><div class=\"line\">Enter same passphrase again:（重复刚刚的密码）</div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> PCWIN10.（生成的私钥）</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> PCWIN10.pub.（生成的公钥，需要把这个文件中的内容提交到github上）</div><div class=\"line\">The key fingerprint is:</div><div class=\"line\">SHA256:IIhHNNc8fLREgPg1N+YEuQyUudsTHrtzY7f1yMMYjCM hahaha9@gmail.com</div><div class=\"line\">The key<span class=\"string\">'s randomart image is:</div><div class=\"line\">+---[RSA 2048]----+</div><div class=\"line\">| .+ooBo*+        |</div><div class=\"line\">| o.+= O.*.       |</div><div class=\"line\">|. o..=.X..       |</div><div class=\"line\">| .  o.=..        |</div><div class=\"line\">|     + +So       |</div><div class=\"line\">|    . E o o      |</div><div class=\"line\">|       + . +.    |</div><div class=\"line\">|      o + oooo   |</div><div class=\"line\">|       + o..o..  |</div><div class=\"line\">+----[SHA256]-----+</span></div></pre></td></tr></table></figure></p>","more":"<p>0x2:添加ssh key至github网站<br><img src=\"/blogimg/gitsshkey.png\" alt=\"image\"></p>\n<p>0x3:将私钥添加到本地gitbash<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-agent bash --login -i</div><div class=\"line\">$ ssh-add ~/.ssh/PCWIN10(你自己的私钥的路径)</div></pre></td></tr></table></figure></p>\n<p>0x4:本地测试是否已经正常<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>\n<p>已经认证成功。</p>\n<p>0x4:将https提交类型的remote设置为ssh类型<br>查看当前本地仓库的远程仓库链接，发现是https类型的，提交代码的时候会要求输入github的帐号和密码，比较麻烦，我们将它改成ssh类型的，加上之前设置的ssh key，就可以实现免密码提交代码了。Let’s do it！<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (fetch)</div><div class=\"line\">origin  https://github.com/yourname/My_Blog.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x5:更改远程仓库链接为ssh类型<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote <span class=\"built_in\">set</span>-url origin git@github.com:你的github用户名/你的远程仓库名.git</div></pre></td></tr></table></figure></p>\n<p>再次查看远程仓库链接<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote -v</div><div class=\"line\">origin  git@github.com:yourname/xxx.git (fetch)</div><div class=\"line\">origin  git@github.com:xxxx/xxx.git (push)</div></pre></td></tr></table></figure></p>\n<p>0x6:在”~/.ssh”下新建一个名为config的配置文件，内容如下:<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat ~/.ssh/config</div><div class=\"line\">Host github.com</div><div class=\"line\">        HostName github.com</div><div class=\"line\">        PreferredAuthentications publickey</div><div class=\"line\">        IdentityFile ~/.ssh/PCWIN10</div></pre></td></tr></table></figure></p>\n<p>0x7: 使用密钥来登录github进行操作，免除输入帐号，密码的麻烦。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi xxxx! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.(测试通过，说明咱们已经成功利用ssh密钥登录了)</div><div class=\"line\"></div><div class=\"line\">$ git push（提交一下本地的代码）</span></div></pre></td></tr></table></figure></p>\n<p>ps: ssh-agent</p>\n<blockquote>\n<p>ssh-agent是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent其实就是一个密钥管理器，运行ssh-agent以后，使用ssh-add将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p>\n</blockquote>"},{"title":"Learn Markdown","date":"2016-07-22T14:29:18.000Z","_content":"# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","source":"_posts/Learn-Markdown.md","raw":"---\ntitle: Learn Markdown\ndate: 2016-07-22 22:29:18\ntags:\n- markdown\n- 入坑\n---\n# 一级标题哦\n`# 一级标题哦`\n<!-- more -->\n# 列表哦\n- 无序列表1\n- 无序列表2\n\n`- 列表`\n  1. 有序列表1\n  2. 有序列表2\n`1.空格 列表名称`\n***\n# 引用\n引用操作即在引用内容之前加`>`即可\n例如：\n> 这是引用内容哦，亲\n\n# 图片与链接\n链接用`[]()`表示，例如：`[Google](https://www.google.com)`\n[百度](https://www.baidu.com)\n\n# kkk\n``` java\npublic class animal{\n\n  private void(){\n\n      System.out.println(\"Hello World\");\n\n  }\n}\n\n  ```\n# hello python\n\n``` python\n#-*coding=utf-8-*\nimport urllib2\nimport base64\nimport pwn\ndef welcome():\n  print \"Hello python\"\n\n```\n# hello cpp\n``` cpp\n\n#include <stdio.h>\nint mian(){\n\n  cout<<\"hello world!\";\n\n  return 0;\n}  \n ```\n","slug":"Learn-Markdown","published":1,"updated":"2016-12-15T07:00:09.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588vs000czgtodm29k420","content":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br><a id=\"more\"></a></p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"external\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\" data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"一级标题哦\"><a href=\"#一级标题哦\" class=\"headerlink\" title=\"一级标题哦\"></a>一级标题哦</h1><p><code># 一级标题哦</code><br>","more":"</p>\n<h1 id=\"列表哦\"><a href=\"#列表哦\" class=\"headerlink\" title=\"列表哦\"></a>列表哦</h1><ul>\n<li>无序列表1</li>\n<li>无序列表2</li>\n</ul>\n<p><code>- 列表</code></p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2<br><code>1.空格 列表名称</code></li>\n</ol>\n<hr>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p>引用操作即在引用内容之前加<code>&gt;</code>即可<br>例如：</p>\n<blockquote>\n<p>这是引用内容哦，亲</p>\n</blockquote>\n<h1 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h1><p>链接用<code>[]()</code>表示，例如：<code>[Google](https://www.google.com)</code><br><a href=\"https://www.baidu.com\">百度</a></p>\n<h1 id=\"kkk\"><a href=\"#kkk\" class=\"headerlink\" title=\"kkk\"></a>kkk</h1><figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">animal</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">void</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">      System.out.println(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"hello-python\"><a href=\"#hello-python\" class=\"headerlink\" title=\"hello python\"></a>hello python</h1><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#-*coding=utf-8-*</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib2</div><div class=\"line\"><span class=\"keyword\">import</span> base64</div><div class=\"line\"><span class=\"keyword\">import</span> pwn</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">welcome</span><span class=\"params\">()</span>:</span></div><div class=\"line\">  <span class=\"keyword\">print</span> <span class=\"string\">\"Hello python\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"hello-cpp\"><a href=\"#hello-cpp\" class=\"headerlink\" title=\"hello cpp\"></a>hello cpp</h1><figure class=\"highlight cpp\"data-lang=\" cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mian</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world!\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"在Ubuntu16.04上配置peda","date":"2016-11-20T11:25:18.000Z","_content":"# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","source":"_posts/GDB-peda.md","raw":"---\ntitle: 在Ubuntu16.04上配置peda\ndate: 2016-11-20 19:25:18\ncategories: Linux\ntags:\n- GDB\n- Linux\n- Debugger\n- peda\n---\n# 在Ubuntu16.04上配置peda\n\n\n#### 0x1.peda是什么？\n从github上摘抄一段关于peda的介绍如下:\n``` \npeda\nPEDA - Python Exploit Development Assistance for GDB\nKey Features:\n\n    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.\n    Add commands to support debugging and exploit development (for a full list of commands use peda help):\n        aslr -- Show/set ASLR setting of GDB\n        checksec -- Check for various security options of binary\n        dumpargs -- Display arguments passed to a function when stopped at a call instruction\n        dumprop -- Dump all ROP gadgets in specific memory range\n        elfheader -- Get headers information from debugged ELF file\n        elfsymbol -- Get non-debugging symbol information from an ELF file\n        lookup -- Search for all addresses/references to addresses which belong to a memory range\n        patch -- Patch memory start at an address with string/hexstring/int\n        pattern -- Generate, search, or write a cyclic pattern to memory\n        procinfo -- Display various info from /proc/pid/\n        pshow -- Show various PEDA options and other settings\n        pset -- Set various PEDA options and other settings\n        readelf -- Get headers information from an ELF file\n        ropgadget -- Get common ROP gadgets of binary or library\n        ropsearch -- Search for ROP gadgets in memory\n        searchmem|find -- Search for a pattern in memory; support regex search\n        shellcode -- Generate or download common shellcodes.\n        skeleton -- Generate python exploit code template\n        vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n        xormem -- XOR a memory region with a key\n```\n<!-- more -->\n#### 0x2. 安装方法\n```\n    git clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n\n#### 0x3. 尝试安装peda\n```\nstar-chen@starchen-vb:~$ cat peda_install.sh \ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n\nstar-chen@starchen-vb:~$ sudo sh peda_install.sh \n正克隆到 '/home/star-chen/peda'...\nremote: Counting objects: 304, done.\nremote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304\n接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.\n处理 delta 中: 100% (192/192), 完成.\n检查连接... 完成。\nDONE! debug your program with gdb and enjoy\nstar-chen@starchen-vb:~$ gdb\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\".\ngdb-peda$ \n\n```\n安装完成。\n   \n   ","slug":"GDB-peda","published":1,"updated":"2016-12-15T07:00:09.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588vx000fzgtoxmhav97d","content":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>\n","excerpt":"<h1 id=\"在Ubuntu16-04上配置peda\"><a href=\"#在Ubuntu16-04上配置peda\" class=\"headerlink\" title=\"在Ubuntu16.04上配置peda\"></a>在Ubuntu16.04上配置peda</h1><h4 id=\"0x1-peda是什么？\"><a href=\"#0x1-peda是什么？\" class=\"headerlink\" title=\"0x1.peda是什么？\"></a>0x1.peda是什么？</h4><p>从github上摘抄一段关于peda的介绍如下:<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">peda</div><div class=\"line\">PEDA - Python Exploit Development Assistance for GDB</div><div class=\"line\">Key Features:</div><div class=\"line\"></div><div class=\"line\">    Enhance the display of gdb: colorize and display disassembly codes, registers, memory information during debugging.</div><div class=\"line\">    Add commands to support debugging and exploit development (for a full list of commands use peda help):</div><div class=\"line\">        aslr -- Show/set ASLR setting of GDB</div><div class=\"line\">        checksec -- Check for various security options of binary</div><div class=\"line\">        dumpargs -- Display arguments passed to a function when stopped at a call instruction</div><div class=\"line\">        dumprop -- Dump all ROP gadgets in specific memory range</div><div class=\"line\">        elfheader -- Get headers information from debugged ELF file</div><div class=\"line\">        elfsymbol -- Get non-debugging symbol information from an ELF file</div><div class=\"line\">        lookup -- Search for all addresses/references to addresses which belong to a memory range</div><div class=\"line\">        patch -- Patch memory start at an address with string/hexstring/int</div><div class=\"line\">        pattern -- Generate, search, or write a cyclic pattern to memory</div><div class=\"line\">        procinfo -- Display various info from /proc/pid/</div><div class=\"line\">        pshow -- Show various PEDA options and other settings</div><div class=\"line\">        pset -- Set various PEDA options and other settings</div><div class=\"line\">        readelf -- Get headers information from an ELF file</div><div class=\"line\">        ropgadget -- Get common ROP gadgets of binary or library</div><div class=\"line\">        ropsearch -- Search for ROP gadgets in memory</div><div class=\"line\">        searchmem|find -- Search for a pattern in memory; support regex search</div><div class=\"line\">        shellcode -- Generate or download common shellcodes.</div><div class=\"line\">        skeleton -- Generate python exploit code template</div><div class=\"line\">        vmmap -- Get virtual mapping address ranges of section(s) in debugged process</div><div class=\"line\">        xormem -- XOR a memory region with a key</div></pre></td></tr></table></figure></p>","more":"<h4 id=\"0x2-安装方法\"><a href=\"#0x2-安装方法\" class=\"headerlink\" title=\"0x2. 安装方法\"></a>0x2. 安装方法</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div></pre></td></tr></table></figure>\n<h4 id=\"0x3-尝试安装peda\"><a href=\"#0x3-尝试安装peda\" class=\"headerlink\" title=\"0x3. 尝试安装peda\"></a>0x3. 尝试安装peda</h4><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ cat peda_install.sh </div><div class=\"line\">git clone https://github.com/longld/peda.git ~/peda</div><div class=\"line\">echo &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinit</div><div class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</div><div class=\"line\"></div><div class=\"line\">star-chen@starchen-vb:~$ sudo sh peda_install.sh </div><div class=\"line\">正克隆到 &apos;/home/star-chen/peda&apos;...</div><div class=\"line\">remote: Counting objects: 304, done.</div><div class=\"line\">remote: Total 304 (delta 0), reused 0 (delta 0), pack-reused 304</div><div class=\"line\">接收对象中: 100% (304/304), 197.98 KiB | 45.00 KiB/s, 完成.</div><div class=\"line\">处理 delta 中: 100% (192/192), 完成.</div><div class=\"line\">检查连接... 完成。</div><div class=\"line\">DONE! debug your program with gdb and enjoy</div><div class=\"line\">star-chen@starchen-vb:~$ gdb</div><div class=\"line\">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1</div><div class=\"line\">Copyright (C) 2016 Free Software Foundation, Inc.</div><div class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div><div class=\"line\">This is free software: you are free to change and redistribute it.</div><div class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</div><div class=\"line\">and &quot;show warranty&quot; for details.</div><div class=\"line\">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</div><div class=\"line\">Type &quot;show configuration&quot; for configuration details.</div><div class=\"line\">For bug reporting instructions, please see:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</div><div class=\"line\">Find the GDB manual and other documentation resources online at:</div><div class=\"line\">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</div><div class=\"line\">For help, type &quot;help&quot;.</div><div class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</div><div class=\"line\">gdb-peda$</div></pre></td></tr></table></figure>\n<p>安装完成。</p>"},{"title":"利用Github的webhook和tornado实现代码自动部署","date":"2016-12-04T02:39:31.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","source":"_posts/Github-Webhook.md","raw":"---\ntitle: 利用Github的webhook和tornado实现代码自动部署\ndate: 2016-12-04 10:39:31\ncategories:\n- Program\ntags:\n- Github\n- Webhook\n- 自动部署\n- code deploy\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n\n### 0x1:需求来源  \n\n本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。  \n<!-- more -->\n### 0x2:服务端代码\n\n服务端代码的思路很清晰。 \n\n1. 监听来自webhook的消息，并验证是否合法  \n2. 拉取git仓库的内容至本地临时仓库\n3. 拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  \n\n正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。\n\n```python\nimport tornado.ioloop\nimport tornado.web\nimport json\nimport sys\nimport os\n\n#pull my blog from github\ndef PullBlog():\n\tos.system(\"cd ~/blog/My_Blog&&git pull https://github.com/007xiaoxingxing/My_Blog.git&&cp -r public/* /var/blog/\")\n\tprint \"pull blog\"\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"Hello Guys!\");\n\tdef post(self):\n\t\tjson_str=self.request.body\n\t\tdata=json.loads(json_str)\n        #这里的内容需要根据github的post数据自行进行判断，我这里一切从简了\n\t\ttarget= data[\"repository\"][\"name\"]\n\t\tif target == \"My_Blog\":\n\t\t\tPullBlog()\n\t\t\tprint \"ooo\"\n\t\tif target == \"photo_manage\":\n\t\t\tPullPhoto()\napplication = tornado.web.Application([\n\t(r\"/\",MainHandler),\n])\n\nif __name__ == \"__main__\":\n\tapplication.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\n这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。\n\n### 0x3:Github代码仓库相关设置\n\n在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。\n\n![image](/blogimg/githook.png)\n\n设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。\n\n```json\n{\n  \"ref\": \"refs/heads/master\",\n  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",\n  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n  \"created\": false,\n  \"deleted\": false,\n  \"forced\": false,\n  \"base_ref\": null,\n  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",\n  \"commits\": [\n    {\n      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n      \"distinct\": true,\n      \"message\": \"PIL grab\",\n      \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n      \"author\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"committer\": {\n        \"name\": \"007xiaoxing\",\n        \"email\": \"chanxing9@gmail.com\",\n        \"username\": \"007xiaoxingxing\"\n      },\n      \"added\": [\n        \"public/2016/12/04/PIL-Grab/index.html\",\n        \"public/archives/2016/12/index.html\",\n        \"public/tags/PIL/index.html\",\n        \"public/tags/python/index.html\",\n        \"source/_posts/PIL-Grab.md\"\n      ],\n      \"removed\": [\n\n      ],\n      \"modified\": [\n        \"db.json\",\n        略去一万字.....\n      ]\n    }\n  ],\n  \"head_commit\": {\n    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",\n    \"distinct\": true,\n    \"message\": \"PIL grab\",\n    \"timestamp\": \"2016-12-04T10:38:02+08:00\",\n    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",\n    \"author\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"committer\": {\n      \"name\": \"007xiaoxing\",\n      \"email\": \"chanxing9@gmail.com\",\n      \"username\": \"007xiaoxingxing\"\n    },\n    \"added\": [\n      \"public/2016/12/04/PIL-Grab/index.html\",\n      \"public/archives/2016/12/index.html\",\n      \"public/tags/PIL/index.html\",\n      \"public/tags/python/index.html\",\n      \"source/_posts/PIL-Grab.md\"\n    ],\n    \"removed\": [\n\n    ],\n    \"modified\": [\n      \"db.json\",\n      这都不重要，略.....\n      \"public/tags/萌新第一次/index.html\"\n    ]\n  },\n  \"repository\": {\n    \"id\": 64537807,\n    \"name\": \"My_Blog\",\n    \"full_name\": \"007xiaoxingxing/My_Blog\",\n    \"owner\": {\n      \"name\": \"007xiaoxingxing\",\n      \"email\": \"994983825@qq.com\"\n    },\n    \"private\": false,\n    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",\n    鬼知道这中间少了些什么？滑稽 - -！\n    \"site_admin\": false\n  }\n}\n```\n\n数据内容十分丰富，包括了你对仓库的操作，仓库改变等等......  \n\n这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。\n\n### 0x4:服务的运行\n\n最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。\n\n```bash\n$nobub python git_deploy.py &\n```\n\nnohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。","slug":"Github-Webhook","published":1,"updated":"2016-12-15T07:00:09.421Z","layout":"post","photos":[],"link":"","_id":"cj2k588w0000izgtobtk0txf3","content":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\" data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>\n","excerpt":"<h3 id=\"0x1-需求来源\"><a href=\"#0x1-需求来源\" class=\"headerlink\" title=\"0x1:需求来源\"></a>0x1:需求来源</h3><p>本博客使用的hexo生成的静态页面，整个博客代码是托管在github上的。这样可以方便我在不同的设备上随时同步位于github上的博客代码，并撰写新的内容。写博文的问题得到了解决，但是每次更新服务器上的内容时却要登录服务器去拉取github上的内容，很是繁琐。github提供了webhook功能，用户对仓库操作引起的事件，例如push，pull等可以触发github利用webhook向远程服务器发起链接，并携带一定的参数，这样的话，在远程服务器监听来自webhook的请求就可以执行代码更新操作了哇。<br>","more":"</p>\n<h3 id=\"0x2-服务端代码\"><a href=\"#0x2-服务端代码\" class=\"headerlink\" title=\"0x2:服务端代码\"></a>0x2:服务端代码</h3><p>服务端代码的思路很清晰。 </p>\n<ol>\n<li>监听来自webhook的消息，并验证是否合法  </li>\n<li>拉取git仓库的内容至本地临时仓库</li>\n<li>拷贝代码至web根目录，并删除web部署目录中的.git目录，防止代码泄露  </li>\n</ol>\n<p>正好最近在学习python，就利用python的tornado框架写几句话完成服务端的工作吧。</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#pull my blog from github</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">PullBlog</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\tos.system(<span class=\"string\">\"cd ~/blog/My_Blog&amp;&amp;git pull https://github.com/007xiaoxingxing/My_Blog.git&amp;&amp;cp -r public/* /var/blog/\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"pull blog\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"Hello Guys!\"</span>);</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tjson_str=self.request.body</div><div class=\"line\">\t\tdata=json.loads(json_str)</div><div class=\"line\">        <span class=\"comment\">#这里的内容需要根据github的post数据自行进行判断，我这里一切从简了</span></div><div class=\"line\">\t\ttarget= data[<span class=\"string\">\"repository\"</span>][<span class=\"string\">\"name\"</span>]</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"My_Blog\"</span>:</div><div class=\"line\">\t\t\tPullBlog()</div><div class=\"line\">\t\t\t<span class=\"keyword\">print</span> <span class=\"string\">\"ooo\"</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> target == <span class=\"string\">\"photo_manage\"</span>:</div><div class=\"line\">\t\t\tPullPhoto()</div><div class=\"line\">application = tornado.web.Application([</div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapplication.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>这段代码是不是很眼熟？Yes，它就是tornado的Hello World，我在其中增添了获取post内容，并把接收到的json字符串解析成python对象，如果符合要求就进行代码更新操作。</p>\n<h3 id=\"0x3-Github代码仓库相关设置\"><a href=\"#0x3-Github代码仓库相关设置\" class=\"headerlink\" title=\"0x3:Github代码仓库相关设置\"></a>0x3:Github代码仓库相关设置</h3><p>在github代码仓库需要设置webhook的远程服务器地址，post的数据格式和密钥。</p>\n<p><img src=\"/blogimg/githook.png\" alt=\"image\"></p>\n<p>设置好webhook的url，并点击Add webhook按钮后，github的服务器会第一次发送数据到你设置的url地址上，我们来看一下它都发送了些什么数据。</p>\n<figure class=\"highlight\"data-lang=\"\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  \"ref\": \"refs/heads/master\",</div><div class=\"line\">  \"before\": \"2db041797c019dd3f04b45203ba4ad09ffef2654\",</div><div class=\"line\">  \"after\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">  \"created\": false,</div><div class=\"line\">  \"deleted\": false,</div><div class=\"line\">  \"forced\": false,</div><div class=\"line\">  \"base_ref\": null,</div><div class=\"line\">  \"compare\": \"https://github.com/007xiaoxingxing/My_Blog/compare/2db041797c01...454cc4e6bfce\",</div><div class=\"line\">  \"commits\": [</div><div class=\"line\">    &#123;</div><div class=\"line\">      \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">      \"distinct\": true,</div><div class=\"line\">      \"message\": \"PIL grab\",</div><div class=\"line\">      \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">      \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">      \"author\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"committer\": &#123;</div><div class=\"line\">        \"name\": \"007xiaoxing\",</div><div class=\"line\">        \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">        \"username\": \"007xiaoxingxing\"</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"added\": [</div><div class=\"line\">        \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">        \"public/archives/2016/12/index.html\",</div><div class=\"line\">        \"public/tags/PIL/index.html\",</div><div class=\"line\">        \"public/tags/python/index.html\",</div><div class=\"line\">        \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">      ],</div><div class=\"line\">      \"removed\": [</div><div class=\"line\"></div><div class=\"line\">      ],</div><div class=\"line\">      \"modified\": [</div><div class=\"line\">        \"db.json\",</div><div class=\"line\">        略去一万字.....</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  \"head_commit\": &#123;</div><div class=\"line\">    \"id\": \"454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"tree_id\": \"09538c4e1f362018d9e230d4de2225ca469fb32a\",</div><div class=\"line\">    \"distinct\": true,</div><div class=\"line\">    \"message\": \"PIL grab\",</div><div class=\"line\">    \"timestamp\": \"2016-12-04T10:38:02+08:00\",</div><div class=\"line\">    \"url\": \"https://github.com/007xiaoxingxing/My_Blog/commit/454cc4e6bfce259cd29fbc112c9b3714e0750ab7\",</div><div class=\"line\">    \"author\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"committer\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxing\",</div><div class=\"line\">      \"email\": \"chanxing9@gmail.com\",</div><div class=\"line\">      \"username\": \"007xiaoxingxing\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"added\": [</div><div class=\"line\">      \"public/2016/12/04/PIL-Grab/index.html\",</div><div class=\"line\">      \"public/archives/2016/12/index.html\",</div><div class=\"line\">      \"public/tags/PIL/index.html\",</div><div class=\"line\">      \"public/tags/python/index.html\",</div><div class=\"line\">      \"source/_posts/PIL-Grab.md\"</div><div class=\"line\">    ],</div><div class=\"line\">    \"removed\": [</div><div class=\"line\"></div><div class=\"line\">    ],</div><div class=\"line\">    \"modified\": [</div><div class=\"line\">      \"db.json\",</div><div class=\"line\">      这都不重要，略.....</div><div class=\"line\">      \"public/tags/萌新第一次/index.html\"</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  \"repository\": &#123;</div><div class=\"line\">    \"id\": 64537807,</div><div class=\"line\">    \"name\": \"My_Blog\",</div><div class=\"line\">    \"full_name\": \"007xiaoxingxing/My_Blog\",</div><div class=\"line\">    \"owner\": &#123;</div><div class=\"line\">      \"name\": \"007xiaoxingxing\",</div><div class=\"line\">      \"email\": \"994983825@qq.com\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    \"private\": false,</div><div class=\"line\">    \"html_url\": \"https://github.com/007xiaoxingxing/My_Blog\",</div><div class=\"line\">    鬼知道这中间少了些什么？滑稽 - -！</div><div class=\"line\">    \"site_admin\": false</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>数据内容十分丰富，包括了你对仓库的操作，仓库改变等等……  </p>\n<p>这些数据都可以在服务端进行获取，验证等，然后自定义操作即可。</p>\n<h3 id=\"0x4-服务的运行\"><a href=\"#0x4-服务的运行\" class=\"headerlink\" title=\"0x4:服务的运行\"></a>0x4:服务的运行</h3><p>最后只需要将自动部署的服务端跑起来即可。我选择使用nohub将服务挂起来在后台运行。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$nobub</span> python git_deploy.py &amp;</div></pre></td></tr></table></figure>\n<p>nohub会把后台运行的标准输出重定向到当前目录的nohub.dat中，在这之中我们可以查看相关操作日志。Ok，大功告成，以后就可以直接提交代码的github代码仓库，服务器就能够自动的更新博客文章了。</p>"},{"title":"Learn VIM","date":"2016-11-29T11:25:18.000Z","_content":"###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","source":"_posts/Learn_VIM.md","raw":"---\ntitle: Learn VIM\ndate: 2016-11-29 19:25:18\ncategories: Linux\ntags:\n- VIM\n- Linux\n- Edtor\n---\n###  动手学VIM编辑器\n0x1:What is VIM editor?\n> vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\nvi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。\nVim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。\n\n---摘自百度百科  \n<!-- more -->\n0x2:命令模式情形下的一些命令  \n进入命令模式的方法：ESC\n  \n    \n    \n#查看VIM编辑器的帮助信息。\n>:help\n\n![image](/blogimg/vim-help.png)\n\n#正常退出退出编辑器\n>:q  \n\n#保存并退出编辑器\n>:wq\n\n#保存退出编辑器，并将文件存储为filename\n>:wq filename\n\n#强制退出，不保存\n>:q!\n\n#打开某文件(需保存当前文件，否则会报错)\n>:e /root/file\n\n#强制打开某文件\n>:e! /root/file\n\n#读取某文件，追加到当前文件末尾\n>:r /root/file\n\n#保存文件\n>:w (文件路径)\n\n0x3:插入模式的一些快捷按键操作\n\n#进入插入模式，将光标放在当前光标之后\n>a\n\n#进入插入模式，将光标放在当前光标所在的行尾\n>A\n\n#在当前光标的下一行插入新行，并将光标放在新行的行首\n>o\n\n#在光标的前一行插入一行，并将光标放在行首\n>O\n\n#在光标所在位置进入插入模式,貌似这个用得最多了\n>i\n\n0x4 移动光标\n在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。\n>k:向上移动光标  \n\n>j:向下移动光标  \n\n>h:向前移动光标  \n\n>l:向右移动光标  \n\n这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。\n\n0x5 删除文本  \n使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  \n\n>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 \n\n>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  \n\n>dw :删除光标处的单词，包括词尾的空格。  \n\n>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  \n\n>d^ :删除当前光标所在位置到行首的所有字符。  \n\n>d$ :删除当前光标到行尾的所有字符。  \n\n>J :将当前光标所在行和下一行合并（删除行尾的换行符）\n\n0x6 撤销和恢复  \n\n>u :撤销上一步操作，可多次使用。  \n\n>Ctrl+r :放弃上一次撤销操作，可使用多次。\n\n0x7 快速移动光标  \n\n>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  \n\n>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  \n\n>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  \n\n>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  \n\n>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  \n\n>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  \n\n>g :跳到当前文本的第一行，也可以使用1G。  \n\n>G :跳到当前文本的最后一行。  \n\n>nG :跳转到第n行，其中n为一个正整数。\n\n当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！\n\n0x8 查找功能  \n在命令模式下，正向查找的命令为“/”\n>/pattern :pattern为需要查找的字符串，可以是正则表达式。  \n\n在正向查找状态下\n\n>n :跳转到下一条匹配的内容。  \n>N :跳转到上一条匹配的内容。\n\n反向查找的命令为“?”  \n\n>?pattern  \n\n在反向查找状态下\n>n :跳转到上一条匹配的内容。  \n>N :跳转到下一条匹配的内容。\n\n0x9 替换功能  \n替换使用的命令是s，基本格式如下：  \n\n>: s/pattern1/pattern2/  \n\npattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。\n\n谨慎的查找替换  \n\n>:%s/pattern1/pattern2/gc  \n\n执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。\n\n\n以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。\n\n\n\n\n\n\n参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著\n","slug":"Learn_VIM","published":1,"updated":"2016-12-15T07:00:09.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588w2000lzgtox5k75875","content":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br><a id=\"more\"></a><br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>\n","excerpt":"<h3 id=\"动手学VIM编辑器\"><a href=\"#动手学VIM编辑器\" class=\"headerlink\" title=\"动手学VIM编辑器\"></a>动手学VIM编辑器</h3><p>0x1:What is VIM editor?</p>\n<blockquote>\n<p>vi编辑器通常被简称为vi，而vi又是visual editor的简称  。它在Linux上的地位就像Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。<br>vi 编辑器并不是一个排版程序，它不像Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。没有菜单，只有命令，且命令繁多。vi有3种基本工作模式：命令行模式、文本输入模式和末行模式。<br>Vim是vi的加强版，比vi更容易使用。vi的命令几乎全部都可以在vim上使用。</p>\n</blockquote>\n<p>—摘自百度百科<br>","more":"<br>0x2:命令模式情形下的一些命令<br>进入命令模式的方法：ESC</p>\n<p>#查看VIM编辑器的帮助信息。</p>\n<blockquote>\n<p>:help</p>\n</blockquote>\n<p><img src=\"/blogimg/vim-help.png\" alt=\"image\"></p>\n<p>#正常退出退出编辑器</p>\n<blockquote>\n<p>:q  </p>\n</blockquote>\n<p>#保存并退出编辑器</p>\n<blockquote>\n<p>:wq</p>\n</blockquote>\n<p>#保存退出编辑器，并将文件存储为filename</p>\n<blockquote>\n<p>:wq filename</p>\n</blockquote>\n<p>#强制退出，不保存</p>\n<blockquote>\n<p>:q!</p>\n</blockquote>\n<p>#打开某文件(需保存当前文件，否则会报错)</p>\n<blockquote>\n<p>:e /root/file</p>\n</blockquote>\n<p>#强制打开某文件</p>\n<blockquote>\n<p>:e! /root/file</p>\n</blockquote>\n<p>#读取某文件，追加到当前文件末尾</p>\n<blockquote>\n<p>:r /root/file</p>\n</blockquote>\n<p>#保存文件</p>\n<blockquote>\n<p>:w (文件路径)</p>\n</blockquote>\n<p>0x3:插入模式的一些快捷按键操作</p>\n<p>#进入插入模式，将光标放在当前光标之后</p>\n<blockquote>\n<p>a</p>\n</blockquote>\n<p>#进入插入模式，将光标放在当前光标所在的行尾</p>\n<blockquote>\n<p>A</p>\n</blockquote>\n<p>#在当前光标的下一行插入新行，并将光标放在新行的行首</p>\n<blockquote>\n<p>o</p>\n</blockquote>\n<p>#在光标的前一行插入一行，并将光标放在行首</p>\n<blockquote>\n<p>O</p>\n</blockquote>\n<p>#在光标所在位置进入插入模式,貌似这个用得最多了</p>\n<blockquote>\n<p>i</p>\n</blockquote>\n<p>0x4 移动光标<br>在进行编辑的时候，可能需要移动光标位置，进行修改或者输入新的内容，除了使用方向键之外，在命令模式下，使用hmjkl也能够快速的移动光标。</p>\n<blockquote>\n<p>k:向上移动光标  </p>\n<p>j:向下移动光标  </p>\n<p>h:向前移动光标  </p>\n<p>l:向右移动光标  </p>\n</blockquote>\n<p>这种感觉有点像玩FPS游戏的wasd方式，不过是把操作放在了右手上而已。用起来感觉还蛮不错的。</p>\n<p>0x5 删除文本<br>使用退格键或者delete键可以删除当前光标前或所在处的字符，然而在VIM中还可以使用命令来删除我们想删除的内容哦。  </p>\n<blockquote>\n<p>x :删除当前光标所在处的字符，如果想删除多个字符，连续着按。 </p>\n<p>dd  :删除当前光标所在行，如果想删除多行，可以用ndd的方式，n为你想删除的行数。  </p>\n<p>dw :删除光标处的单词，包括词尾的空格。  </p>\n<p>de :删除当前光标所在处的单词，和dw的区别在于保留了单词词尾的空格。  </p>\n<p>d^ :删除当前光标所在位置到行首的所有字符。  </p>\n<p>d$ :删除当前光标到行尾的所有字符。  </p>\n<p>J :将当前光标所在行和下一行合并（删除行尾的换行符）</p>\n</blockquote>\n<p>0x6 撤销和恢复  </p>\n<blockquote>\n<p>u :撤销上一步操作，可多次使用。  </p>\n<p>Ctrl+r :放弃上一次撤销操作，可使用多次。</p>\n</blockquote>\n<p>0x7 快速移动光标  </p>\n<blockquote>\n<p>b :将光标移动到当前光标所在单词的前一个单词的首字母，可以使nb，即移动n个单词的位置。  </p>\n<p>w :将光标移动到当前光标的后一个单词的首字母，可以使nw，即移动到n个单词后的首字母。  </p>\n<p>e :移动到后一个单词的尾字母，可以使ne，效果与之前的效果类似。  </p>\n<p>ge :与e的作用相反，移动光标至前一个单词的尾字母，也可是是nge，n表示需要跨过的单词数目。  </p>\n<p>^ :快速移动光标到行首，Home键，0键也可以移动光标的行首。  </p>\n<p>$ :快速移动光标到行尾，End键也可以移动光标到行尾。n$,可以将光标移动到当前行之后n-1行的末尾。  </p>\n<p>g :跳到当前文本的第一行，也可以使用1G。  </p>\n<p>G :跳到当前文本的最后一行。  </p>\n<p>nG :跳转到第n行，其中n为一个正整数。</p>\n</blockquote>\n<p>当然，咱们的鼠标也是可以定位光标的，哪里需要点哪里！</p>\n<p>0x8 查找功能<br>在命令模式下，正向查找的命令为“/”</p>\n<blockquote>\n<p>/pattern :pattern为需要查找的字符串，可以是正则表达式。  </p>\n</blockquote>\n<p>在正向查找状态下</p>\n<blockquote>\n<p>n :跳转到下一条匹配的内容。<br>N :跳转到上一条匹配的内容。</p>\n</blockquote>\n<p>反向查找的命令为“?”  </p>\n<blockquote>\n<p>?pattern  </p>\n</blockquote>\n<p>在反向查找状态下</p>\n<blockquote>\n<p>n :跳转到上一条匹配的内容。<br>N :跳转到下一条匹配的内容。</p>\n</blockquote>\n<p>0x9 替换功能<br>替换使用的命令是s，基本格式如下：  </p>\n<blockquote>\n<p>: s/pattern1/pattern2/  </p>\n</blockquote>\n<p>pattern1表示要查找的文本，pattern2为替换后的文本，“/”为分隔符，分隔符也可以是“：”。</p>\n<p>谨慎的查找替换  </p>\n<blockquote>\n<p>:%s/pattern1/pattern2/gc  </p>\n</blockquote>\n<p>执行这条命令之后，VIM会查找到所有匹配pattern1的字符串，并提示用户是否需要进行替换。</p>\n<p>以上是VIM编辑器的一些基础的使用方法，其功能还很强大，待之后用到了再补充吧。</p>\n<p>参考书：《Linux 命令、编辑器与SHELL编程》 王刚等著</p>"},{"title":"搭建OpenWRT编译开发环境","date":"2016-11-28T11:25:18.000Z","_content":"本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","source":"_posts/OpenWRT-BuildEnvironMent.md","raw":"---\ntitle:  搭建OpenWRT编译开发环境 \ndate: 2016-11-28 19:25:18\ncategories: Linux\ntags:\n- Linux\n- openwrt\n- enviroment\n---\n本次搭建编译环境所需的准备工作：\n1. 操作系统：物理机或者虚拟机安装----Ubuntu 16.10\n2. 预备知识：了解一点点Linux终端的基本操作\n<!-- more -->\nLet's go!  \n首先还是更新一下系统：\n\n``` bash\n\n  star-chen@starchen-op:~$ sudo apt-get update && apt-get dist-upgrade \n\n```\n接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：[OpenWRT官方步骤](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：\n``` bash\n\nstar-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev\n\n```\n软件包安装完毕之后，测试一下git命令是否可用：\n``` bash\nstar-chen@starchen-op:~$ git\nusage: git [--version] [--help] [-C <path>] [-c name=value]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n           此处省略一万字.......\n\n```\n\n经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：\n``` bash\nstar-chen@starchen-op:~$ mkdir OP1505\n\n```\n进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：\n``` bash\nstar-chen@starchen-op:~$ cd OP1505/\nstar-chen@starchen-op:~$ git clone -b chaos_calmer git://github.com/openwrt/openwrt.git\n\n```\n更新并安装软件包：\n``` bash\n cd openwrt\n./scripts/feeds update -a\n./scripts/feeds install -a\n\n```\n根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：\n``` bash\nmake menuconfig\n\n```\nOK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：\n\n![image](/blogimg/op-makemenu.png)\n\n就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。\n``` bash\n\nmake j=2 V=99\n\n```\n编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。","slug":"OpenWRT-BuildEnvironMent","published":1,"updated":"2016-12-15T07:00:09.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588w3000ozgtolw18opsc","content":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作<a id=\"more\"></a>\nLet’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\" target=\"_blank\" rel=\"external\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>\n","excerpt":"<p>本次搭建编译环境所需的准备工作：</p>\n<ol>\n<li>操作系统：物理机或者虚拟机安装—-Ubuntu 16.10</li>\n<li>预备知识：了解一点点Linux终端的基本操作","more":"Let’s go!<br>首先还是更新一下系统：</li>\n</ol>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get update &amp;&amp; apt-get dist-upgrade</div></pre></td></tr></table></figure>\n<p>接下来参考OpenWRT官方网站给出的搭建编译环境所需要进行的软件包的安装步骤进行安装，官网步骤网址：<a href=\"https://wiki.openwrt.org/doc/howto/buildroot.exigence\">OpenWRT官方步骤</a><br>由于我使用的是Ubuntu16.10 64bit系统，所以需要执行的安装命令为：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">star-chen@starchen-op:~$ sudo apt-get install git-core mercurial build-essential subversion libncurses5-dev zlib1g-dev gawk gcc-multilib flex git-core gettext libssl-dev</div></pre></td></tr></table></figure></p>\n<p>软件包安装完毕之后，测试一下git命令是否可用：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ git</div><div class=\"line\">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name=value]</div><div class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</div><div class=\"line\">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</div><div class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</div><div class=\"line\">           &lt;<span class=\"built_in\">command</span>&gt; [&lt;args&gt;]</div><div class=\"line\">           此处省略一万字.......</div></pre></td></tr></table></figure></p>\n<p>经测试，git命令可用，接下来创建一个新的目录用来存放OpenWRT源码：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ mkdir OP1505</div></pre></td></tr></table></figure></p>\n<p>进入OP1505目录并从git仓库克隆OpenWRT 15.05(chaos_calmer)分支：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-op:~$ <span class=\"built_in\">cd</span> OP1505/</div><div class=\"line\">star-chen@starchen-op:~$ git <span class=\"built_in\">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git</div></pre></td></tr></table></figure></p>\n<p>更新并安装软件包：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"built_in\">cd</span> openwrt</div><div class=\"line\">./scripts/feeds update <span class=\"_\">-a</span></div><div class=\"line\">./scripts/feeds install <span class=\"_\">-a</span></div></pre></td></tr></table></figure></p>\n<p>根据自己的需要设置编译条件，生成makefile（另一篇专门讲讲这部分）：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make menuconfig</div></pre></td></tr></table></figure></p>\n<p>OK,make menuconfig通过，接下来咱们编译一个x86的固件来爽爽：</p>\n<p><img src=\"/blogimg/op-makemenu.png\" alt=\"image\"></p>\n<p>就以默认参数吧,我给虚拟机分了四个核，4GB内存，这里用两个线程来跑吧。<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">make j=2 V=99</div></pre></td></tr></table></figure></p>\n<p>编译过程中可能需要下载很多文件，所以挂个代理什么的很有必要，不然很多依赖无法下载，造成编译失败，耐心等待吧。编译完成之后，固件将会在openwrt/bin目录下躺好了。</p>"},{"title":"MariaDB创建新用户、新数据库并允许特定用户远程访问","date":"2017-03-11T05:42:03.706Z","_content":"\n### 创建新的可远程访问的数据库用户\n```bash\nMariaDB [(none)]> create user 'user'@'%' identified by 'pass';\n```\n### 创建新的数据库\n```bash\nMariaDB [(none)]> create database newdb;\n\n```\n### 把新创建的数据库授权给新创建的用户\n```bash\nMariaDB [(none)]> grant all privileges on newdb.* to 'user'@'%';\nMariaDB [(none)]> flush privileges;\n```\n","source":"_posts/MariaDB-Create-Remote.md","raw":"---\ntitle: MariaDB创建新用户、新数据库并允许特定用户远程访问\ndate: 2017.3.11 11 13:43\ncategories: Linux\ntags:\n- MariaDB\n- New DB\n- Remote\n---\n\n### 创建新的可远程访问的数据库用户\n```bash\nMariaDB [(none)]> create user 'user'@'%' identified by 'pass';\n```\n### 创建新的数据库\n```bash\nMariaDB [(none)]> create database newdb;\n\n```\n### 把新创建的数据库授权给新创建的用户\n```bash\nMariaDB [(none)]> grant all privileges on newdb.* to 'user'@'%';\nMariaDB [(none)]> flush privileges;\n```\n","slug":"MariaDB-Create-Remote","published":1,"updated":"2017-05-12T06:11:10.872Z","_id":"cj2k588w5000rzgtovvk9kz6w","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"创建新的可远程访问的数据库用户\"><a href=\"#创建新的可远程访问的数据库用户\" class=\"headerlink\" title=\"创建新的可远程访问的数据库用户\"></a>创建新的可远程访问的数据库用户</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create user <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'pass'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建新的数据库\"><a href=\"#创建新的数据库\" class=\"headerlink\" title=\"创建新的数据库\"></a>创建新的数据库</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create database newdb;</div></pre></td></tr></table></figure>\n<h3 id=\"把新创建的数据库授权给新创建的用户\"><a href=\"#把新创建的数据库授权给新创建的用户\" class=\"headerlink\" title=\"把新创建的数据库授权给新创建的用户\"></a>把新创建的数据库授权给新创建的用户</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; grant all privileges on newdb.* to <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">MariaDB [(none)]&gt; flush privileges;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"创建新的可远程访问的数据库用户\"><a href=\"#创建新的可远程访问的数据库用户\" class=\"headerlink\" title=\"创建新的可远程访问的数据库用户\"></a>创建新的可远程访问的数据库用户</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create user <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span> identified by <span class=\"string\">'pass'</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"创建新的数据库\"><a href=\"#创建新的数据库\" class=\"headerlink\" title=\"创建新的数据库\"></a>创建新的数据库</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; create database newdb;</div></pre></td></tr></table></figure>\n<h3 id=\"把新创建的数据库授权给新创建的用户\"><a href=\"#把新创建的数据库授权给新创建的用户\" class=\"headerlink\" title=\"把新创建的数据库授权给新创建的用户\"></a>把新创建的数据库授权给新创建的用户</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [(none)]&gt; grant all privileges on newdb.* to <span class=\"string\">'user'</span>@<span class=\"string\">'%'</span>;</div><div class=\"line\">MariaDB [(none)]&gt; flush privileges;</div></pre></td></tr></table></figure>\n"},{"title":"CentOS 7.2 搭建lnmp环境","date":"2017-03-11T02:46:46.350Z","_content":"\n### Centos7 安装php7\n由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.\n#### 首先rpm安装php7.0的yum源\n```bash\n[root@vultr ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n```\n<!-- more -->\n#### yum安装php7\n```bash\n[root@vultr ~]# yum install php70w\n```\n### yum安装php-fpm\n```bash\n[root@vultr ~]# yum install php70w-fpm\n```\n####  查看php版本\n```bash\n[root@vultr ~]# php -v\nPHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n```\n\n### 安装MariaDB\n\n```bash\n[root@vultr ~]# yum install mariadb-server mariadb\n```\n启动MariaDB\n\n```bash\n[root@vultr ~]# systemctl start mariadb\n```\n刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。\n\n```bash\n[root@vultr ~]# mysql_secure_installation \n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] Y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] Y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] Y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] Y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。\n\n### Nginx+php-fpm，让Nginx能够解析php请求\n\n在安装好Nginx和php-fpm之后，需要配置一下Nginx。\n```\nserver {\n\n\t\tlisten 80;\n\t\tserver_name www.xxx.com;\n\t\t\n\t\troot /var/www/html;\n\t\tindex index.html index.htm index.php;\n\t\t\n\t\tlocation ~ \\.php$ {\n\t\t\t\n\t\t\tinclude fastcgi_params;\n\t\t\tfastcgi_pass 127.0.0.1:9000;\n\t\t\tfastcgi_index index.php;\n\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t\t\n\t\t}\n\n\t}\n```\n\n开启php-fpm\n```bash\n[root@vultr lgsmb]# systemctl start php-fpm\n```\n在web根目录写个phpinfo\n```php\n<?php\n\tphpinfo();\n?>\n```\n访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。\n","source":"_posts/Centos7-lnmp.md","raw":"---\ntitle: CentOS 7.2 搭建lnmp环境\ndate: 2017.3.11 11：08：20\ncategories: Linux\ntags:\n- CentOS\n- PHP\n- Nignx\n- MariaDB\n- LNMP\n---\n\n### Centos7 安装php7\n由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.\n#### 首先rpm安装php7.0的yum源\n```bash\n[root@vultr ~]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n```\n<!-- more -->\n#### yum安装php7\n```bash\n[root@vultr ~]# yum install php70w\n```\n### yum安装php-fpm\n```bash\n[root@vultr ~]# yum install php70w-fpm\n```\n####  查看php版本\n```bash\n[root@vultr ~]# php -v\nPHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n```\n\n### 安装MariaDB\n\n```bash\n[root@vultr ~]# yum install mariadb-server mariadb\n```\n启动MariaDB\n\n```bash\n[root@vultr ~]# systemctl start mariadb\n```\n刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。\n\n```bash\n[root@vultr ~]# mysql_secure_installation \n\nNOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user.  If you've just installed MariaDB, and\nyou haven't set the root password yet, the password will be blank,\nso you should just press enter here.\n\nEnter current password for root (enter for none): \nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)\nEnter current password for root (enter for none): \nOK, successfully used password, moving on...\n\nSetting the root password ensures that nobody can log into the MariaDB\nroot user without the proper authorisation.\n\nSet root password? [Y/n] Y\nNew password: \nRe-enter new password: \nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] Y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] Y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] Y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] Y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n\n```\n根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。\n\n### Nginx+php-fpm，让Nginx能够解析php请求\n\n在安装好Nginx和php-fpm之后，需要配置一下Nginx。\n```\nserver {\n\n\t\tlisten 80;\n\t\tserver_name www.xxx.com;\n\t\t\n\t\troot /var/www/html;\n\t\tindex index.html index.htm index.php;\n\t\t\n\t\tlocation ~ \\.php$ {\n\t\t\t\n\t\t\tinclude fastcgi_params;\n\t\t\tfastcgi_pass 127.0.0.1:9000;\n\t\t\tfastcgi_index index.php;\n\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;\n\t\t\n\t\t}\n\n\t}\n```\n\n开启php-fpm\n```bash\n[root@vultr lgsmb]# systemctl start php-fpm\n```\n在web根目录写个phpinfo\n```php\n<?php\n\tphpinfo();\n?>\n```\n访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。\n","slug":"Centos7-lnmp","published":1,"updated":"2017-03-11T04:36:50.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588w7000uzgtohna442d9","content":"<h3 id=\"Centos7-安装php7\"><a href=\"#Centos7-安装php7\" class=\"headerlink\" title=\"Centos7 安装php7\"></a>Centos7 安装php7</h3><p>由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.</p>\n<h4 id=\"首先rpm安装php7-0的yum源\"><a href=\"#首先rpm安装php7-0的yum源\" class=\"headerlink\" title=\"首先rpm安装php7.0的yum源\"></a>首先rpm安装php7.0的yum源</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"yum安装php7\"><a href=\"#yum安装php7\" class=\"headerlink\" title=\"yum安装php7\"></a>yum安装php7</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w</span></div></pre></td></tr></table></figure>\n<h3 id=\"yum安装php-fpm\"><a href=\"#yum安装php-fpm\" class=\"headerlink\" title=\"yum安装php-fpm\"></a>yum安装php-fpm</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w-fpm</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php版本\"><a href=\"#查看php版本\" class=\"headerlink\" title=\"查看php版本\"></a>查看php版本</h4><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># php -v</span></div><div class=\"line\">PHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2017 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div></pre></td></tr></table></figure>\n<h3 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install mariadb-server mariadb</span></div></pre></td></tr></table></figure>\n<p>启动MariaDB</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># systemctl start mariadb</span></div></pre></td></tr></table></figure>\n<p>刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</span></div><div class=\"line\">password for the root user.  If you've just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</span></div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user 'root<span class=\"string\">'@'</span>localhost<span class=\"string\">' (using password: YES)</span></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] Y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from 'localhost<span class=\"string\">'.  This</span></div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named '<span class=\"built_in\">test</span><span class=\"string\">' that anyone can</span></div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] Y</div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you've completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks <span class=\"keyword\">for</span> using MariaDB!</div></pre></td></tr></table></figure>\n<p>根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。</p>\n<h3 id=\"Nginx-php-fpm，让Nginx能够解析php请求\"><a href=\"#Nginx-php-fpm，让Nginx能够解析php请求\" class=\"headerlink\" title=\"Nginx+php-fpm，让Nginx能够解析php请求\"></a>Nginx+php-fpm，让Nginx能够解析php请求</h3><p>在安装好Nginx和php-fpm之后，需要配置一下Nginx。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tlisten 80;</div><div class=\"line\">\t\tserver_name www.xxx.com;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot /var/www/html;</div><div class=\"line\">\t\tindex index.html index.htm index.php;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlocation ~ \\.php$ &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tinclude fastcgi_params;</div><div class=\"line\">\t\t\tfastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">\t\t\tfastcgi_index index.php;</div><div class=\"line\">\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr lgsmb]<span class=\"comment\"># systemctl start php-fpm</span></div></pre></td></tr></table></figure></p>\n<p>在web根目录写个phpinfo<br><figure class=\"highlight php\" data-lang=\" php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\tphpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。</p>\n","excerpt":"<h3 id=\"Centos7-安装php7\"><a href=\"#Centos7-安装php7\" class=\"headerlink\" title=\"Centos7 安装php7\"></a>Centos7 安装php7</h3><p>由于centos自己的软件仓库中的php版本为5.4，而yii2框架需要的php版本必须是5.4及以上。索性直接一步到位到7.0。为图方便就不使用编译安装的方式，而是采用yum安装方式.</p>\n<h4 id=\"首先rpm安装php7-0的yum源\"><a href=\"#首先rpm安装php7-0的yum源\" class=\"headerlink\" title=\"首先rpm安装php7.0的yum源\"></a>首先rpm安装php7.0的yum源</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span></div></pre></td></tr></table></figure>","more":"<h4 id=\"yum安装php7\"><a href=\"#yum安装php7\" class=\"headerlink\" title=\"yum安装php7\"></a>yum安装php7</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w</span></div></pre></td></tr></table></figure>\n<h3 id=\"yum安装php-fpm\"><a href=\"#yum安装php-fpm\" class=\"headerlink\" title=\"yum安装php-fpm\"></a>yum安装php-fpm</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install php70w-fpm</span></div></pre></td></tr></table></figure>\n<h4 id=\"查看php版本\"><a href=\"#查看php版本\" class=\"headerlink\" title=\"查看php版本\"></a>查看php版本</h4><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># php -v</span></div><div class=\"line\">PHP 7.0.16 (cli) (built: Feb 18 2017 10:25:02) ( NTS )</div><div class=\"line\">Copyright (c) 1997-2017 The PHP Group</div><div class=\"line\">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</div></pre></td></tr></table></figure>\n<h3 id=\"安装MariaDB\"><a href=\"#安装MariaDB\" class=\"headerlink\" title=\"安装MariaDB\"></a>安装MariaDB</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># yum install mariadb-server mariadb</span></div></pre></td></tr></table></figure>\n<p>启动MariaDB</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># systemctl start mariadb</span></div></pre></td></tr></table></figure>\n<p>刚刚安装好数据库，是没有设置root用户密码的，这样子显然是不安全的。在初次安装时，可以使用MariaDB自带的安全安装命令设置root用户密码。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr ~]<span class=\"comment\"># mysql_secure_installation </span></div><div class=\"line\"></div><div class=\"line\">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</div><div class=\"line\">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</div><div class=\"line\"></div><div class=\"line\">In order to <span class=\"built_in\">log</span> into MariaDB to secure it, we<span class=\"string\">'ll need the current</div><div class=\"line\">password for the root user.  If you'</span>ve just installed MariaDB, and</div><div class=\"line\">you haven<span class=\"string\">'t set the root password yet, the password will be blank,</div><div class=\"line\">so you should just press enter here.</div><div class=\"line\"></div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">ERROR 1045 (28000): Access denied for user '</span>root<span class=\"string\">'@'</span>localhost<span class=\"string\">' (using password: YES)</div><div class=\"line\">Enter current password for root (enter for none): </div><div class=\"line\">OK, successfully used password, moving on...</div><div class=\"line\"></div><div class=\"line\">Setting the root password ensures that nobody can log into the MariaDB</div><div class=\"line\">root user without the proper authorisation.</div><div class=\"line\"></div><div class=\"line\">Set root password? [Y/n] Y</div><div class=\"line\">New password: </div><div class=\"line\">Re-enter new password: </div><div class=\"line\">Password updated successfully!</div><div class=\"line\">Reloading privilege tables..</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">By default, a MariaDB installation has an anonymous user, allowing anyone</div><div class=\"line\">to log into MariaDB without having to have a user account created for</div><div class=\"line\">them.  This is intended only for testing, and to make the installation</div><div class=\"line\">go a bit smoother.  You should remove them before moving into a</div><div class=\"line\">production environment.</div><div class=\"line\"></div><div class=\"line\">Remove anonymous users? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Normally, root should only be allowed to connect from '</span>localhost<span class=\"string\">'.  This</div><div class=\"line\">ensures that someone cannot guess at the root password from the network.</div><div class=\"line\"></div><div class=\"line\">Disallow root login remotely? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">By default, MariaDB comes with a database named '</span><span class=\"built_in\">test</span><span class=\"string\">' that anyone can</div><div class=\"line\">access.  This is also intended only for testing, and should be removed</div><div class=\"line\">before moving into a production environment.</div><div class=\"line\"></div><div class=\"line\">Remove test database and access to it? [Y/n] Y</div><div class=\"line\"> - Dropping test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"> - Removing privileges on test database...</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Reloading the privilege tables will ensure that all changes made so far</div><div class=\"line\">will take effect immediately.</div><div class=\"line\"></div><div class=\"line\">Reload privilege tables now? [Y/n] Y</div><div class=\"line\"> ... Success!</div><div class=\"line\"></div><div class=\"line\">Cleaning up...</div><div class=\"line\"></div><div class=\"line\">All done!  If you'</span>ve completed all of the above steps, your MariaDB</div><div class=\"line\">installation should now be secure.</div><div class=\"line\"></div><div class=\"line\">Thanks <span class=\"keyword\">for</span> using MariaDB!</div></pre></td></tr></table></figure>\n<p>根据提示设置好root帐号的密码，移除测试数据库等等，MariaDB就安装完成了。</p>\n<h3 id=\"Nginx-php-fpm，让Nginx能够解析php请求\"><a href=\"#Nginx-php-fpm，让Nginx能够解析php请求\" class=\"headerlink\" title=\"Nginx+php-fpm，让Nginx能够解析php请求\"></a>Nginx+php-fpm，让Nginx能够解析php请求</h3><p>在安装好Nginx和php-fpm之后，需要配置一下Nginx。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\"></div><div class=\"line\">\t\tlisten 80;</div><div class=\"line\">\t\tserver_name www.xxx.com;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\troot /var/www/html;</div><div class=\"line\">\t\tindex index.html index.htm index.php;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tlocation ~ \\.php$ &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tinclude fastcgi_params;</div><div class=\"line\">\t\t\tfastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">\t\t\tfastcgi_index index.php;</div><div class=\"line\">\t\t\tfastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<p>开启php-fpm<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@vultr lgsmb]<span class=\"comment\"># systemctl start php-fpm</span></div></pre></td></tr></table></figure></p>\n<p>在web根目录写个phpinfo<br><figure class=\"highlight php\"data-lang=\" php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">\tphpinfo();</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>访问一下，如果看到了phpinfo的页面，证明Nginx已经能够正常解析php文件了。</p>"},{"title":"利用Python的PIL截屏","date":"2016-12-04T02:23:02.000Z","_content":"\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","source":"_posts/PIL-Grab.md","raw":"---\ntitle: 利用Python的PIL截屏\ndate: 2016-12-04 10:23:02\ncategories: Program\ntags:\n- python\n- PIL\n---\n\n### 0x1：在Windows 64位系统上安装python的PIL库\n\nPillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。[Win 64 PIL下载地址](http://www.lfd.uci.edu/~gohlke/pythonlibs/) 下载下来会发现是.whl扩展名。其安装方法：  \n\n```cmd\npip install Pillow-3.4.2-cp27-cp27m-win_amd64.whl\n```\n\n### 0x2:利用PIL截屏\n\n```python\nfrom PIL import ImageGrab\nimage=ImageGrab.grab()\nimage.save(\"E:/grab.jpg\",\"jpeg\")\n\n```\n\n仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。","slug":"PIL-Grab","published":1,"updated":"2016-12-15T07:00:09.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wa000xzgtoy1ht1ptx","content":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\" target=\"_blank\" rel=\"external\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\" data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n","excerpt":"","more":"<h3 id=\"0x1：在Windows-64位系统上安装python的PIL库\"><a href=\"#0x1：在Windows-64位系统上安装python的PIL库\" class=\"headerlink\" title=\"0x1：在Windows 64位系统上安装python的PIL库\"></a>0x1：在Windows 64位系统上安装python的PIL库</h3><p>Pillow的官方网站上默认只提供32位版本的安装程序，所以我们需要到第三方网站去下载64位版本的Pillow安装包。<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/\">Win 64 PIL下载地址</a> 下载下来会发现是.whl扩展名。其安装方法：  </p>\n<figure class=\"highlight cmd\"data-lang=\" cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install Pillow-<span class=\"number\">3</span>.<span class=\"number\">4</span>.<span class=\"number\">2</span>-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>\n<h3 id=\"0x2-利用PIL截屏\"><a href=\"#0x2-利用PIL截屏\" class=\"headerlink\" title=\"0x2:利用PIL截屏\"></a>0x2:利用PIL截屏</h3><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</div><div class=\"line\">image=ImageGrab.grab()</div><div class=\"line\">image.save(<span class=\"string\">\"E:/grab.jpg\"</span>,<span class=\"string\">\"jpeg\"</span>)</div></pre></td></tr></table></figure>\n<p>仅仅需要简单的两行代码就可以实现截取整个屏幕并保存为文件，很方便。grab方法还可以指定参数，截取屏幕某坐标范围内的内容。</p>\n"},{"title":"pwnable练习之collision","date":"2016-11-28T11:25:18.000Z","_content":"col.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","source":"_posts/Pwnable-collision.md","raw":"---\ntitle:  pwnable练习之collision \ndate: 2016-11-28 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\ncol.c代码如下：\n```c\n#include <stdio.h>\n#include <string.h>\nunsigned long hashcode = 0x21DD09EC;\nunsigned long check_password(const char* p){\n\tint* ip = (int*)p;\n\tint i;\n\tint res=0;\n\tfor(i=0; i<5; i++){\n\t\tres += ip[i];\n\t}\n\treturn res;\n}\n\nint main(int argc, char* argv[]){\n\tif(argc<2){\n\t\tprintf(\"usage : %s [passcode]\\n\", argv[0]);\n\t\treturn 0;\n\t}\n\tif(strlen(argv[1]) != 20){\n\t\tprintf(\"passcode length should be 20 bytes\\n\");\n\t\treturn 0;\n\t}\n\n\tif(hashcode == check_password( argv[1] )){\n\t\tsystem(\"/bin/cat flag\");\n\t\treturn 0;\n\t}\n\telse\n\t\tprintf(\"wrong passcode.\\n\");\n\treturn 0;\n}\n\n```\n观察代码，可知代码逻辑过程是：  \n1.先输入一个不少于20字节长度的值  \n2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)  \n3.求得的和与0x21DD09EC比较，若相等则通过  \n<!-- more -->\n重点1：\n```c\nint* ip = (int*)p;\n```\n这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：  \n![image](/blogimg/collision.png)\n\n思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。  \n比如：\n```python\n>>> 0x21DD09EC/5\n113626824\n>>> hex(0x21DD09EC/5)\n'0x6c5cec8'\n```\n哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8\n```python\n>>> hex(0x21DD09EC-4*0x01010101)\n'0x1dd905e8'\n>>>\n```\n接下我们把刚刚的值输入：\n```bash\ncol@ubuntu:~$ ./col `python -c \"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"`\ndaddy! I just managed to create a hash collision :)\ncol@ubuntu:~$ \n\n```\nYES,GET FLAG!\n\n\n","slug":"Pwnable-collision","published":1,"updated":"2016-12-15T07:00:09.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wc0010zgtom1zvarmd","content":"<p>col.c代码如下：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br><a id=\"more\"></a><br>重点1：<br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>\n","excerpt":"<p>col.c代码如下：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> hashcode = <span class=\"number\">0x21DD09EC</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">check_password</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div><div class=\"line\">\t<span class=\"keyword\">int</span> i;</div><div class=\"line\">\t<span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">5</span>; i++)&#123;</div><div class=\"line\">\t\tres += ip[i];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(argc&lt;<span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"usage : %s [passcode]\\n\"</span>, argv[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) != <span class=\"number\">20</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"passcode length should be 20 bytes\\n\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span>(hashcode == check_password( argv[<span class=\"number\">1</span>] ))&#123;</div><div class=\"line\">\t\tsystem(<span class=\"string\">\"/bin/cat flag\"</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"wrong passcode.\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>观察代码，可知代码逻辑过程是：<br>1.先输入一个不少于20字节长度的值<br>2.对输入的前五位整数求和(int类型，一个int等于4字节，5位int类型，恰好20字节)<br>3.求得的和与0x21DD09EC比较，若相等则通过<br>","more":"<br>重点1：<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>* ip = (<span class=\"keyword\">int</span>*)p;</div></pre></td></tr></table></figure></p>\n<p>这里将输入的char类型的指针强制转换为了int指针，从而ip指针一次能够指向4个字节大小的内存区域。画个图模拟一下内存布局：<br><img src=\"/blogimg/collision.png\" alt=\"image\"></p>\n<p>思路1：将0x21DD09EC除以5变为4字节为一组，分别输入，最后以4字节为一组进行求和即可。<br>比如：<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">113626824</span></div><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span>/<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"string\">'0x6c5cec8'</span></div></pre></td></tr></table></figure></p>\n<p>哦，稍等。好像不能被5整除哦。换个方式：4 x 0x01010101 + 0x1dd905e8<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>hex(<span class=\"number\">0x21DD09EC</span><span class=\"number\">-4</span>*<span class=\"number\">0x01010101</span>)</div><div class=\"line\"><span class=\"string\">'0x1dd905e8'</span></div><div class=\"line\">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>\n<p>接下我们把刚刚的值输入：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">col@ubuntu:~$ ./col `python -c <span class=\"string\">\"print 16*'\\x01'+'\\xe8\\x05\\xd9\\x1d'\"</span>`</div><div class=\"line\">daddy! I just managed to create a <span class=\"built_in\">hash</span> collision :)</div><div class=\"line\">col@ubuntu:~$</div></pre></td></tr></table></figure></p>\n<p>YES,GET FLAG!</p>"},{"title":"配置nginx，防止ip被恶意绑定域名","date":"2016-12-14T20:53:41.000Z","toc":"true 文章目录","author":null,"comments":1,"original":null,"_content":"### 0x1 事情起因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","source":"_posts/nginx-diable-domain.md","raw":"---\ntitle: 配置nginx，防止ip被恶意绑定域名\ndate: 2016-12-15 04:53:41\ncategories:\n- Linux\ntags:\n- nginx\n- domain\ntoc: true 文章目录\nauthor:\ncomments:\noriginal:\npermalink:\n---\n### 0x1 事情起因  \n偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。\n<!-- more -->\n###  0x2 解决方案  \n最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。\n### 0x3 配置文件具体内容  \n```\nserver {\n        listen       80;\n        listen       [::]:80 default_server;\n        server_name  blog.star-chen.com;\n        root         /var/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\tif ($host !~ \".*star-chen.com\"){\n\t\treturn 500;\n\t}\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n\n```\n简单粗暴，有效果！","slug":"nginx-diable-domain","published":1,"updated":"2016-12-15T09:31:52.992Z","layout":"post","photos":[],"link":"","_id":"cj2k588wh0013zgtordb7kusa","content":"<h3 id=\"0x1-事情起因\"><a href=\"#0x1-事情起因\" class=\"headerlink\" title=\"0x1 事情起因\"></a>0x1 事情起因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。<br><a id=\"more\"></a></p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>\n","excerpt":"<h3 id=\"0x1-事情起因\"><a href=\"#0x1-事情起因\" class=\"headerlink\" title=\"0x1 事情起因\"></a>0x1 事情起因</h3><p>偶然在百度上搜索了一下我这个博客的域名，发现百度有个快照是另外一个不相干的域名解析到我现在用的这个ip上了。这样子好像有点不科学嘛，还是把不属于本站域名的访问给禁用掉好了。<br>","more":"</p>\n<h3 id=\"0x2-解决方案\"><a href=\"#0x2-解决方案\" class=\"headerlink\" title=\"0x2 解决方案\"></a>0x2 解决方案</h3><p>最简单粗暴的办法就是给域名不匹配的请求返回一个错误代码就可以了，或者委婉的一点，把请求重定向到目前所使用的域名上。我选择了前者。</p>\n<h3 id=\"0x3-配置文件具体内容\"><a href=\"#0x3-配置文件具体内容\" class=\"headerlink\" title=\"0x3 配置文件具体内容\"></a>0x3 配置文件具体内容</h3><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        listen       80;</div><div class=\"line\">        listen       [::]:80 default_server;</div><div class=\"line\">        server_name  blog.star-chen.com;</div><div class=\"line\">        root         /var/blog;</div><div class=\"line\"></div><div class=\"line\">        # Load configuration files for the default server block.</div><div class=\"line\">        include /etc/nginx/default.d/*.conf;</div><div class=\"line\">\tif ($host !~ &quot;.*star-chen.com&quot;)&#123;</div><div class=\"line\">\t\treturn 500;</div><div class=\"line\">\t&#125;</div><div class=\"line\">        location / &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 404 /404.html;</div><div class=\"line\">            location = /40x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        error_page 500 502 503 504 /50x.html;</div><div class=\"line\">            location = /50x.html &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>简单粗暴，有效果！</p>"},{"title":"Hello World","date":"2016-07-21T14:29:18.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-07-21 22:29:18\ntags:\n- hello hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-12-15T07:20:21.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wi0016zgtojzpahrky","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"pwnable练习之fd","date":"2016-11-27T11:25:18.000Z","_content":"fd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","source":"_posts/Pwnable-fd.md","raw":"---\ntitle:  pwnable练习之fd \ndate: 2016-11-27 19:25:18\ncategories: CTF\ntags:\n- CTF\n- Linux\n- PWN\n- pwnable\n---\nfd.c的代码如下：\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nchar buf[32];\nint main(int argc, char* argv[], char* envp[]){\n\tif(argc<2){\n\t\tprintf(\"pass argv[1] a number\\n\");\n\t\treturn 0;\n\t}\n\tint fd = atoi( argv[1] ) - 0x1234;\n\tint len = 0;\n\tlen = read(fd, buf, 32);\n\tif(!strcmp(\"LETMEWIN\\n\", buf)){\n\t\tprintf(\"good job :)\\n\");\n\t\tsystem(\"/bin/cat flag\");\n\t\texit(0);\n\t}\n\tprintf(\"learn about Linux file IO\\n\");\n\treturn 0;\n\n}\n\n```\n代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。  \n接下来我们看一下read函数的函数描述:\n<!-- more -->\n```c\nNAME\n       read - read from a file descriptor\n\nSYNOPSIS\n       #include <unistd.h>\n\n       ssize_t read(int fd, void *buf, size_t count);\n\n```\n可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  \n\n| 文件描述符  |  用途  | POISX名称   |  stdio流  |\n| ------------|-------:| -----------:| ---------:|\n|0            |标准输入|STDIN_FILENO |  stdin    |\n|1            |标准输出|STDOUT_FILENO|  stdout   |\n|2            |标准错误|STDERR_FILENO|  stderr   |\n这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。\n```\nfd@ubuntu:~$ ./fd 4660\nLETMEWIN\ngood job :)\nmommy! I think I know what a file descriptor is!!\n\n```\n注：fd,file decriptor 文件描述符\n\n","slug":"Pwnable-fd","published":1,"updated":"2016-12-15T07:00:09.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wj0018zgto6q31j5t4","content":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br><a id=\"more\"></a><br><figure class=\"highlight c\" data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>\n","excerpt":"<p>fd.c的代码如下：<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include &lt;stdio.h&gt;</div><div class=\"line\">#include &lt;stdlib.h&gt;</div><div class=\"line\">#include &lt;string.h&gt;</div><div class=\"line\">char buf[32];</div><div class=\"line\">int main(int argc, char* argv[], char* envp[])&#123;</div><div class=\"line\">\tif(argc&lt;2)&#123;</div><div class=\"line\">\t\tprintf(&quot;pass argv[1] a number\\n&quot;);</div><div class=\"line\">\t\treturn 0;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tint fd = atoi( argv[1] ) - 0x1234;</div><div class=\"line\">\tint len = 0;</div><div class=\"line\">\tlen = read(fd, buf, 32);</div><div class=\"line\">\tif(!strcmp(&quot;LETMEWIN\\n&quot;, buf))&#123;</div><div class=\"line\">\t\tprintf(&quot;good job :)\\n&quot;);</div><div class=\"line\">\t\tsystem(&quot;/bin/cat flag&quot;);</div><div class=\"line\">\t\texit(0);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tprintf(&quot;learn about Linux file IO\\n&quot;);</div><div class=\"line\">\treturn 0;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>代码逻辑比较清楚，需要输入一个数字，然后减去0x1234，所得的值作为read函数的第一个参数，然后调用read函数读取输入，然后将读取的值和“LETMEWIN\\n”比较，若相等则cat输出flag文件中的值。<br>接下来我们看一下read函数的函数描述:<br>","more":"<br><figure class=\"highlight c\"data-lang=\" c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">NAME</div><div class=\"line\">       read - read from a file descriptor</div><div class=\"line\"></div><div class=\"line\">SYNOPSIS</div><div class=\"line\">       <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">ssize_t</span> read(<span class=\"keyword\">int</span> fd, <span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> count);</div></pre></td></tr></table></figure></p>\n<p>可以看到第一个参数为文件描述符。在Linux系统中存在三个比较特殊的文件描述符：  </p>\n<table>\n<thead>\n<tr>\n<th>文件描述符</th>\n<th style=\"text-align:right\">用途</th>\n<th style=\"text-align:right\">POISX名称</th>\n<th style=\"text-align:right\">stdio流</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td style=\"text-align:right\">标准输入</td>\n<td style=\"text-align:right\">STDIN_FILENO</td>\n<td style=\"text-align:right\">stdin</td>\n</tr>\n<tr>\n<td>1</td>\n<td style=\"text-align:right\">标准输出</td>\n<td style=\"text-align:right\">STDOUT_FILENO</td>\n<td style=\"text-align:right\">stdout</td>\n</tr>\n<tr>\n<td>2</td>\n<td style=\"text-align:right\">标准错误</td>\n<td style=\"text-align:right\">STDERR_FILENO</td>\n<td style=\"text-align:right\">stderr</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们可以让read参数的第一个参数为0（从标准输入读取），然后输入“LETMEWIN”即可让程序执行cat flag操作。<br><figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">fd@ubuntu:~$ ./fd 4660</div><div class=\"line\">LETMEWIN</div><div class=\"line\">good job :)</div><div class=\"line\">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure></p>\n<p>注：fd,file decriptor 文件描述符</p>"},{"title":"Tornado框架中的Requesthandler","date":"2016-12-15T12:24:10.000Z","_content":"上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let's go.\n<!-- more -->\n### 0x1:RequestHandler是个什么家伙？\n还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：\n\n> Subclassing RequestHandler\n> Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.\n>\n> Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).\n>\n> Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.\n\n可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍[Tornado RequestHandler类文档](http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler),这之中详细列出了该类的各成员变量及提供的方法。\n\n仔细阅读文档之后，我们就可以了解到:  \n\n1. 每种类型的http请求方法都有一个对应的方法，例如常见的GET-->get(),POST--->post()。\n\n2. render()方法可以加载模版\n\n3. write()方法可以直接向客户端写入任意内容\n\n4. get_argument()方法可以取得用户提交的某个参数的值\n\n5. 用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理\n\n6. ........\n\n   有了以上这些内容，我们已经能够完成想完成的任务了。\n\n### 0x2:Demo的需求\n\n1. 接收用户的文件上传请求\n\n2. 上传文件的后缀名检查，重命名，保存至指定目录\n\n3. 渲染模版，输出用户上传的文件的详细信息\n\n明确了需求，接下来就是编码工作了。\n\n### 0x3:具体编码\n\npython部分代码:\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport os\nclass FileUPHandler(tornado.web.RequestHandler):\n\tdef post(self):\n\t\torigin_descri=self.get_argument(\"describe\")\n\t\torigin_user=self.get_argument(\"user\")\n\t\tfile=self.request.files['photo'][0]\n\t\tfname=file['filename']\n\t\tftype=file['content_type']\n\t\tfbody=file['body']\n\t\tfsize=len(fbody)\n\t\tf=open(\"upload/\"+fname,'w')\n\t\tf.write(fbody)\n\t\tself.render(\"templates/result.html\",size=fsize/(1024),name=fname,user=origin_user,type=ftype)\n\tdef get(self):\n\t\tself.render(\"templates/upform.html\")\ndef main_app():\n\treturn tornado.web.Application([\n\n\t(r\"/\",FileUPHandler),\n\t(r\"/upload\",FileUPHandler),\n]) \nif __name__ == \"__main__\":\n\tapp = main_app()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\nhtml模版部分代码：\n\ntemplate/upform.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<meta charset=\"utf-8\">\n\n<h1>Tornado File Upload Demo</h1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n\n文件用户：<input type=\"text\" name=\"user\"/>\n\n文件描述：<input type=\"text\" name=\"describe\"/>\n\n请选择文件：<input type=\"file\" name=\"photo\"/>\n\n<input type=\"submit\" value=\"走你!\">\n</form>\n\n</html>\n```\n\ntemplate/result.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<h1>The File Information:</h1>\n\n<h3>file name:{{name}}</h3></br>\n<h3>fiel size:{{size}} KB</h3></br>\n<h3>request user:{{user}}</h3></br>\n<h3>file type:{{type}}</h3></br>\n\n</html>\n\n```\n\n### 0x4:实际验证效果\n\n![image](/blogimg/tornado_up_form.png)\n\n![image](/blogimg/tornado_up_success.png)\n\n```bash\nstar-chen@starchen-vb:~/ProDev/tornado$ ls upload/\nico.png\n\n```\n\n最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  \n\n### 0x5:思考\n\n这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。\n\n### 0x6 参考链接\n\nhttp://www.tornadoweb.org/en/stable/guide/structure.html\n\nhttp://demo.pythoner.com/itt2zh/ch2.html\n\nhttps://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\n\nhttps://my.oschina.net/chenlei123/blog/127563","source":"_posts/tornado-requesthandler.md","raw":"---\ntitle: Tornado框架中的Requesthandler\ndate: 2016-12-15 20:24:10\ncategories:\n- Program\ntags:\n- tornado\n- python\n- web\n---\n上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let's go.\n<!-- more -->\n### 0x1:RequestHandler是个什么家伙？\n还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：\n\n> Subclassing RequestHandler\n> Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.\n>\n> Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).\n>\n> Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.\n\n可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍[Tornado RequestHandler类文档](http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler),这之中详细列出了该类的各成员变量及提供的方法。\n\n仔细阅读文档之后，我们就可以了解到:  \n\n1. 每种类型的http请求方法都有一个对应的方法，例如常见的GET-->get(),POST--->post()。\n\n2. render()方法可以加载模版\n\n3. write()方法可以直接向客户端写入任意内容\n\n4. get_argument()方法可以取得用户提交的某个参数的值\n\n5. 用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理\n\n6. ........\n\n   有了以上这些内容，我们已经能够完成想完成的任务了。\n\n### 0x2:Demo的需求\n\n1. 接收用户的文件上传请求\n\n2. 上传文件的后缀名检查，重命名，保存至指定目录\n\n3. 渲染模版，输出用户上传的文件的详细信息\n\n明确了需求，接下来就是编码工作了。\n\n### 0x3:具体编码\n\npython部分代码:\n\n```python\nimport tornado.web\nimport tornado.ioloop\nimport os\nclass FileUPHandler(tornado.web.RequestHandler):\n\tdef post(self):\n\t\torigin_descri=self.get_argument(\"describe\")\n\t\torigin_user=self.get_argument(\"user\")\n\t\tfile=self.request.files['photo'][0]\n\t\tfname=file['filename']\n\t\tftype=file['content_type']\n\t\tfbody=file['body']\n\t\tfsize=len(fbody)\n\t\tf=open(\"upload/\"+fname,'w')\n\t\tf.write(fbody)\n\t\tself.render(\"templates/result.html\",size=fsize/(1024),name=fname,user=origin_user,type=ftype)\n\tdef get(self):\n\t\tself.render(\"templates/upform.html\")\ndef main_app():\n\treturn tornado.web.Application([\n\n\t(r\"/\",FileUPHandler),\n\t(r\"/upload\",FileUPHandler),\n]) \nif __name__ == \"__main__\":\n\tapp = main_app()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.instance().start()\n\n```\n\nhtml模版部分代码：\n\ntemplate/upform.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<meta charset=\"utf-8\">\n\n<h1>Tornado File Upload Demo</h1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n\n文件用户：<input type=\"text\" name=\"user\"/>\n\n文件描述：<input type=\"text\" name=\"describe\"/>\n\n请选择文件：<input type=\"file\" name=\"photo\"/>\n\n<input type=\"submit\" value=\"走你!\">\n</form>\n\n</html>\n```\n\ntemplate/result.html\n\n```html\n<!DOCTYPE html>\n<html>\n\n<h1>The File Information:</h1>\n\n<h3>file name:{{name}}</h3></br>\n<h3>fiel size:{{size}} KB</h3></br>\n<h3>request user:{{user}}</h3></br>\n<h3>file type:{{type}}</h3></br>\n\n</html>\n\n```\n\n### 0x4:实际验证效果\n\n![image](/blogimg/tornado_up_form.png)\n\n![image](/blogimg/tornado_up_success.png)\n\n```bash\nstar-chen@starchen-vb:~/ProDev/tornado$ ls upload/\nico.png\n\n```\n\n最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  \n\n### 0x5:思考\n\n这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。\n\n### 0x6 参考链接\n\nhttp://www.tornadoweb.org/en/stable/guide/structure.html\n\nhttp://demo.pythoner.com/itt2zh/ch2.html\n\nhttps://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\n\nhttps://my.oschina.net/chenlei123/blog/127563","slug":"tornado-requesthandler","published":1,"updated":"2016-12-16T05:31:33.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wo001bzgtonvn8blxm","content":"<p>上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let’s go.<br><a id=\"more\"></a></p>\n<h3 id=\"0x1-RequestHandler是个什么家伙？\"><a href=\"#0x1-RequestHandler是个什么家伙？\" class=\"headerlink\" title=\"0x1:RequestHandler是个什么家伙？\"></a>0x1:RequestHandler是个什么家伙？</h3><p>还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：</p>\n<blockquote>\n<p>Subclassing RequestHandler<br>Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.</p>\n<p>Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).</p>\n<p>Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.</p>\n</blockquote>\n<p>可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍<a href=\"http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler\" target=\"_blank\" rel=\"external\">Tornado RequestHandler类文档</a>,这之中详细列出了该类的各成员变量及提供的方法。</p>\n<p>仔细阅读文档之后，我们就可以了解到:  </p>\n<ol>\n<li><p>每种类型的http请求方法都有一个对应的方法，例如常见的GET–&gt;get(),POST—&gt;post()。</p>\n</li>\n<li><p>render()方法可以加载模版</p>\n</li>\n<li><p>write()方法可以直接向客户端写入任意内容</p>\n</li>\n<li><p>get_argument()方法可以取得用户提交的某个参数的值</p>\n</li>\n<li><p>用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理</p>\n</li>\n<li><p>……..</p>\n<p>有了以上这些内容，我们已经能够完成想完成的任务了。</p>\n</li>\n</ol>\n<h3 id=\"0x2-Demo的需求\"><a href=\"#0x2-Demo的需求\" class=\"headerlink\" title=\"0x2:Demo的需求\"></a>0x2:Demo的需求</h3><ol>\n<li><p>接收用户的文件上传请求</p>\n</li>\n<li><p>上传文件的后缀名检查，重命名，保存至指定目录</p>\n</li>\n<li><p>渲染模版，输出用户上传的文件的详细信息</p>\n</li>\n</ol>\n<p>明确了需求，接下来就是编码工作了。</p>\n<h3 id=\"0x3-具体编码\"><a href=\"#0x3-具体编码\" class=\"headerlink\" title=\"0x3:具体编码\"></a>0x3:具体编码</h3><p>python部分代码:</p>\n<figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUPHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\torigin_descri=self.get_argument(<span class=\"string\">\"describe\"</span>)</div><div class=\"line\">\t\torigin_user=self.get_argument(<span class=\"string\">\"user\"</span>)</div><div class=\"line\">\t\tfile=self.request.files[<span class=\"string\">'photo'</span>][<span class=\"number\">0</span>]</div><div class=\"line\">\t\tfname=file[<span class=\"string\">'filename'</span>]</div><div class=\"line\">\t\tftype=file[<span class=\"string\">'content_type'</span>]</div><div class=\"line\">\t\tfbody=file[<span class=\"string\">'body'</span>]</div><div class=\"line\">\t\tfsize=len(fbody)</div><div class=\"line\">\t\tf=open(<span class=\"string\">\"upload/\"</span>+fname,<span class=\"string\">'w'</span>)</div><div class=\"line\">\t\tf.write(fbody)</div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/result.html\"</span>,size=fsize/(<span class=\"number\">1024</span>),name=fname,user=origin_user,type=ftype)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/upform.html\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\"></div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,FileUPHandler),</div><div class=\"line\">\t(<span class=\"string\">r\"/upload\"</span>,FileUPHandler),</div><div class=\"line\">]) </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = main_app()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>html模版部分代码：</p>\n<p>template/upform.html</p>\n<figure class=\"highlight html\" data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Tornado File Upload Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"describe\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">请选择文件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"走你!\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>template/result.html</p>\n<figure class=\"highlight html\" data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The File Information:<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file name:&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>fiel size:&#123;&#123;size&#125;&#125; KB<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>request user:&#123;&#123;user&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file type:&#123;&#123;type&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"0x4-实际验证效果\"><a href=\"#0x4-实际验证效果\" class=\"headerlink\" title=\"0x4:实际验证效果\"></a>0x4:实际验证效果</h3><p><img src=\"/blogimg/tornado_up_form.png\" alt=\"image\"></p>\n<p><img src=\"/blogimg/tornado_up_success.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~/ProDev/tornado$ ls upload/</div><div class=\"line\">ico.png</div></pre></td></tr></table></figure>\n<p>最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  </p>\n<h3 id=\"0x5-思考\"><a href=\"#0x5-思考\" class=\"headerlink\" title=\"0x5:思考\"></a>0x5:思考</h3><p>这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。</p>\n<h3 id=\"0x6-参考链接\"><a href=\"#0x6-参考链接\" class=\"headerlink\" title=\"0x6 参考链接\"></a>0x6 参考链接</h3><p><a href=\"http://www.tornadoweb.org/en/stable/guide/structure.html\" target=\"_blank\" rel=\"external\">http://www.tornadoweb.org/en/stable/guide/structure.html</a></p>\n<p><a href=\"http://demo.pythoner.com/itt2zh/ch2.html\" target=\"_blank\" rel=\"external\">http://demo.pythoner.com/itt2zh/ch2.html</a></p>\n<p><a href=\"https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\" target=\"_blank\" rel=\"external\">https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/</a></p>\n<p><a href=\"https://my.oschina.net/chenlei123/blog/127563\" target=\"_blank\" rel=\"external\">https://my.oschina.net/chenlei123/blog/127563</a></p>\n","excerpt":"<p>上一篇博文中，我在我的机器上搭建了tornado框架，并运行了helloworld。在这篇文章中，我将尝试利用tornado接收用户提交的参数和数据，完成一个文件上传的小demo，之中会涉及到RequestHandler和tornado的模版机制。Let’s go.<br>","more":"</p>\n<h3 id=\"0x1-RequestHandler是个什么家伙？\"><a href=\"#0x1-RequestHandler是个什么家伙？\" class=\"headerlink\" title=\"0x1:RequestHandler是个什么家伙？\"></a>0x1:RequestHandler是个什么家伙？</h3><p>还记得上一个Helloworld工程的代码吗？我们的MainHandler继承了tornado.web.RequestHandler，那么这个RequestHandler到底是何方神圣？它能够干些什么呢？先看看官方提供的文档怎么说：</p>\n<blockquote>\n<p>Subclassing RequestHandler<br>Most of the work of a Tornado web application is done in subclasses of RequestHandler. The main entry point for a handler subclass is a method named after the HTTP method being handled: get(), post(), etc. Each handler may define one or more of these methods to handle different HTTP actions. As described above, these methods will be called with arguments corresponding to the capturing groups of the routing rule that matched.</p>\n<p>Within a handler, call methods such as RequestHandler.render or RequestHandler.write to produce a response. render() loads a Template by name and renders it with the given arguments. write() is used for non-template-based output; it accepts strings, bytes, and dictionaries (dicts will be encoded as JSON).</p>\n<p>Many methods in RequestHandler are designed to be overridden in subclasses and be used throughout the application. It is common to define a BaseHandler class that overrides methods such as write_error and get_current_user and then subclass your own BaseHandler instead of RequestHandler for all your specific handlers.</p>\n</blockquote>\n<p>可以看看得出来，RequestHandler是一个专门用于处理http请求的类。它能够获得用户访问的各种数据，也能够通过write方法等向用户回复响应。所以，应用的具体逻辑应该在RequestHanler的子类中进行，例如查询数据库、加载模版等等。该类的具体描述可参见官方更详尽的介绍<a href=\"http://www.tornadoweb.org/en/stable/web.html#tornado.web.RequestHandler\">Tornado RequestHandler类文档</a>,这之中详细列出了该类的各成员变量及提供的方法。</p>\n<p>仔细阅读文档之后，我们就可以了解到:  </p>\n<ol>\n<li><p>每种类型的http请求方法都有一个对应的方法，例如常见的GET–&gt;get(),POST—&gt;post()。</p>\n</li>\n<li><p>render()方法可以加载模版</p>\n</li>\n<li><p>write()方法可以直接向客户端写入任意内容</p>\n</li>\n<li><p>get_argument()方法可以取得用户提交的某个参数的值</p>\n</li>\n<li><p>用户上传的文件会被转换成files变量，可以对用户上传的文件进行后续处理</p>\n</li>\n<li><p>……..</p>\n<p>有了以上这些内容，我们已经能够完成想完成的任务了。</p>\n</li>\n</ol>\n<h3 id=\"0x2-Demo的需求\"><a href=\"#0x2-Demo的需求\" class=\"headerlink\" title=\"0x2:Demo的需求\"></a>0x2:Demo的需求</h3><ol>\n<li><p>接收用户的文件上传请求</p>\n</li>\n<li><p>上传文件的后缀名检查，重命名，保存至指定目录</p>\n</li>\n<li><p>渲染模版，输出用户上传的文件的详细信息</p>\n</li>\n</ol>\n<p>明确了需求，接下来就是编码工作了。</p>\n<h3 id=\"0x3-具体编码\"><a href=\"#0x3-具体编码\" class=\"headerlink\" title=\"0x3:具体编码\"></a>0x3:具体编码</h3><p>python部分代码:</p>\n<figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUPHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\torigin_descri=self.get_argument(<span class=\"string\">\"describe\"</span>)</div><div class=\"line\">\t\torigin_user=self.get_argument(<span class=\"string\">\"user\"</span>)</div><div class=\"line\">\t\tfile=self.request.files[<span class=\"string\">'photo'</span>][<span class=\"number\">0</span>]</div><div class=\"line\">\t\tfname=file[<span class=\"string\">'filename'</span>]</div><div class=\"line\">\t\tftype=file[<span class=\"string\">'content_type'</span>]</div><div class=\"line\">\t\tfbody=file[<span class=\"string\">'body'</span>]</div><div class=\"line\">\t\tfsize=len(fbody)</div><div class=\"line\">\t\tf=open(<span class=\"string\">\"upload/\"</span>+fname,<span class=\"string\">'w'</span>)</div><div class=\"line\">\t\tf.write(fbody)</div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/result.html\"</span>,size=fsize/(<span class=\"number\">1024</span>),name=fname,user=origin_user,type=ftype)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.render(<span class=\"string\">\"templates/upform.html\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\"></div><div class=\"line\">\t(<span class=\"string\">r\"/\"</span>,FileUPHandler),</div><div class=\"line\">\t(<span class=\"string\">r\"/upload\"</span>,FileUPHandler),</div><div class=\"line\">]) </div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = main_app()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.instance().start()</div></pre></td></tr></table></figure>\n<p>html模版部分代码：</p>\n<p>template/upform.html</p>\n<figure class=\"highlight html\"data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Tornado File Upload Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件用户：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">文件描述：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"describe\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">请选择文件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"走你!\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>template/result.html</p>\n<figure class=\"highlight html\"data-lang=\" html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The File Information:<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file name:&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>fiel size:&#123;&#123;size&#125;&#125; KB<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>request user:&#123;&#123;user&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>file type:&#123;&#123;type&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"0x4-实际验证效果\"><a href=\"#0x4-实际验证效果\" class=\"headerlink\" title=\"0x4:实际验证效果\"></a>0x4:实际验证效果</h3><p><img src=\"/blogimg/tornado_up_form.png\" alt=\"image\"></p>\n<p><img src=\"/blogimg/tornado_up_success.png\" alt=\"image\"></p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~/ProDev/tornado$ ls upload/</div><div class=\"line\">ico.png</div></pre></td></tr></table></figure>\n<p>最后可以看到，上传的文件已经成功的躺在了目标文件夹之中了。  </p>\n<h3 id=\"0x5-思考\"><a href=\"#0x5-思考\" class=\"headerlink\" title=\"0x5:思考\"></a>0x5:思考</h3><p>这个简单的Demo完成用户请求信息的获取，并成功的上传了文件。但是并未进行文件的验证，用户可以上传任意文件，对于服务器君来说，这可是不能忍滴。</p>\n<h3 id=\"0x6-参考链接\"><a href=\"#0x6-参考链接\" class=\"headerlink\" title=\"0x6 参考链接\"></a>0x6 参考链接</h3><p><a href=\"http://www.tornadoweb.org/en/stable/guide/structure.html\">http://www.tornadoweb.org/en/stable/guide/structure.html</a></p>\n<p><a href=\"http://demo.pythoner.com/itt2zh/ch2.html\">http://demo.pythoner.com/itt2zh/ch2.html</a></p>\n<p><a href=\"https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/\">https://technobeans.wordpress.com/2012/09/17/tornado-file-uploads/</a></p>\n<p><a href=\"https://my.oschina.net/chenlei123/blog/127563\">https://my.oschina.net/chenlei123/blog/127563</a></p>"},{"title":"设计模式学习之观察者模式","date":"2016-12-16T07:57:06.000Z","_content":"\n之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了....看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。\n\n<!-- more -->\n\n观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  \n\n> 观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。\n\n-----摘自《Head First设计模式》  \n\n那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。\n\n观察者模式的最基本的类图如下：  \n\n![image](/blogimg/ObserverUML.bmp)\n\n> Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除\n\n> Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用\n\n> ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者\n\n> ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知\n\n  接着来具体实现一下书上提供的气象站的例子：\n\n  Subject.java\n\n```java\n  public interface Subject{\n      public void registerObserver(Observer o); //注册观察者\n      public void removeObserver(Observer o); //移除观察者\n      public void notifyObservers(); //当有更新事件发生时，通知观察者\n  }\n```\n\n  Observer.java\n\n```java\n  public interface Observer{\n      public void update(float temp, float humidity, float pressure);\n      //所有的观察者都必须实现update()方法，以实现观察者接口\n  }\n```\n\n  WetherData.java\n\n```java\n  public class WetherData implements Subject { //需要实现Subject接口\n\n      private ArrayList observers; //用于存放注册的所有观察者对象\n      private float tempature;\n      private float humidity;\n      private float pressure;\n\n      public WetherData(){\n          observers = new ArrayList();\n      }\n      @Override\n      public void registerObserver(Observer o) {\n          this.observers.add(o);\n      }\n\n      @Override\n      public void removeObserver(Observer o) {\n              int i = observers.indexOf(o);\n              if(i > 0){\n                  observers.remove(i);\n              }\n      }\n\n      @Override\n      public void notifyObservers() {\n        /*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/\n          for(int i = 0; i < observers.size(); i++){\n              Observer observer=(Observer)observers.get(i);\n              observer.update(tempature, humidity, pressure);\n          }\n      }\n\n      public void measurementsChanged(){\n        //接收更新事件通知，然后告诉所有的注册的观察者\n          notifyObservers();\n      }\n\n      public void setMeasurements(float tempature, float humidity, float pressure){\n  \t\t//当有的气象观测数据到来，调用此方法\n          this.tempature = tempature;\n          this.humidity = humidity;\n          this.pressure = pressure;\n       \n          measurementsChanged(); //发出通知\n      }\n  }\n\n```\n\n  CurrentConditionDisplay.java\n\n```java\n  //这是气象数据显示的公告板，它实现了Observer接口，成为了观察者\n  public class CurrentConditionDisplay implements Observer, DisplayElement {\n\n      private float temprature;\n      private float humidity;\n      private Subject weatherData;\n\n      public CurrentConditionDisplay(Subject weatherData){\n\n          this.weatherData = weatherData;\n        //注册成为wetherData的观察者，随时准备接收新数据\n          weatherData.registerObserver(this);\n      }\n      @Override\n      public void update(float temp, float humidity, float pressure) {\n  \t\t\t//取得来自Subject的数据，并暂存起来用于稍后的显示\n              this.temprature = temp;\n              this.humidity = humidity;\n              display();\n      }\n\n      @Override\n      public void display() {\n        //显示数据\n          System.out.println(\"Current conditions:\" + temprature + \"F degree and\" + humidity + \"% humidity\");\n      }\n  }\n\n```\n\n  DisplayElement.java\n\n```java\n  public interface DisplayElement{\n      public void display();\n  }\n```\n\n  ObserverMain.java\n\n```java\n  public class ObserverMain {\n\n     public static void main(String[] args){\n\n         WetherData wetherData = new WetherData();\n\n  \tCurrentConditionDisplay currentConditionDisplay = new currentConditionDisplay(wetherData);\n\n         wetherData.setMeasurements(80,65,30.1f);\n         wetherData.setMeasurements(40,30,10.9f);\n         wetherData.setMeasurements(10,20,28.3f);\n\n     }\n\n  }\n```\n\n  编译，执行看下结果呢。\n\n  ```\n  F:/java ObserverMain\n  Current conditions:80.0F degree and65.0% humidity\n  Current conditions:40.0F degree and30.0% humidity\n  Current conditions:10.0F degree and20.0% humidity\n  ```\n\n  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。\n\n","source":"_posts/Observer-Notes.md","raw":"---\ntitle: 设计模式学习之观察者模式\ndate: 2016-12-16 15:57:06\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 观察者模式\n---\n\n之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了....看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。\n\n<!-- more -->\n\n观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  \n\n> 观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。\n\n-----摘自《Head First设计模式》  \n\n那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。\n\n观察者模式的最基本的类图如下：  \n\n![image](/blogimg/ObserverUML.bmp)\n\n> Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除\n\n> Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用\n\n> ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者\n\n> ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知\n\n  接着来具体实现一下书上提供的气象站的例子：\n\n  Subject.java\n\n```java\n  public interface Subject{\n      public void registerObserver(Observer o); //注册观察者\n      public void removeObserver(Observer o); //移除观察者\n      public void notifyObservers(); //当有更新事件发生时，通知观察者\n  }\n```\n\n  Observer.java\n\n```java\n  public interface Observer{\n      public void update(float temp, float humidity, float pressure);\n      //所有的观察者都必须实现update()方法，以实现观察者接口\n  }\n```\n\n  WetherData.java\n\n```java\n  public class WetherData implements Subject { //需要实现Subject接口\n\n      private ArrayList observers; //用于存放注册的所有观察者对象\n      private float tempature;\n      private float humidity;\n      private float pressure;\n\n      public WetherData(){\n          observers = new ArrayList();\n      }\n      @Override\n      public void registerObserver(Observer o) {\n          this.observers.add(o);\n      }\n\n      @Override\n      public void removeObserver(Observer o) {\n              int i = observers.indexOf(o);\n              if(i > 0){\n                  observers.remove(i);\n              }\n      }\n\n      @Override\n      public void notifyObservers() {\n        /*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/\n          for(int i = 0; i < observers.size(); i++){\n              Observer observer=(Observer)observers.get(i);\n              observer.update(tempature, humidity, pressure);\n          }\n      }\n\n      public void measurementsChanged(){\n        //接收更新事件通知，然后告诉所有的注册的观察者\n          notifyObservers();\n      }\n\n      public void setMeasurements(float tempature, float humidity, float pressure){\n  \t\t//当有的气象观测数据到来，调用此方法\n          this.tempature = tempature;\n          this.humidity = humidity;\n          this.pressure = pressure;\n       \n          measurementsChanged(); //发出通知\n      }\n  }\n\n```\n\n  CurrentConditionDisplay.java\n\n```java\n  //这是气象数据显示的公告板，它实现了Observer接口，成为了观察者\n  public class CurrentConditionDisplay implements Observer, DisplayElement {\n\n      private float temprature;\n      private float humidity;\n      private Subject weatherData;\n\n      public CurrentConditionDisplay(Subject weatherData){\n\n          this.weatherData = weatherData;\n        //注册成为wetherData的观察者，随时准备接收新数据\n          weatherData.registerObserver(this);\n      }\n      @Override\n      public void update(float temp, float humidity, float pressure) {\n  \t\t\t//取得来自Subject的数据，并暂存起来用于稍后的显示\n              this.temprature = temp;\n              this.humidity = humidity;\n              display();\n      }\n\n      @Override\n      public void display() {\n        //显示数据\n          System.out.println(\"Current conditions:\" + temprature + \"F degree and\" + humidity + \"% humidity\");\n      }\n  }\n\n```\n\n  DisplayElement.java\n\n```java\n  public interface DisplayElement{\n      public void display();\n  }\n```\n\n  ObserverMain.java\n\n```java\n  public class ObserverMain {\n\n     public static void main(String[] args){\n\n         WetherData wetherData = new WetherData();\n\n  \tCurrentConditionDisplay currentConditionDisplay = new currentConditionDisplay(wetherData);\n\n         wetherData.setMeasurements(80,65,30.1f);\n         wetherData.setMeasurements(40,30,10.9f);\n         wetherData.setMeasurements(10,20,28.3f);\n\n     }\n\n  }\n```\n\n  编译，执行看下结果呢。\n\n  ```\n  F:/java ObserverMain\n  Current conditions:80.0F degree and65.0% humidity\n  Current conditions:40.0F degree and30.0% humidity\n  Current conditions:10.0F degree and20.0% humidity\n  ```\n\n  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。\n\n","slug":"Observer-Notes","published":1,"updated":"2016-12-16T11:38:15.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wq001ezgtopjdd1m18","content":"<p>之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了….看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。</p>\n<a id=\"more\"></a>\n<p>观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  </p>\n<blockquote>\n<p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。</p>\n</blockquote>\n<p>—–摘自《Head First设计模式》  </p>\n<p>那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。</p>\n<p>观察者模式的最基本的类图如下：  </p>\n<p><img src=\"/blogimg/ObserverUML.bmp\" alt=\"image\"></p>\n<blockquote>\n<p>Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除</p>\n<p>Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用</p>\n<p>ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者</p>\n<p>ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知</p>\n</blockquote>\n<p>  接着来具体实现一下书上提供的气象站的例子：</p>\n<p>  Subject.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//注册观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//移除观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>; <span class=\"comment\">//当有更新事件发生时，通知观察者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Observer.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</div><div class=\"line\">    <span class=\"comment\">//所有的观察者都必须实现update()方法，以实现观察者接口</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  WetherData.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WetherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123; <span class=\"comment\">//需要实现Subject接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers; <span class=\"comment\">//用于存放注册的所有观察者对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> tempature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WetherData</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.add(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i = observers.indexOf(o);</div><div class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                observers.remove(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++)&#123;</div><div class=\"line\">            Observer observer=(Observer)observers.get(i);</div><div class=\"line\">            observer.update(tempature, humidity, pressure);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//接收更新事件通知，然后告诉所有的注册的观察者</span></div><div class=\"line\">        notifyObservers();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> tempature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当有的气象观测数据到来，调用此方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.tempature = tempature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</div><div class=\"line\">     </div><div class=\"line\">        measurementsChanged(); <span class=\"comment\">//发出通知</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  CurrentConditionDisplay.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是气象数据显示的公告板，它实现了Observer接口，成为了观察者</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temprature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionDisplay</span><span class=\"params\">(Subject weatherData)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</div><div class=\"line\">      <span class=\"comment\">//注册成为wetherData的观察者，随时准备接收新数据</span></div><div class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//取得来自Subject的数据，并暂存起来用于稍后的显示</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.temprature = temp;</div><div class=\"line\">            <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">            display();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//显示数据</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions:\"</span> + temprature + <span class=\"string\">\"F degree and\"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  DisplayElement.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  ObserverMain.java</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">       WetherData wetherData = <span class=\"keyword\">new</span> WetherData();</div><div class=\"line\"></div><div class=\"line\">\tCurrentConditionDisplay currentConditionDisplay = <span class=\"keyword\">new</span> currentConditionDisplay(wetherData);</div><div class=\"line\"></div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">80</span>,<span class=\"number\">65</span>,<span class=\"number\">30.1f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">10.9f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">28.3f</span>);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  编译，执行看下结果呢。</p>\n  <figure class=\"highlight plain\" data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:/java ObserverMain</div><div class=\"line\">Current conditions:80.0F degree and65.0% humidity</div><div class=\"line\">Current conditions:40.0F degree and30.0% humidity</div><div class=\"line\">Current conditions:10.0F degree and20.0% humidity</div></pre></td></tr></table></figure>\n<p>  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。</p>\n","excerpt":"<p>之前在学习java的过程中，总提到总会遇到“设计模式”，诸如工厂模式了，观察者模式了，单例模式了….看起来云里雾里的。趁最近空闲时间多了些，来把这些设计模式都熟悉一下。我看的书的《Head First 设计模式 》，这个系列的书看起来还蛮有意思的。不闲扯了，这篇博文是我学习“观察者模式”的笔记。</p>","more":"<p>观察者模式有时也被称作“发布-订阅”模式。这种模式有点像我们去订阅报纸，我们是订阅者，报社是发布者，每当报社出版了新的报纸，我们就能够收到最新的报纸了。  在GUI编程中，控件的事件监听算是观察者模式的具体应用了吧。  </p>\n<blockquote>\n<p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象发生改变时，它的所有依赖者都会收到通知并自动更新。</p>\n</blockquote>\n<p>—–摘自《Head First设计模式》  </p>\n<p>那么我们具体来实现一种观察者模式的应用，这样看起来就更加直观了。</p>\n<p>观察者模式的最基本的类图如下：  </p>\n<p><img src=\"/blogimg/ObserverUML.bmp\" alt=\"image\"></p>\n<blockquote>\n<p>Subject接口：定义的主题接口，对象使用此接口注册为观察者，或者把自己从观察者之中删除</p>\n<p>Observer接口：所有潜在的观察者必须实现观察者接口，这个接口只有update方法，当主题状态改变时调用</p>\n<p>ConcreteSubject类：一个具体的主题，实现了Subject接口，除了注册和撤销方法，该主题还实现了notifyObserver()方法，用来在状态改变时，通知所有的观察者</p>\n<p>ConcreteObserver类：具体的观察者，它实现了Observer接口，观察者必须注册具体的Subject，才能够就收到更新事件的通知</p>\n</blockquote>\n<p>  接着来具体实现一下书上提供的气象站的例子：</p>\n<p>  Subject.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//注册观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span></span>; <span class=\"comment\">//移除观察者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span></span>; <span class=\"comment\">//当有更新事件发生时，通知观察者</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  Observer.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Observer</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>;</div><div class=\"line\">    <span class=\"comment\">//所有的观察者都必须实现update()方法，以实现观察者接口</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  WetherData.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WetherData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123; <span class=\"comment\">//需要实现Subject接口</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ArrayList observers; <span class=\"comment\">//用于存放注册的所有观察者对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> tempature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> pressure;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WetherData</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        observers = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.observers.add(o);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeObserver</span><span class=\"params\">(Observer o)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> i = observers.indexOf(o);</div><div class=\"line\">            <span class=\"keyword\">if</span>(i &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">                observers.remove(i);</div><div class=\"line\">            &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyObservers</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/*当有更新事件发生时，调用此方法。在这里，它会去挨个通知注册的观察者，让他们执行update()方法更新数据*/</span></div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; observers.size(); i++)&#123;</div><div class=\"line\">            Observer observer=(Observer)observers.get(i);</div><div class=\"line\">            observer.update(tempature, humidity, pressure);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">measurementsChanged</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">      <span class=\"comment\">//接收更新事件通知，然后告诉所有的注册的观察者</span></div><div class=\"line\">        notifyObservers();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMeasurements</span><span class=\"params\">(<span class=\"keyword\">float</span> tempature, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//当有的气象观测数据到来，调用此方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.tempature = tempature;</div><div class=\"line\">        <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">        <span class=\"keyword\">this</span>.pressure = pressure;</div><div class=\"line\">     </div><div class=\"line\">        measurementsChanged(); <span class=\"comment\">//发出通知</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  CurrentConditionDisplay.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这是气象数据显示的公告板，它实现了Observer接口，成为了观察者</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CurrentConditionDisplay</span> <span class=\"keyword\">implements</span> <span class=\"title\">Observer</span>, <span class=\"title\">DisplayElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> temprature;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> humidity;</div><div class=\"line\">    <span class=\"keyword\">private</span> Subject weatherData;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CurrentConditionDisplay</span><span class=\"params\">(Subject weatherData)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.weatherData = weatherData;</div><div class=\"line\">      <span class=\"comment\">//注册成为wetherData的观察者，随时准备接收新数据</span></div><div class=\"line\">        weatherData.registerObserver(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">float</span> temp, <span class=\"keyword\">float</span> humidity, <span class=\"keyword\">float</span> pressure)</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//取得来自Subject的数据，并暂存起来用于稍后的显示</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.temprature = temp;</div><div class=\"line\">            <span class=\"keyword\">this</span>.humidity = humidity;</div><div class=\"line\">            display();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//显示数据</span></div><div class=\"line\">        System.out.println(<span class=\"string\">\"Current conditions:\"</span> + temprature + <span class=\"string\">\"F degree and\"</span> + humidity + <span class=\"string\">\"% humidity\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  DisplayElement.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DisplayElement</span></span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  ObserverMain.java</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObserverMain</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">       WetherData wetherData = <span class=\"keyword\">new</span> WetherData();</div><div class=\"line\"></div><div class=\"line\">\tCurrentConditionDisplay currentConditionDisplay = <span class=\"keyword\">new</span> currentConditionDisplay(wetherData);</div><div class=\"line\"></div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">80</span>,<span class=\"number\">65</span>,<span class=\"number\">30.1f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">40</span>,<span class=\"number\">30</span>,<span class=\"number\">10.9f</span>);</div><div class=\"line\">       wetherData.setMeasurements(<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">28.3f</span>);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  编译，执行看下结果呢。</p>\n  <figure class=\"highlight plain\"data-lang=\" plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">F:/java ObserverMain</div><div class=\"line\">Current conditions:80.0F degree and65.0% humidity</div><div class=\"line\">Current conditions:40.0F degree and30.0% humidity</div><div class=\"line\">Current conditions:10.0F degree and20.0% humidity</div></pre></td></tr></table></figure>\n<p>  Nice，咱们的气象站一收到新的数据，公告板就及时的将数据显示了出来。</p>"},{"title":"与Tornado的第一次接触","date":"2016-12-15T11:59:25.000Z","_content":"Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。\n<!-- more -->\n### 0x1:tornado的安装\n安装Tornado也简直不能再省事儿，一句话就可以搞定：\n```bash\nstar-chen@starchen-vb:~$ pip install tornado\nCollecting tornado\n  Downloading tornado-4.4.2.tar.gz (460kB)\n    100% |████████████████████████████████| 460kB 21kB/s \nCollecting singledispatch (from tornado)\n  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting certifi (from tornado)\n  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)\n    100% |████████████████████████████████| 378kB 37kB/s \nCollecting backports_abc>=0.4 (from tornado)\n  Downloading backports_abc-0.5-py2.py3-none-any.whl\nCollecting six (from singledispatch->tornado)\n  Downloading six-1.10.0-py2.py3-none-any.whl\nBuilding wheels for collected packages: tornado\n  Running setup.py bdist_wheel for tornado ... done\n  Stored in directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c\nSuccessfully built tornado\nInstalling collected packages: six, singledispatch, certifi, backports-abc, tornado\nSuccessfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.\n```\n### 0x2:tornado的helloworld \n话不多讲，直接上代码\n```python\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"hello world\");\n\ndef HelloApp():\n\treturn tornado.web.Application([\n\t\t(r\"/\",MainHandler),\n\t])\n\nif __name__ == \"__main__\":\n\tapp = HelloApp()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.current().start()\n```\n看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。\n### 0x3:代码运行\n```bash\n$python hello.py\n```\n```bash\n$curl localhost:8888\nhello world\n```\n用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。\n","source":"_posts/tornado-hello-world.md","raw":"---\ntitle: 与Tornado的第一次接触\ndate: 2016-12-15 19:59:25\ncategories:\n- Program\ntags:\n- python\n- web\n- tornado\n---\nTornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。\n<!-- more -->\n### 0x1:tornado的安装\n安装Tornado也简直不能再省事儿，一句话就可以搞定：\n```bash\nstar-chen@starchen-vb:~$ pip install tornado\nCollecting tornado\n  Downloading tornado-4.4.2.tar.gz (460kB)\n    100% |████████████████████████████████| 460kB 21kB/s \nCollecting singledispatch (from tornado)\n  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl\nCollecting certifi (from tornado)\n  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)\n    100% |████████████████████████████████| 378kB 37kB/s \nCollecting backports_abc>=0.4 (from tornado)\n  Downloading backports_abc-0.5-py2.py3-none-any.whl\nCollecting six (from singledispatch->tornado)\n  Downloading six-1.10.0-py2.py3-none-any.whl\nBuilding wheels for collected packages: tornado\n  Running setup.py bdist_wheel for tornado ... done\n  Stored in directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c\nSuccessfully built tornado\nInstalling collected packages: six, singledispatch, certifi, backports-abc, tornado\nSuccessfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.\n```\n### 0x2:tornado的helloworld \n话不多讲，直接上代码\n```python\nimport tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n\tdef get(self):\n\t\tself.write(\"hello world\");\n\ndef HelloApp():\n\treturn tornado.web.Application([\n\t\t(r\"/\",MainHandler),\n\t])\n\nif __name__ == \"__main__\":\n\tapp = HelloApp()\n\tapp.listen(8888)\n\ttornado.ioloop.IOLoop.current().start()\n```\n看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。\n### 0x3:代码运行\n```bash\n$python hello.py\n```\n```bash\n$curl localhost:8888\nhello world\n```\n用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。\n","slug":"tornado-hello-world","published":1,"updated":"2016-12-16T05:31:33.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588wu001izgto4j59jh4i","content":"<p>Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。<br><a id=\"more\"></a></p>\n<h3 id=\"0x1-tornado的安装\"><a href=\"#0x1-tornado的安装\" class=\"headerlink\" title=\"0x1:tornado的安装\"></a>0x1:tornado的安装</h3><p>安装Tornado也简直不能再省事儿，一句话就可以搞定：<br><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ pip install tornado</div><div class=\"line\">Collecting tornado</div><div class=\"line\">  Downloading tornado-4.4.2.tar.gz (460kB)</div><div class=\"line\">    100% |████████████████████████████████| 460kB 21kB/s </div><div class=\"line\">Collecting singledispatch (from tornado)</div><div class=\"line\">  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl</div><div class=\"line\">Collecting certifi (from tornado)</div><div class=\"line\">  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)</div><div class=\"line\">    100% |████████████████████████████████| 378kB 37kB/s </div><div class=\"line\">Collecting backports_abc&gt;=0.4 (from tornado)</div><div class=\"line\">  Downloading backports_abc-0.5-py2.py3-none-any.whl</div><div class=\"line\">Collecting six (from singledispatch-&gt;tornado)</div><div class=\"line\">  Downloading six-1.10.0-py2.py3-none-any.whl</div><div class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: tornado</div><div class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> tornado ... <span class=\"keyword\">done</span></div><div class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c</div><div class=\"line\">Successfully built tornado</div><div class=\"line\">Installing collected packages: six, singledispatch, certifi, backports-abc, tornado</div><div class=\"line\">Successfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.</div></pre></td></tr></table></figure></p>\n<h3 id=\"0x2-tornado的helloworld\"><a href=\"#0x2-tornado的helloworld\" class=\"headerlink\" title=\"0x2:tornado的helloworld\"></a>0x2:tornado的helloworld</h3><p>话不多讲，直接上代码<br><figure class=\"highlight python\" data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HelloApp</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\">\t\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">\t])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = HelloApp()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure></p>\n<p>看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。</p>\n<h3 id=\"0x3-代码运行\"><a href=\"#0x3-代码运行\" class=\"headerlink\" title=\"0x3:代码运行\"></a>0x3:代码运行</h3><figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$python</span> hello.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$curl</span> localhost:8888</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。</p>\n","excerpt":"<p>Tornado框架是一款由Facebook团队开源的高效率的轻量级的非阻塞式web框架，由python编写而成。框架内部的具体实现我暂时不去深究，咱们首选学习一下它的简单使用，爽一爽先。<br>","more":"</p>\n<h3 id=\"0x1-tornado的安装\"><a href=\"#0x1-tornado的安装\" class=\"headerlink\" title=\"0x1:tornado的安装\"></a>0x1:tornado的安装</h3><p>安装Tornado也简直不能再省事儿，一句话就可以搞定：<br><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">star-chen@starchen-vb:~$ pip install tornado</div><div class=\"line\">Collecting tornado</div><div class=\"line\">  Downloading tornado-4.4.2.tar.gz (460kB)</div><div class=\"line\">    100% |████████████████████████████████| 460kB 21kB/s </div><div class=\"line\">Collecting singledispatch (from tornado)</div><div class=\"line\">  Downloading singledispatch-3.4.0.3-py2.py3-none-any.whl</div><div class=\"line\">Collecting certifi (from tornado)</div><div class=\"line\">  Downloading certifi-2016.9.26-py2.py3-none-any.whl (377kB)</div><div class=\"line\">    100% |████████████████████████████████| 378kB 37kB/s </div><div class=\"line\">Collecting backports_abc&gt;=0.4 (from tornado)</div><div class=\"line\">  Downloading backports_abc-0.5-py2.py3-none-any.whl</div><div class=\"line\">Collecting six (from singledispatch-&gt;tornado)</div><div class=\"line\">  Downloading six-1.10.0-py2.py3-none-any.whl</div><div class=\"line\">Building wheels <span class=\"keyword\">for</span> collected packages: tornado</div><div class=\"line\">  Running setup.py bdist_wheel <span class=\"keyword\">for</span> tornado ... <span class=\"keyword\">done</span></div><div class=\"line\">  Stored <span class=\"keyword\">in</span> directory: /home/star-chen/.cache/pip/wheels/b3/db/47/46e05d1ee3ecfba252fcab42f0a156dab0df0cddf99fa0827c</div><div class=\"line\">Successfully built tornado</div><div class=\"line\">Installing collected packages: six, singledispatch, certifi, backports-abc, tornado</div><div class=\"line\">Successfully installed backports-abc-0.5 certifi-2016.9.26 singledispatch-3.4.0.</div></pre></td></tr></table></figure></p>\n<h3 id=\"0x2-tornado的helloworld\"><a href=\"#0x2-tornado的helloworld\" class=\"headerlink\" title=\"0x2:tornado的helloworld\"></a>0x2:tornado的helloworld</h3><p>话不多讲，直接上代码<br><figure class=\"highlight python\"data-lang=\" python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> tornado.ioloop</div><div class=\"line\"><span class=\"keyword\">import</span> tornado.web</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainHandler</span><span class=\"params\">(tornado.web.RequestHandler)</span>:</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">\t\tself.write(<span class=\"string\">\"hello world\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">HelloApp</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> tornado.web.Application([</div><div class=\"line\">\t\t(<span class=\"string\">r\"/\"</span>,MainHandler),</div><div class=\"line\">\t])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">\tapp = HelloApp()</div><div class=\"line\">\tapp.listen(<span class=\"number\">8888</span>)</div><div class=\"line\">\ttornado.ioloop.IOLoop.current().start()</div></pre></td></tr></table></figure></p>\n<p>看起来还是十分简洁明了的，就这么几句代码，就包含了路由规则的创建、事件处理函数的绑定、服务器的监听开启。</p>\n<h3 id=\"0x3-代码运行\"><a href=\"#0x3-代码运行\" class=\"headerlink\" title=\"0x3:代码运行\"></a>0x3:代码运行</h3><figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$python</span> hello.py</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$curl</span> localhost:8888</div><div class=\"line\">hello world</div></pre></td></tr></table></figure>\n<p>用浏览器访问一下，可以看到浏览器上已经输出了“hello world”,说明咱们的tornado已经正常运行了。接下来继续学习怎么在tornado中取得用户提交的参数。</p>"},{"title":"Let's Encrypt && Nginx配置证书，实现https访问","date":"2016-12-15T07:01:36.000Z","_content":"\n### 0x1:Why?\n\n在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议\n\n> HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是*客户机*和一个计算机上运行的应用托管一个网站可以是*服务器*。该客户机提交一个HTTP *请求*消息发送到服务器。服务器，它提供*的资源*如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个*响应*消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。\n>\n> 网络浏览器是一个的例子*的用户代理*（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。\n>\n> 的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。\n>\n> HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。\n>\n> HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，*HTTP*和*HTTPS*。URI和超链接的HTML文档形成相互关联的超文本文档。\n>\n> HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，*等等*页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。\n\n-------引自wikipedia [维基百科.HTTP词条]( https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n\n<!-- more -->\n\n但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP.....）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。\n\n那什么又是HTTPS呢？  \n\n> HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的[HTTP](http://baike.baidu.com/view/9472.htm)通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  \n\n------引自百度百科 [百度百科.HTTPS词条](http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa)\n\n相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：\n\n1. 内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。\n2. 身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持\n3. 数据完整性。防止内容被第三方冒充或者篡改。\n\n###  0x2:How?\n\n要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl [Start ssl](https://www.startssl.com/)、Let's Encrypt [Let's Encrypt](https://letsencrypt.org/)等。我用的是Let's Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。[申请Let's encrypt证书](https://letsencrypt.org/getting-started/) 下面是我参考网上一哥们一篇博文[Jerry Qu 申请Let's Encrypt](https://imququ.com/post/letsencrypt-certificate.html)实际申请证书的具体过程如下：\n\n1. 创建帐号\n\n创建一个目录，例如 *ssl*，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件\n\n```bash\n#openssl genrsa 4096 > account.key\n```\n\n2. 创建CSR文件\n\n生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。\n\n```bash\n#openssl genrsa 4096 > domain.key\n#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可\n```\n\n3. 配置验证服务\n\nCA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let's Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。\n\n```bash\n#mkdir -p /var/blog/.well-known/acme-chanllenge //建立验证文件存放目录\n```\n\n4. 获取HTTPS证书\n\n先下载一个acme-tiny的脚本，保存在*ssl*目录：\n\n```bash\n#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR、验证目录，然后执行脚本：\n\n```bash\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ > ./signed.crt\n\n```\n\n如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。\n\n下载Let's Encrypt的中间证书，并和网站证书合并在一起:\n\n```bash\n#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n#cat signed.crt intermediate.pem > chained.pem\n```\n\n再把根证书和中间证书合并在一起：\n\n```bash\n#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n#cat intermediate.pem root.pem > full_chained.pem\n```\n\n5. 配置Nginx，开启https\n\n   ```bash\n   ssl_certificate     ~/ssl/chained.pem;\n   ssl_certificate_key ~/ssl/domain.key;\n   ```\n\n   ​\n\n   因为Let's Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  \n\n### 0x3 That's All\n\n经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，*It's Encrypt!*  \n\n最后还是感谢一下Jerry Qu撰写的博客文章， [Jerry Qu](https://imququ.com/)","source":"_posts/Let-s-Encrypt.md","raw":"---\ntitle: Let's Encrypt && Nginx配置证书，实现https访问\ndate: 2016-12-15 15:01:36\ncategories:\n- Linux\ntags:\n- https\n- nginx\n---\n\n### 0x1:Why?\n\n在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议\n\n> HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是*客户机*和一个计算机上运行的应用托管一个网站可以是*服务器*。该客户机提交一个HTTP *请求*消息发送到服务器。服务器，它提供*的资源*如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个*响应*消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。\n>\n> 网络浏览器是一个的例子*的用户代理*（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。\n>\n> 的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。\n>\n> HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。\n>\n> HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，*HTTP*和*HTTPS*。URI和超链接的HTML文档形成相互关联的超文本文档。\n>\n> HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，*等等*页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。\n\n-------引自wikipedia [维基百科.HTTP词条]( https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol)\n\n<!-- more -->\n\n但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP.....）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。\n\n那什么又是HTTPS呢？  \n\n> HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的[HTTP](http://baike.baidu.com/view/9472.htm)通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  \n\n------引自百度百科 [百度百科.HTTPS词条](http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa)\n\n相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：\n\n1. 内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。\n2. 身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持\n3. 数据完整性。防止内容被第三方冒充或者篡改。\n\n###  0x2:How?\n\n要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl [Start ssl](https://www.startssl.com/)、Let's Encrypt [Let's Encrypt](https://letsencrypt.org/)等。我用的是Let's Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。[申请Let's encrypt证书](https://letsencrypt.org/getting-started/) 下面是我参考网上一哥们一篇博文[Jerry Qu 申请Let's Encrypt](https://imququ.com/post/letsencrypt-certificate.html)实际申请证书的具体过程如下：\n\n1. 创建帐号\n\n创建一个目录，例如 *ssl*，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件\n\n```bash\n#openssl genrsa 4096 > account.key\n```\n\n2. 创建CSR文件\n\n生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。\n\n```bash\n#openssl genrsa 4096 > domain.key\n#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可\n```\n\n3. 配置验证服务\n\nCA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let's Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。\n\n```bash\n#mkdir -p /var/blog/.well-known/acme-chanllenge //建立验证文件存放目录\n```\n\n4. 获取HTTPS证书\n\n先下载一个acme-tiny的脚本，保存在*ssl*目录：\n\n```bash\n#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n```\n\n指定账户私钥、CSR、验证目录，然后执行脚本：\n\n```bash\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ > ./signed.crt\n\n```\n\n如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。\n\n下载Let's Encrypt的中间证书，并和网站证书合并在一起:\n\n```bash\n#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n#cat signed.crt intermediate.pem > chained.pem\n```\n\n再把根证书和中间证书合并在一起：\n\n```bash\n#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem\n#cat intermediate.pem root.pem > full_chained.pem\n```\n\n5. 配置Nginx，开启https\n\n   ```bash\n   ssl_certificate     ~/ssl/chained.pem;\n   ssl_certificate_key ~/ssl/domain.key;\n   ```\n\n   ​\n\n   因为Let's Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  \n\n### 0x3 That's All\n\n经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，*It's Encrypt!*  \n\n最后还是感谢一下Jerry Qu撰写的博客文章， [Jerry Qu](https://imququ.com/)","slug":"Let-s-Encrypt","published":1,"updated":"2016-12-15T09:14:38.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2k588ww001kzgto8j0k2pco","content":"<h3 id=\"0x1-Why\"><a href=\"#0x1-Why\" class=\"headerlink\" title=\"0x1:Why?\"></a>0x1:Why?</h3><p>在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议</p>\n<blockquote>\n<p>HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是<em>客户机</em>和一个计算机上运行的应用托管一个网站可以是<em>服务器</em>。该客户机提交一个HTTP <em>请求</em>消息发送到服务器。服务器，它提供<em>的资源</em>如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个<em>响应</em>消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。</p>\n<p>网络浏览器是一个的例子<em>的用户代理</em>（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。</p>\n<p>的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。</p>\n<p>HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。</p>\n<p>HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，<em>HTTP</em>和<em>HTTPS</em>。URI和超链接的HTML文档形成相互关联的超文本文档。</p>\n<p>HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，<em>等等</em>页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。</p>\n</blockquote>\n<p>——-引自wikipedia <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\" target=\"_blank\" rel=\"external\">维基百科.HTTP词条</a></p>\n<a id=\"more\"></a>\n<p>但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP…..）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。</p>\n<p>那什么又是HTTPS呢？  </p>\n<blockquote>\n<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的<a href=\"http://baike.baidu.com/view/9472.htm\" target=\"_blank\" rel=\"external\">HTTP</a>通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  </p>\n</blockquote>\n<p>——引自百度百科 <a href=\"http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa\" target=\"_blank\" rel=\"external\">百度百科.HTTPS词条</a></p>\n<p>相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：</p>\n<ol>\n<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li>\n<li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li>\n<li>数据完整性。防止内容被第三方冒充或者篡改。</li>\n</ol>\n<h3 id=\"0x2-How\"><a href=\"#0x2-How\" class=\"headerlink\" title=\"0x2:How?\"></a>0x2:How?</h3><p>要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl <a href=\"https://www.startssl.com/\" target=\"_blank\" rel=\"external\">Start ssl</a>、Let’s Encrypt <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a>等。我用的是Let’s Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。<a href=\"https://letsencrypt.org/getting-started/\" target=\"_blank\" rel=\"external\">申请Let’s encrypt证书</a> 下面是我参考网上一哥们一篇博文<a href=\"https://imququ.com/post/letsencrypt-certificate.html\" target=\"_blank\" rel=\"external\">Jerry Qu 申请Let’s Encrypt</a>实际申请证书的具体过程如下：</p>\n<ol>\n<li>创建帐号</li>\n</ol>\n<p>创建一个目录，例如 <em>ssl</em>，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; account.key</span></div></pre></td></tr></table></figure>\n<ol>\n<li>创建CSR文件</li>\n</ol>\n<p>生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; domain.key</span></div><div class=\"line\"><span class=\"comment\">#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可</span></div></pre></td></tr></table></figure>\n<ol>\n<li>配置验证服务</li>\n</ol>\n<p>CA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let’s Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mkdir -p /var/blog/.well-known/acme-chanllenge //建立验证文件存放目录</span></div></pre></td></tr></table></figure>\n<ol>\n<li>获取HTTPS证书</li>\n</ol>\n<p>先下载一个acme-tiny的脚本，保存在<em>ssl</em>目录：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span></div></pre></td></tr></table></figure>\n<p>指定账户私钥、CSR、验证目录，然后执行脚本：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ &gt; ./signed.crt</div></pre></td></tr></table></figure>\n<p>如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。</p>\n<p>下载Let’s Encrypt的中间证书，并和网站证书合并在一起:</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span></div><div class=\"line\"><span class=\"comment\">#cat signed.crt intermediate.pem &gt; chained.pem</span></div></pre></td></tr></table></figure>\n<p>再把根证书和中间证书合并在一起：</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</span></div><div class=\"line\"><span class=\"comment\">#cat intermediate.pem root.pem &gt; full_chained.pem</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>配置Nginx，开启https</p>\n<figure class=\"highlight bash\" data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_certificate     ~/ssl/chained.pem;</div><div class=\"line\">ssl_certificate_key ~/ssl/domain.key;</div></pre></td></tr></table></figure>\n<p>​</p>\n<p>因为Let’s Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  </p>\n</li>\n</ol>\n<h3 id=\"0x3-That’s-All\"><a href=\"#0x3-That’s-All\" class=\"headerlink\" title=\"0x3 That’s All\"></a>0x3 That’s All</h3><p>经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，<em>It’s Encrypt!</em>  </p>\n<p>最后还是感谢一下Jerry Qu撰写的博客文章， <a href=\"https://imququ.com/\" target=\"_blank\" rel=\"external\">Jerry Qu</a></p>\n","excerpt":"<h3 id=\"0x1-Why\"><a href=\"#0x1-Why\" class=\"headerlink\" title=\"0x1:Why?\"></a>0x1:Why?</h3><p>在聊HTTPS之前，先来了解一下被广泛使用的HTTP协议</p>\n<blockquote>\n<p>HTTP函数作为请求-响应于协议的客户端-服务器计算模型。一个网络浏览器，例如，可以是<em>客户机</em>和一个计算机上运行的应用托管一个网站可以是<em>服务器</em>。该客户机提交一个HTTP <em>请求</em>消息发送到服务器。服务器，它提供<em>的资源</em>如HTML文件和其他内容，或代表客户机的执行其它功能，返回一个<em>响应</em>消息给客户端。响应包含关于请求完成状态信息，并且还可以含有在其消息主体请求的内容。</p>\n<p>网络浏览器是一个的例子<em>的用户代理</em>（UA）。其他类型的用户代理包括由搜索服务提供商（使用的索引软件网络爬虫，语音浏览器，移动应用程序和其他软件访问，消费，或显示网页内容。</p>\n<p>的HTTP被设计成允许中间网络元件，以改善或允许客户端和服务器之间的通信。高流量的网站往往受益于Web缓存的代表提供的内容服务器上游服务器以提高响应时间。Web浏览器的缓存以前访问网络资源并尽可能减少网络流量重用他们。HTTP代理服务器的专用网络边界可以方便为客户的沟通没有一个全球可路由的地址，通过与外部服务器中继消息。</p>\n<p>HTTP是一个应用层协议的框架内，设计的因特网协议套件。它的定义假定底层和可靠的传输层的协议，和传输控制协议（TCP）是常用的。然而HTTP可以适于使用不可靠的协议，如用户数据报协议（UDP），例如在HTTPU和简单服务发现协议（SSDP）。</p>\n<p>HTTP资源得到确认和位于网络通[统一资源定位器（URL）的，使用统一资源标识符（URI的）计划，<em>HTTP</em>和<em>HTTPS</em>。URI和超链接的HTML文档形成相互关联的超文本文档。</p>\n<p>HTTP / 1.1是原来的HTTP（HTTP / 1.0）的修订。在HTTP / 1.0的单独连接到同一台服务器为每个资源的要求而作出。HTTP / 1.1可以重复使用的连接多次下载图像，脚本，样式表，<em>等等</em>页面已交付之后。因此，HTTP / 1.1的通信经验少的延迟为建立TCP连接的呈现相当大的开销。</p>\n</blockquote>\n<p>——-引自wikipedia <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol\">维基百科.HTTP词条</a></p>","more":"<p>但是HTTP协议本身不具备加密功能，所有的通讯数据都是在网络上裸奔。所以HTTP链接很容易被“中间人攻击“，HTTP链接网络环节中的中间人（浏览器、路由器、ISP…..）可以对数据进行嗅探，欺骗，劫持，阻挡等等。明文传输的用户数据还容易泄露。</p>\n<p>那什么又是HTTPS呢？  </p>\n<blockquote>\n<p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的<a href=\"http://baike.baidu.com/view/9472.htm\">HTTP</a>通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。  </p>\n</blockquote>\n<p>——引自百度百科 <a href=\"http://baike.baidu.com/link?url=ZSi0Ny56ylfHKJ4PEny2ogN3HkMf8QClbf_TulpLkRcei0-Z2w4SnxLVBnJPX5qkHHZOgKgQl78yBX60xdorUa\">百度百科.HTTPS词条</a></p>\n<p>相比较于HTTP协议，HTTPS在HTTP的基础上增加了SSL（安全套接字层）。SSL的引入为连接的建立和数据的传输都进行了加密，在密钥足够健壮的情形下，是比较安全的。相较于HTTP，HTTPS提供了以下三个强大的功能：</p>\n<ol>\n<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。</li>\n<li>身份认证。保证用户访问的是百度服务，即使被 DNS 劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持</li>\n<li>数据完整性。防止内容被第三方冒充或者篡改。</li>\n</ol>\n<h3 id=\"0x2-How\"><a href=\"#0x2-How\" class=\"headerlink\" title=\"0x2:How?\"></a>0x2:How?</h3><p>要进行HTTPS加密，我们首先需要向证书颁发机构（CA）申请加密证书。免费的证书颁发机构有Startssl <a href=\"https://www.startssl.com/\">Start ssl</a>、Let’s Encrypt <a href=\"https://letsencrypt.org/\">Let’s Encrypt</a>等。我用的是Let’s Encrypt颁发的证书，它操作起来比较简单。它的官方网站上有介绍具体的申请步骤。<a href=\"https://letsencrypt.org/getting-started/\">申请Let’s encrypt证书</a> 下面是我参考网上一哥们一篇博文<a href=\"https://imququ.com/post/letsencrypt-certificate.html\">Jerry Qu 申请Let’s Encrypt</a>实际申请证书的具体过程如下：</p>\n<ol>\n<li>创建帐号</li>\n</ol>\n<p>创建一个目录，例如 <em>ssl</em>，用来存放各种临时文件和最红生成的证书文件。首先创建一个私钥文件</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; account.key</span></div></pre></td></tr></table></figure>\n<ol>\n<li>创建CSR文件</li>\n</ol>\n<p>生成CSR（Certificate Signing Request，证书签名请求）文件。需要准备一个域名私钥，这里我选择RSA私钥。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#openssl genrsa 4096 &gt; domain.key</span></div><div class=\"line\"><span class=\"comment\">#openssl req -new -sha256 -key domain.key -out domain.csr //手动生成csr文件，根据提示进行操作即可</span></div></pre></td></tr></table></figure>\n<ol>\n<li>配置验证服务</li>\n</ol>\n<p>CA在颁发证书时，需要验证域名的所有权，证明你对该域名所在的服务器有操作的权限。Let’s Encrypt采用的是服务器上生成一个随机验证文件，再访问CSR中填写的域名，如果访问成功，则证明你对该域名有所有权。为了偷懒，我就不像那位博主一样建立单独的目录了，而是直接在我的web根目录建立一个隐藏目录，用来存放之后生成的随机验证文件。</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#mkdir -p /var/blog/.well-known/acme-chanllenge //建立验证文件存放目录</span></div></pre></td></tr></table></figure>\n<ol>\n<li>获取HTTPS证书</li>\n</ol>\n<p>先下载一个acme-tiny的脚本，保存在<em>ssl</em>目录：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py</span></div></pre></td></tr></table></figure>\n<p>指定账户私钥、CSR、验证目录，然后执行脚本：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/blog/ &gt; ./signed.crt</div></pre></td></tr></table></figure>\n<p>如果执行成功，在当前目录下会生成一个signed.crt文件，这就是申请号的证书文件。</p>\n<p>下载Let’s Encrypt的中间证书，并和网站证书合并在一起:</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span></div><div class=\"line\"><span class=\"comment\">#cat signed.crt intermediate.pem &gt; chained.pem</span></div></pre></td></tr></table></figure>\n<p>再把根证书和中间证书合并在一起：</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#wget -O - https://letsencrypt.org/certs/isrgrootx1.pem &gt; root.pem</span></div><div class=\"line\"><span class=\"comment\">#cat intermediate.pem root.pem &gt; full_chained.pem</span></div></pre></td></tr></table></figure>\n<ol>\n<li><p>配置Nginx，开启https</p>\n<figure class=\"highlight bash\"data-lang=\" bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_certificate     ~/ssl/chained.pem;</div><div class=\"line\">ssl_certificate_key ~/ssl/domain.key;</div></pre></td></tr></table></figure>\n<p>​</p>\n<p>因为Let’s Encrypt签发的证书的有效期只有90天，需要定时使用脚本进行更新。就是把上面的获取过程写进一个脚本，设置crontab，让其自动执行更新即可。我也不确定这台服务器我会续费到多久，暂时先用着吧。  </p>\n</li>\n</ol>\n<h3 id=\"0x3-That’s-All\"><a href=\"#0x3-That’s-All\" class=\"headerlink\" title=\"0x3 That’s All\"></a>0x3 That’s All</h3><p>经过一番折腾，在我的域名前，终于看到了浏览器地址栏我的域名前有了一把绿色的小锁，<em>It’s Encrypt!</em>  </p>\n<p>最后还是感谢一下Jerry Qu撰写的博客文章， <a href=\"https://imququ.com/\">Jerry Qu</a></p>"},{"title":"设计模式学习之装饰者模式","date":"2017-05-11T18:16:06.000Z","_content":"\n这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。  \n这次继续设计模式的学习--------装饰者模式  \n<!-- more --> \n\n其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：\n\n```java\nBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.txt\")));\n```\n\n其中stream就经过了stream->streamreader->bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。\n\n### 装饰者模式要解决的问题\n\n通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。\n\n### 装饰者模式的定义\n\n装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则------对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。\n\n### 代码实例（摘自HeadFirst设计模式上的例子）\n\n```java\n//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口\npublic abstract class Beverage{\n  String description = \"Unknown Beverage\";\n  \n  public String getDescription(){\n    return description;\n  }\n  \n  public abstract double cost();\n  \n}\n```\n\n\n\n```java\n//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性\npublic abstract class CondimentDecorator extends Beverage{\n  \n  public abstract String getDescription();\n}\n```\n\n```java\n//定义一个被装饰对象，这里的description是从父类继承得到的\npublic class Espresso extends Beverage{\n  \n  public Espresso(){\n    \n    description = \"Espresso\";\n  }\n  \n  public double cost(){\n    \n    return 1.99;\n  }\n}\n```\n\n```java\n//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格\npublic class Mocha extends CondimentDecorator{\n  \n  Beverage beverage;\n  \n  public Mocha(Beverage beverage){\n    this.beverage = beverage;\n  }\n  \n  public String getDescription(){\n    return beverage.getDescription() + \", Mocha\";\n  }\n  \n  public double cost(){\n    \n    return .20 + beverage.cost();\n  }\n  \n}\n```\n\n```java\n//代码测试\npublic class DecoratorTest{\n  \n  public static void main(String args[]){\n    \n    \tBdverage beverage = new Espresso();\n    \tbeverage = new Mocha(beverage);\n    \tSystem.out.println(\"The coffee is\"+mocha.getDescription()+\" ,The price is \"+mocha.cost());\n  }\n}\n```\n\n我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。\n\n利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。","source":"_posts/Decorator-Notes.md","raw":"---\ntitle: 设计模式学习之装饰者模式\ndate: 2017-5-12 2:16:06\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 装饰者模式\n---\n\n这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。  \n这次继续设计模式的学习--------装饰者模式  \n<!-- more --> \n\n其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：\n\n```java\nBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.txt\")));\n```\n\n其中stream就经过了stream->streamreader->bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。\n\n### 装饰者模式要解决的问题\n\n通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。\n\n### 装饰者模式的定义\n\n装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则------对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。\n\n### 代码实例（摘自HeadFirst设计模式上的例子）\n\n```java\n//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口\npublic abstract class Beverage{\n  String description = \"Unknown Beverage\";\n  \n  public String getDescription(){\n    return description;\n  }\n  \n  public abstract double cost();\n  \n}\n```\n\n\n\n```java\n//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性\npublic abstract class CondimentDecorator extends Beverage{\n  \n  public abstract String getDescription();\n}\n```\n\n```java\n//定义一个被装饰对象，这里的description是从父类继承得到的\npublic class Espresso extends Beverage{\n  \n  public Espresso(){\n    \n    description = \"Espresso\";\n  }\n  \n  public double cost(){\n    \n    return 1.99;\n  }\n}\n```\n\n```java\n//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格\npublic class Mocha extends CondimentDecorator{\n  \n  Beverage beverage;\n  \n  public Mocha(Beverage beverage){\n    this.beverage = beverage;\n  }\n  \n  public String getDescription(){\n    return beverage.getDescription() + \", Mocha\";\n  }\n  \n  public double cost(){\n    \n    return .20 + beverage.cost();\n  }\n  \n}\n```\n\n```java\n//代码测试\npublic class DecoratorTest{\n  \n  public static void main(String args[]){\n    \n    \tBdverage beverage = new Espresso();\n    \tbeverage = new Mocha(beverage);\n    \tSystem.out.println(\"The coffee is\"+mocha.getDescription()+\" ,The price is \"+mocha.cost());\n  }\n}\n```\n\n我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。\n\n利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。","slug":"Decorator-Notes","published":1,"updated":"2017-05-12T06:10:09.163Z","_id":"cj2ksr6mj000014toyr8iz357","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。<br>这次继续设计模式的学习——–装饰者模式<br><a id=\"more\"></a> </p>\n<p>其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：</p>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>)));</div></pre></td></tr></table></figure>\n<p>其中stream就经过了stream-&gt;streamreader-&gt;bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。</p>\n<h3 id=\"装饰者模式要解决的问题\"><a href=\"#装饰者模式要解决的问题\" class=\"headerlink\" title=\"装饰者模式要解决的问题\"></a>装饰者模式要解决的问题</h3><p>通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。</p>\n<h3 id=\"装饰者模式的定义\"><a href=\"#装饰者模式的定义\" class=\"headerlink\" title=\"装饰者模式的定义\"></a>装饰者模式的定义</h3><p>装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则——对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。</p>\n<h3 id=\"代码实例（摘自HeadFirst设计模式上的例子）\"><a href=\"#代码实例（摘自HeadFirst设计模式上的例子）\" class=\"headerlink\" title=\"代码实例（摘自HeadFirst设计模式上的例子）\"></a>代码实例（摘自HeadFirst设计模式上的例子）</h3><figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  String description = <span class=\"string\">\"Unknown Beverage\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> description;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个被装饰对象，这里的description是从父类继承得到的</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    description = <span class=\"string\">\"Espresso\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title\">CondimentDecorator</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  Beverage beverage;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.beverage = beverage;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">\", Mocha\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> .<span class=\"number\">20</span> + beverage.cost();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\" data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//代码测试</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    \tBdverage beverage = <span class=\"keyword\">new</span> Espresso();</div><div class=\"line\">    \tbeverage = <span class=\"keyword\">new</span> Mocha(beverage);</div><div class=\"line\">    \tSystem.out.println(<span class=\"string\">\"The coffee is\"</span>+mocha.getDescription()+<span class=\"string\">\" ,The price is \"</span>+mocha.cost());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。</p>\n<p>利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。</p>\n","excerpt":"<p>这学期前几个月为了写Mango Cloud的网站和微信公众号程序，耽搁了不少时间，已经很长时间没有学习新的知识了。现在终于可以拿出点时间学点新东西了，在之前的网站开发过程中也深刻感受到了面向对象程序编写中存在很多问题，许多业务代码只是简单的调用方法来完成业务逻辑，其中有不少代码存在重复使用，总之代码看起来不是那么的漂亮，对于强迫症的我是不可容忍的。<br>这次继续设计模式的学习——–装饰者模式<br>","more":"</p>\n<p>其实装饰者模式在学习JAVA IO部分的时候就接触到了，例如以下代码：</p>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>)));</div></pre></td></tr></table></figure>\n<p>其中stream就经过了stream-&gt;streamreader-&gt;bufferedreader的包装过程。下面对装饰者模式进行拆分理解，搞清楚它是怎么实现的。</p>\n<h3 id=\"装饰者模式要解决的问题\"><a href=\"#装饰者模式要解决的问题\" class=\"headerlink\" title=\"装饰者模式要解决的问题\"></a>装饰者模式要解决的问题</h3><p>通常一个类的功能拓展是通过继承来实现的，而往往一个子类相较于父类只增添了一点属性或更改了一个方法的具体实现内容，随着功能需求的增多，会生成很多子类，增大了程序的维护难度。使用继承也意味着这些功能在编译的时候就已经确定了，是静态的。</p>\n<h3 id=\"装饰者模式的定义\"><a href=\"#装饰者模式的定义\" class=\"headerlink\" title=\"装饰者模式的定义\"></a>装饰者模式的定义</h3><p>装饰者模式动态地将责任附加到对象上。装饰者模式允许向一个现有的对象添加新的功能，同时又不改变其原有的结构。装饰者模式创建了一个装饰类，将原来的类进行包装，并在保持原来的类方法签名完整性的前提下，提供了额外的功能。OO原则之开放-关闭原则——对外扩展开放，对修改关闭，即不修改现有代码的情况下，扩充原有类的行为。</p>\n<h3 id=\"代码实例（摘自HeadFirst设计模式上的例子）\"><a href=\"#代码实例（摘自HeadFirst设计模式上的例子）\" class=\"headerlink\" title=\"代码实例（摘自HeadFirst设计模式上的例子）\"></a>代码实例（摘自HeadFirst设计模式上的例子）</h3><figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个抽象类，为之后的被装饰对象提供一致的数据类型，这里也可以定义一个接口</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  String description = <span class=\"string\">\"Unknown Beverage\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> description;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//装饰者抽象类，需要通过继承获得与被装饰者一致的属性和方法，也就是保持原有类的完整性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CondimentDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个被装饰对象，这里的description是从父类继承得到的</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Espresso</span> <span class=\"keyword\">extends</span> <span class=\"title\">Beverage</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Espresso</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    description = <span class=\"string\">\"Espresso\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1.99</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//定义一个装饰者类，通过这个装饰者类可以为被装饰对象提供新的功能，比如这里的为咖啡加上摩卡，并计算新的价格</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mocha</span> <span class=\"keyword\">extends</span> <span class=\"title\">CondimentDecorator</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  Beverage beverage;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Mocha</span><span class=\"params\">(Beverage beverage)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.beverage = beverage;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDescription</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> beverage.getDescription() + <span class=\"string\">\", Mocha\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">cost</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> .<span class=\"number\">20</span> + beverage.cost();</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"data-lang=\" java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//代码测试</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecoratorTest</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    \tBdverage beverage = <span class=\"keyword\">new</span> Espresso();</div><div class=\"line\">    \tbeverage = <span class=\"keyword\">new</span> Mocha(beverage);</div><div class=\"line\">    \tSystem.out.println(<span class=\"string\">\"The coffee is\"</span>+mocha.getDescription()+<span class=\"string\">\" ,The price is \"</span>+mocha.cost());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我这里举的代码例子只使用了一个装饰类，当然还可以继续定义新的装饰类来继续对mocha咖啡进行扩充，例如是否加牛奶，设定容量大小等等。</p>\n<p>利用装饰者模式可以更灵活的对某个类的功能进行扩充，用不着派生出无数的子类，对于代码维护挺有好处的。但是装饰者模式会导致在使用过程中出现许多小对象，如果过度使用，会让程序变得很复杂。</p>"},{"title":"设计模式学习之工厂模式","date":"2017-05-12T06:28:16.000Z","_content":"\n继续设计模式的学习，接下来是工厂模式。\n\n### 工厂模式所要解决的问题\n\n如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法尽心调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。\n\n### 工厂模式的分类\n\n1. 简单工厂模式\n2. 工厂方法模式\n3. 抽象工厂模式","source":"_posts/Factory-Notes.md","raw":"---\ntitle: 设计模式学习之工厂模式\ndate: 2017-5-12 14:28:16\ncategories:\n- Program\ntags:\n- java\n- 设计模式\n- 工厂模式\n---\n\n继续设计模式的学习，接下来是工厂模式。\n\n### 工厂模式所要解决的问题\n\n如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法尽心调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。\n\n### 工厂模式的分类\n\n1. 简单工厂模式\n2. 工厂方法模式\n3. 抽象工厂模式","slug":"Factory-Notes","published":1,"updated":"2017-05-12T07:03:48.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2lhyo6n000058toqo9n6ha2","content":"<p>继续设计模式的学习，接下来是工厂模式。</p>\n<h3 id=\"工厂模式所要解决的问题\"><a href=\"#工厂模式所要解决的问题\" class=\"headerlink\" title=\"工厂模式所要解决的问题\"></a>工厂模式所要解决的问题</h3><p>如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法尽心调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。</p>\n<h3 id=\"工厂模式的分类\"><a href=\"#工厂模式的分类\" class=\"headerlink\" title=\"工厂模式的分类\"></a>工厂模式的分类</h3><ol>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ol>\n","excerpt":"","more":"<p>继续设计模式的学习，接下来是工厂模式。</p>\n<h3 id=\"工厂模式所要解决的问题\"><a href=\"#工厂模式所要解决的问题\" class=\"headerlink\" title=\"工厂模式所要解决的问题\"></a>工厂模式所要解决的问题</h3><p>如果实例化一个对象需要根据繁杂的条件来创建不同类型的对象，那么随着系统的复杂化，创建对象的过程也会变得十分复杂，每次有新的需求都需要去加上判断条件，造成了设计的复杂，也不方便其他方法尽心调用，所以可以将创建对象的过程放到专门的工厂来创建。工厂类扮演了对象生产者的角色。</p>\n<h3 id=\"工厂模式的分类\"><a href=\"#工厂模式的分类\" class=\"headerlink\" title=\"工厂模式的分类\"></a>工厂模式的分类</h3><ol>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2k588vb0001zgtoepre4wzc","category_id":"cj2k588vi0004zgto7tnxmnnj","_id":"cj2k588vs000bzgtoh4lllfwz"},{"post_id":"cj2k588vk0006zgtoqorn5nps","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588w1000kzgtoz5hno1li"},{"post_id":"cj2k588w0000izgtobtk0txf3","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588w5000qzgtorrgcutu4"},{"post_id":"cj2k588vr000azgtoqb1cm7rt","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588w7000tzgtoejztbtcb"},{"post_id":"cj2k588w3000ozgtolw18opsc","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588w8000vzgtobijx1ndh"},{"post_id":"cj2k588vx000fzgtoxmhav97d","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588wb000zzgto8vz4fbwk"},{"post_id":"cj2k588w5000rzgtovvk9kz6w","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588wh0012zgtoj5vmfjhx"},{"post_id":"cj2k588w7000uzgtohna442d9","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588wi0015zgtoi320d8qo"},{"post_id":"cj2k588w2000lzgtox5k75875","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588wj0017zgtoyaseauni"},{"post_id":"cj2k588wa000xzgtoy1ht1ptx","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588wn001azgto8xp1o2ix"},{"post_id":"cj2k588wc0010zgtom1zvarmd","category_id":"cj2k588vi0004zgto7tnxmnnj","_id":"cj2k588wq001dzgto3llp7bt0"},{"post_id":"cj2k588wh0013zgtordb7kusa","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588wt001hzgtobtnr7rkt"},{"post_id":"cj2k588wj0018zgto6q31j5t4","category_id":"cj2k588vi0004zgto7tnxmnnj","_id":"cj2k588ww001jzgtoi0licp01"},{"post_id":"cj2k588wo001bzgtonvn8blxm","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588wy001lzgtojuq60u6k"},{"post_id":"cj2k588wq001ezgtopjdd1m18","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588wz001ozgto4rq6pg7q"},{"post_id":"cj2k588wu001izgto4j59jh4i","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2k588wz001qzgtofmt7fpwb"},{"post_id":"cj2k588ww001kzgto8j0k2pco","category_id":"cj2k588w2000mzgto94mtm1zy","_id":"cj2k588x0001szgto8h0sfxk3"},{"post_id":"cj2ksr6mj000014toyr8iz357","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2ksr6tg000214to3e1g69hx"},{"post_id":"cj2lhyo6n000058toqo9n6ha2","category_id":"cj2k588vq0009zgtodjsjkcs7","_id":"cj2lhyo77000258to3cnyexew"}],"PostTag":[{"post_id":"cj2k588vb0001zgtoepre4wzc","tag_id":"cj2k588vh0003zgtonmt9seud","_id":"cj2k588vw000ezgto2t1vyzjn"},{"post_id":"cj2k588vb0001zgtoepre4wzc","tag_id":"cj2k588vn0007zgto46ngtqcl","_id":"cj2k588vz000hzgtontq2jkq8"},{"post_id":"cj2k588vj0005zgtoab3rhc9c","tag_id":"cj2k588vv000dzgton2bol9lc","_id":"cj2k588w3000nzgto5urafax5"},{"post_id":"cj2k588vk0006zgtoqorn5nps","tag_id":"cj2k588w1000jzgtoici4ukv1","_id":"cj2k588wb000yzgtoq7zlny89"},{"post_id":"cj2k588vk0006zgtoqorn5nps","tag_id":"cj2k588w4000pzgtoe434a1xf","_id":"cj2k588wh0011zgtorqoctpbb"},{"post_id":"cj2k588vr000azgtoqb1cm7rt","tag_id":"cj2k588w8000wzgtox8wrbl6j","_id":"cj2k588wq001czgto66ntqiup"},{"post_id":"cj2k588vr000azgtoqb1cm7rt","tag_id":"cj2k588wh0014zgtof642re2u","_id":"cj2k588wt001fzgtourxktxzb"},{"post_id":"cj2k588vs000czgtodm29k420","tag_id":"cj2k588wm0019zgtomr85p6cv","_id":"cj2k588wz001nzgto9hwj9zre"},{"post_id":"cj2k588vs000czgtodm29k420","tag_id":"cj2k588wt001gzgtodjshi6vj","_id":"cj2k588wz001pzgton2sdlhoy"},{"post_id":"cj2k588vx000fzgtoxmhav97d","tag_id":"cj2k588wy001mzgto4na15ons","_id":"cj2k588x2001wzgtotvv5hkrz"},{"post_id":"cj2k588vx000fzgtoxmhav97d","tag_id":"cj2k588wz001rzgto5b5u10xh","_id":"cj2k588x2001xzgtoyyca2fac"},{"post_id":"cj2k588vx000fzgtoxmhav97d","tag_id":"cj2k588x0001tzgto5a41ptic","_id":"cj2k588x3001zzgtowhdfoxan"},{"post_id":"cj2k588vx000fzgtoxmhav97d","tag_id":"cj2k588x1001uzgtoznyoy1dv","_id":"cj2k588x30020zgtoivhqhoaf"},{"post_id":"cj2k588w0000izgtobtk0txf3","tag_id":"cj2k588x2001vzgtodr2xu8y3","_id":"cj2k588x40024zgtocttcwwtz"},{"post_id":"cj2k588w0000izgtobtk0txf3","tag_id":"cj2k588x3001yzgtod9qbqwgc","_id":"cj2k588x50025zgtohogwm4vy"},{"post_id":"cj2k588w0000izgtobtk0txf3","tag_id":"cj2k588x40021zgtog67du8ea","_id":"cj2k588x50027zgtoryacsd9m"},{"post_id":"cj2k588w0000izgtobtk0txf3","tag_id":"cj2k588x40022zgtokdbt1npf","_id":"cj2k588x50028zgtovv0emzaf"},{"post_id":"cj2k588w2000lzgtox5k75875","tag_id":"cj2k588x40023zgtomm5e417s","_id":"cj2k588x7002bzgtocb5tlk57"},{"post_id":"cj2k588w2000lzgtox5k75875","tag_id":"cj2k588wz001rzgto5b5u10xh","_id":"cj2k588x7002czgtol6ox8kvp"},{"post_id":"cj2k588w2000lzgtox5k75875","tag_id":"cj2k588x60029zgtopmb4tkjb","_id":"cj2k588x9002ezgtoh7q5gybw"},{"post_id":"cj2k588w3000ozgtolw18opsc","tag_id":"cj2k588wz001rzgto5b5u10xh","_id":"cj2k588xe002hzgtoitv03v97"},{"post_id":"cj2k588w3000ozgtolw18opsc","tag_id":"cj2k588x7002dzgtopdkrexr2","_id":"cj2k588xf002izgtofkk4sn5g"},{"post_id":"cj2k588w3000ozgtolw18opsc","tag_id":"cj2k588x9002fzgtopjx901gb","_id":"cj2k588xf002kzgtogtakrjsn"},{"post_id":"cj2k588w5000rzgtovvk9kz6w","tag_id":"cj2k588xe002gzgtotx8whh9c","_id":"cj2k588xg002nzgto86gf5lh6"},{"post_id":"cj2k588w5000rzgtovvk9kz6w","tag_id":"cj2k588xf002jzgtou7hi59cs","_id":"cj2k588xg002ozgtoi9dbfpv0"},{"post_id":"cj2k588w5000rzgtovvk9kz6w","tag_id":"cj2k588xf002lzgtog1brswhy","_id":"cj2k588xg002qzgtokiu3d3v6"},{"post_id":"cj2k588w7000uzgtohna442d9","tag_id":"cj2k588xf002mzgtomwljbina","_id":"cj2k588xi002vzgtoeaodkn9o"},{"post_id":"cj2k588w7000uzgtohna442d9","tag_id":"cj2k588xg002pzgtof3xj517l","_id":"cj2k588xi002wzgtoso68vwbd"},{"post_id":"cj2k588w7000uzgtohna442d9","tag_id":"cj2k588xg002rzgtolxnc2n3o","_id":"cj2k588xi002yzgto7820u9mf"},{"post_id":"cj2k588w7000uzgtohna442d9","tag_id":"cj2k588xe002gzgtotx8whh9c","_id":"cj2k588xi002zzgto2u54x6ho"},{"post_id":"cj2k588w7000uzgtohna442d9","tag_id":"cj2k588xh002tzgto546clbv9","_id":"cj2k588xj0031zgtoqccu7yml"},{"post_id":"cj2k588wa000xzgtoy1ht1ptx","tag_id":"cj2k588xi002uzgtogq210i6h","_id":"cj2k588xj0032zgto80bddt7i"},{"post_id":"cj2k588wa000xzgtoy1ht1ptx","tag_id":"cj2k588xi002xzgtogqzvbn3h","_id":"cj2k588xk0034zgtowp7arnu2"},{"post_id":"cj2k588wc0010zgtom1zvarmd","tag_id":"cj2k588xj0030zgto6de0u2hh","_id":"cj2k588xl0038zgtoo8k2ql0z"},{"post_id":"cj2k588wc0010zgtom1zvarmd","tag_id":"cj2k588wz001rzgto5b5u10xh","_id":"cj2k588xm0039zgto9hzplbva"},{"post_id":"cj2k588wc0010zgtom1zvarmd","tag_id":"cj2k588xk0035zgto4huocnqq","_id":"cj2k588xm003bzgtoz6ccemg7"},{"post_id":"cj2k588wc0010zgtom1zvarmd","tag_id":"cj2k588xl0036zgto0ez52fhh","_id":"cj2k588xm003czgtoy8mbimr4"},{"post_id":"cj2k588wh0013zgtordb7kusa","tag_id":"cj2k588xl0037zgto2l6o0tnw","_id":"cj2k588xm003ezgto1tz1xx87"},{"post_id":"cj2k588wh0013zgtordb7kusa","tag_id":"cj2k588xm003azgtox03yc06g","_id":"cj2k588xn003fzgto108jle6u"},{"post_id":"cj2k588wi0016zgtojzpahrky","tag_id":"cj2k588xm003dzgto9wff8xnl","_id":"cj2k588xn003hzgtolo406k57"},{"post_id":"cj2k588wj0018zgto6q31j5t4","tag_id":"cj2k588xj0030zgto6de0u2hh","_id":"cj2k588xq003mzgtokyn7i2q2"},{"post_id":"cj2k588wj0018zgto6q31j5t4","tag_id":"cj2k588wz001rzgto5b5u10xh","_id":"cj2k588xs003nzgtokye4ksf1"},{"post_id":"cj2k588wj0018zgto6q31j5t4","tag_id":"cj2k588xk0035zgto4huocnqq","_id":"cj2k588xt003pzgtoojzng7xs"},{"post_id":"cj2k588wj0018zgto6q31j5t4","tag_id":"cj2k588xl0036zgto0ez52fhh","_id":"cj2k588xu003qzgtoumqcgbsr"},{"post_id":"cj2k588wo001bzgtonvn8blxm","tag_id":"cj2k588xp003lzgto8mjhqzsq","_id":"cj2k588xv003tzgtoh03p694h"},{"post_id":"cj2k588wo001bzgtonvn8blxm","tag_id":"cj2k588xi002uzgtogq210i6h","_id":"cj2k588xv003uzgtourimql2n"},{"post_id":"cj2k588wo001bzgtonvn8blxm","tag_id":"cj2k588xu003rzgtokbnyjf1r","_id":"cj2k588xv003wzgto59egt8oo"},{"post_id":"cj2k588wq001ezgtopjdd1m18","tag_id":"cj2k588xu003szgtoqzrgrorr","_id":"cj2k588xw003zzgtopya5ajqn"},{"post_id":"cj2k588wq001ezgtopjdd1m18","tag_id":"cj2k588xv003vzgtoc4tr2xyl","_id":"cj2k588xw0040zgtox1qw78x4"},{"post_id":"cj2k588wq001ezgtopjdd1m18","tag_id":"cj2k588xv003xzgtoe0zww33u","_id":"cj2k588xx0042zgtog0cavdae"},{"post_id":"cj2k588wu001izgto4j59jh4i","tag_id":"cj2k588xi002uzgtogq210i6h","_id":"cj2k588xy0045zgtoi04vwv1m"},{"post_id":"cj2k588wu001izgto4j59jh4i","tag_id":"cj2k588xu003rzgtokbnyjf1r","_id":"cj2k588xy0046zgto7frdhi9c"},{"post_id":"cj2k588wu001izgto4j59jh4i","tag_id":"cj2k588xp003lzgto8mjhqzsq","_id":"cj2k588xz0048zgtof5o6rb66"},{"post_id":"cj2k588ww001kzgto8j0k2pco","tag_id":"cj2k588xy0044zgtoj8ipqos3","_id":"cj2k588y00049zgtotq105j3s"},{"post_id":"cj2k588ww001kzgto8j0k2pco","tag_id":"cj2k588xl0037zgto2l6o0tnw","_id":"cj2k588y0004azgtox8q2rnd6"},{"post_id":"cj2ksr6mj000014toyr8iz357","tag_id":"cj2k588xu003szgtoqzrgrorr","_id":"cj2ksr6th000314toox6x14e2"},{"post_id":"cj2ksr6mj000014toyr8iz357","tag_id":"cj2k588xv003vzgtoc4tr2xyl","_id":"cj2ksr6ti000414toxfp88tr6"},{"post_id":"cj2ksr6mj000014toyr8iz357","tag_id":"cj2ksr6tc000114to3adyssrh","_id":"cj2ksr6ti000514tofxcyg18h"},{"post_id":"cj2lhyo6n000058toqo9n6ha2","tag_id":"cj2k588xu003szgtoqzrgrorr","_id":"cj2lhyo78000358toj6njqrpx"},{"post_id":"cj2lhyo6n000058toqo9n6ha2","tag_id":"cj2k588xv003vzgtoc4tr2xyl","_id":"cj2lhyo78000458tom0kxxvvq"},{"post_id":"cj2lhyo6n000058toqo9n6ha2","tag_id":"cj2lhyo71000158tog8s7g0a6","_id":"cj2lhyo79000558to7cbh7pd7"}],"Tag":[{"name":"HCTF","_id":"cj2k588vh0003zgtonmt9seud"},{"name":"萌新第一次","_id":"cj2k588vn0007zgto46ngtqcl"},{"name":"tools reverse","_id":"cj2k588vv000dzgton2bol9lc"},{"name":"C","_id":"cj2k588w1000jzgtoici4ukv1"},{"name":"Helloworld","_id":"cj2k588w4000pzgtoe434a1xf"},{"name":"github","_id":"cj2k588w8000wzgtox8wrbl6j"},{"name":"ssh key","_id":"cj2k588wh0014zgtof642re2u"},{"name":"markdown","_id":"cj2k588wm0019zgtomr85p6cv"},{"name":"入坑","_id":"cj2k588wt001gzgtodjshi6vj"},{"name":"GDB","_id":"cj2k588wy001mzgto4na15ons"},{"name":"Linux","_id":"cj2k588wz001rzgto5b5u10xh"},{"name":"Debugger","_id":"cj2k588x0001tzgto5a41ptic"},{"name":"peda","_id":"cj2k588x1001uzgtoznyoy1dv"},{"name":"Github","_id":"cj2k588x2001vzgtodr2xu8y3"},{"name":"Webhook","_id":"cj2k588x3001yzgtod9qbqwgc"},{"name":"自动部署","_id":"cj2k588x40021zgtog67du8ea"},{"name":"code deploy","_id":"cj2k588x40022zgtokdbt1npf"},{"name":"VIM","_id":"cj2k588x40023zgtomm5e417s"},{"name":"Edtor","_id":"cj2k588x60029zgtopmb4tkjb"},{"name":"openwrt","_id":"cj2k588x7002dzgtopdkrexr2"},{"name":"enviroment","_id":"cj2k588x9002fzgtopjx901gb"},{"name":"MariaDB","_id":"cj2k588xe002gzgtotx8whh9c"},{"name":"New DB","_id":"cj2k588xf002jzgtou7hi59cs"},{"name":"Remote","_id":"cj2k588xf002lzgtog1brswhy"},{"name":"CentOS","_id":"cj2k588xf002mzgtomwljbina"},{"name":"PHP","_id":"cj2k588xg002pzgtof3xj517l"},{"name":"Nignx","_id":"cj2k588xg002rzgtolxnc2n3o"},{"name":"LNMP","_id":"cj2k588xh002tzgto546clbv9"},{"name":"python","_id":"cj2k588xi002uzgtogq210i6h"},{"name":"PIL","_id":"cj2k588xi002xzgtogqzvbn3h"},{"name":"CTF","_id":"cj2k588xj0030zgto6de0u2hh"},{"name":"PWN","_id":"cj2k588xk0035zgto4huocnqq"},{"name":"pwnable","_id":"cj2k588xl0036zgto0ez52fhh"},{"name":"nginx","_id":"cj2k588xl0037zgto2l6o0tnw"},{"name":"domain","_id":"cj2k588xm003azgtox03yc06g"},{"name":"hello hexo","_id":"cj2k588xm003dzgto9wff8xnl"},{"name":"tornado","_id":"cj2k588xp003lzgto8mjhqzsq"},{"name":"web","_id":"cj2k588xu003rzgtokbnyjf1r"},{"name":"java","_id":"cj2k588xu003szgtoqzrgrorr"},{"name":"设计模式","_id":"cj2k588xv003vzgtoc4tr2xyl"},{"name":"观察者模式","_id":"cj2k588xv003xzgtoe0zww33u"},{"name":"https","_id":"cj2k588xy0044zgtoj8ipqos3"},{"name":"装饰者模式","_id":"cj2ksr6tc000114to3adyssrh"},{"name":"工厂模式","_id":"cj2lhyo71000158tog8s7g0a6"}]}}